Index: extension/source/containers/auth/Home/TxsPanel.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* eslint-disable no-nested-ternary */\r\nimport * as React from 'react';\r\nimport { FC,\r\n  // useCallback,\r\n  useState } from 'react';\r\n// import { v4 as uuid } from 'uuid';\r\nimport { Icon, IconButton, Button } from 'components/index';\r\nimport {\r\n  // useController,\r\n  useStore } from 'hooks/index';\r\n\r\n// import SyscoinIcon from 'assets/images/logo-s.svg';\r\nimport { Transaction, Assets } from '../../../scripts/types';\r\n\r\nimport ActivityPanel from './ActivityPanel';\r\nimport AssetsPanel from './AssetsPanel';\r\n\r\ninterface ITxsPanel {\r\n  address: string;\r\n  assets: Assets[];\r\n  getTransactionAssetData: any;\r\n  getTransactionData: any;\r\n  openAssetBlockExplorer: any;\r\n  openBlockExplorer: any;\r\n  setAssetSelected: any;\r\n  setAssetTx: any;\r\n  setAssetType: any;\r\n  setOpenAssetBlockExplorer: any;\r\n  setOpenBlockExplorer: any;\r\n  setTx: any;\r\n  setTxType: any;\r\n  setTxidSelected: any;\r\n  transactions: Transaction[];\r\n  txidSelected: any;\r\n}\r\n\r\nconst TxsPanel: FC<ITxsPanel> = ({ transactions,\r\n                                   assets,\r\n                                   // setOpenBlockExplorer,\r\n                                   // setTxidSelected,\r\n                                   // setAssetSelected,\r\n                                   // setOpenAssetBlockExplorer,\r\n                                   // setTxType,\r\n                                   // setAssetType,\r\n                                   // getTransactionData,\r\n                                   // setTx,\r\n                                   // setAssetTx,\r\n                                   // getTransactionAssetData\r\n}) => {\r\n  // const controller = useController();\r\n  const [isShowed, setShowed] = useState<boolean>(false);\r\n  const [isActivity, setActivity] = useState<boolean>(true);\r\n  const [scrollArea,\r\n    // setScrollArea\r\n  ] = useState<HTMLElement>();\r\n\r\n  const { changingNetwork } = useStore();\r\n  // const { formatDistanceDate, formatCurrency } = useFormat();\r\n\r\n  // const isShowedGroupBar = useCallback(\r\n  //   (tx: Transaction, idx: number) => {\r\n  //     return (\r\n  //       idx === 0 ||\r\n  //       new Date(tx.blockTime * 1e3).toDateString() !==\r\n  //       new Date(transactions[idx - 1].blockTime * 1e3).toDateString()\r\n  //     );\r\n  //   },\r\n  //   [transactions]\r\n  // );\r\n\r\n  // const handleFetchMoreTxs = () => {\r\n  //   if (transactions.length) {\r\n  //     controller.wallet.account.updateTxs();\r\n  //   }\r\n  // };\r\n\r\n  // const handleScroll = useCallback((event) => {\r\n  //   event.persist();\r\n  //\r\n  //   if (event.target.scrollTop) setShowed(true);\r\n  //\r\n  //   setScrollArea(event.target);\r\n  //   const scrollOffset = event.target.scrollHeight - event.target.scrollTop;\r\n  //\r\n  //   if (scrollOffset === event.target.clientHeight) {\r\n  //     if (!changingNetwork) {\r\n  //       handleFetchMoreTxs();\r\n  //     }\r\n  //   }\r\n  // }, []);\r\n\r\n  const handleGoTop = () => {\r\n    // eslint-disable-next-line prettier/prettier\r\n    scrollArea!.scrollTo({ top: 0, behavior: 'smooth' });\r\n    setShowed(false);\r\n  };\r\n\r\n  // const getTxType = (tx: Transaction) => {\r\n  //   if (tx.tokenType === \"SPTAssetActivate\") {\r\n  //     return 'SPT creation';\r\n  //   }\r\n  //\r\n  //   if (tx.tokenType === \"SPTAssetSend\") {\r\n  //     return 'SPT mint';\r\n  //   }\r\n  //\r\n  //   if (tx.tokenType === \"SPTAssetUpdate\") {\r\n  //     return 'SPT update';\r\n  //   }\r\n  //\r\n  //   return 'Transaction';\r\n  // }\r\n\r\n  return (\r\n    <div className=\"w-full flex items-center flex-col\">\r\n      {!isShowed ? (\r\n        <div>\r\n          <Button\r\n            className={isActivity == false ? \"flex-2 p-4 pr-12 text-white text-base bg-brand-navyborder\" : \"flex-2 p-4 pr-12 text-white text-base\"}\r\n            type=\"button\"\r\n            onClick={() => { setActivity(false) }}\r\n          >\r\n            Assets\r\n          </Button>\r\n\r\n          <Button\r\n            className={isActivity == true ? \"flex-2 p-4 pl-12 text-white text-base bg-brand-navyborder\" : \"flex-2 p-4 pl-12 text-white text-base\"}\r\n            type=\"button\"\r\n            onClick={() => { setActivity(true) }}\r\n          >\r\n            Activity\r\n          </Button>\r\n        </div>\r\n      ) : (\r\n        <div >\r\n          {isActivity ? \"Activity\" : \"Assets\"}\r\n\r\n          <IconButton type=\"primary\" shape=\"circle\" onClick={handleGoTop}>\r\n            <Icon name=\"vertical-align\" className=\"w-4 bg-brand-gray200 text-brand-navy\" />\r\n          </IconButton>\r\n        </div>\r\n      )}\r\n\r\n      {/* {changingNetwork && (\r\n        <>\r\n          <span>\r\n            <Icon name=\"loading\" className=\"w-4 bg-brand-gray200 text-brand-navy\" />\r\n          </span>\r\n          <img src={`/${SyscoinIcon}`} className=\"w-40 max-w-40 mx-auto mt-8\" alt=\"Syscoin\" />\r\n        </>\r\n      )} */}\r\n\r\n      {isActivity ? (\r\n        <ActivityPanel\r\n          classNames={isActivity == true ? \"flex-2 p-4 pr-12 text-white text-base bg-brand-navyborder\" : \"flex-2 p-4 pr-12 text-white text-base\"}\r\n          show={transactions && !changingNetwork}\r\n        />\r\n      ) : (\r\n        <AssetsPanel\r\n          classNames={isActivity == false ? \"flex-2 p-4 pr-12 text-white text-base bg-brand-navyborder\" : \"flex-2 p-4 pr-12 text-white text-base\"}\r\n          show={assets && !changingNetwork}\r\n        />\r\n      )}\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TxsPanel;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Home/TxsPanel.tsx b/extension/source/containers/auth/Home/TxsPanel.tsx
--- a/extension/source/containers/auth/Home/TxsPanel.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Home/TxsPanel.tsx	(date 1637064532642)
@@ -5,15 +5,24 @@
   useState } from 'react';
 // import { v4 as uuid } from 'uuid';
 import { Icon, IconButton, Button } from 'components/index';
+<<<<<<< HEAD
 import {
   // useController,
   useStore } from 'hooks/index';
+=======
+import { useController, useStore, useFormat } from 'hooks/index';
+import SyscoinIcon from 'assets/images/logo-s.svg';
+import { ActivityPanel, AssetsPanel } from './Panel/index';
+>>>>>>> origin/styles
 
 // import SyscoinIcon from 'assets/images/logo-s.svg';
 import { Transaction, Assets } from '../../../scripts/types';
+<<<<<<< HEAD
 
 import ActivityPanel from './ActivityPanel';
 import AssetsPanel from './AssetsPanel';
+=======
+>>>>>>> origin/styles
 
 interface ITxsPanel {
   address: string;
@@ -34,6 +43,7 @@
   txidSelected: any;
 }
 
+<<<<<<< HEAD
 const TxsPanel: FC<ITxsPanel> = ({ transactions,
                                    assets,
                                    // setOpenBlockExplorer,
@@ -48,6 +58,10 @@
                                    // getTransactionAssetData
 }) => {
   // const controller = useController();
+=======
+export const TxsPanel: FC<ITxsPanel> = ({ transactions, assets, setOpenBlockExplorer, setTxidSelected, setAssetSelected, setOpenAssetBlockExplorer, setTxType, setAssetType, getTransactionData, setTx, setAssetTx, getTransactionAssetData }) => {
+  const controller = useController();
+>>>>>>> origin/styles
   const [isShowed, setShowed] = useState<boolean>(false);
   const [isActivity, setActivity] = useState<boolean>(true);
   const [scrollArea,
@@ -165,5 +179,3 @@
     </div>
   );
 };
-
-export default TxsPanel;
Index: extension/source/containers/auth/SignPSBT/SignPSBT.tsx
===================================================================
diff --git a/extension/source/containers/auth/SignPSBT/SignPSBT.tsx b/extension/source/containers/auth/SignPSBT/SignPSBT.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/SignPSBT/SignPSBT.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,20 +0,0 @@
-import { useStore } from 'hooks/index';
-import React from 'react';
-import SignTransaction from '../SignTransaction';
-
-const SignPSBT = () => {
-  const { signingPSBT } = useStore();
-
-  return (
-    <div>
-      <SignTransaction
-        item="currentPsbtToSign"
-        transactingStateItem={signingPSBT}
-        sendPSBT={true}
-        warning="You are sending a signed PSBT to this site. This can be dangerous if you are not so sure about what you are doing. Confirm if you are fully aware of it."
-      />
-    </div>
-  )
-};
-
-export default SignPSBT;
Index: extension/source/containers/auth/UpdateAsset/Confirm.tsx
===================================================================
diff --git a/extension/source/containers/auth/UpdateAsset/Confirm.tsx b/extension/source/containers/auth/UpdateAsset/Confirm.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/UpdateAsset/Confirm.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,30 +0,0 @@
-import React from 'react';
-import { useController, useStore } from 'hooks/index';
-
-import { ConfirmTransaction } from '../SiteTransaction';
-
-const UpdateConfirm = () => {
-  const controller = useController();
-  const updateAsset =
-    controller.wallet.account.getTransactionItem().updateAssetItem;
-
-  const { updatingAsset } = useStore();
-
-  return (
-    <div>
-      <ConfirmTransaction
-        transactionItem="updateAssetItem"
-        itemStringToClearData="updateAssetItem"
-        confirmTransaction={
-          controller.wallet.account.confirmUpdateAssetTransaction
-        }
-        errorMessage="Can't update token. Try again later."
-        layoutTitle="Confirm token update"
-        data={updateAsset}
-        transactingStateItem={updatingAsset}
-      />
-    </div>
-  );
-};
-
-export default UpdateConfirm;
Index: extension/source/containers/auth/Settings/views/routes.tsx
===================================================================
diff --git a/extension/source/containers/auth/Settings/views/routes.tsx b/extension/source/containers/auth/Settings/views/routes.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/Settings/views/routes.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,86 +0,0 @@
-// export const MAIN_VIEW = '#';
-// export const ACCOUNT_VIEW = '#account';
-// export const GENERAL_VIEW = '#general';
-// export const PHRASE_VIEW = '#phrase';
-// export const DELETE_WALLET_VIEW = '#delete_wallet';
-// export const NEW_ACCOUNT_VIEW = '#new_account';
-// export const PRIV_KEY_VIEW = '#private_key';
-// export const ABOUT_VIEW = '#about';
-// export const CONNECT_HARDWARE_WALLET_VIEW = '#connect_hardware_wallet_view';
-// export const AUTOLOCK_VIEW = '#autolock_view';
-
-import React, { useEffect, FC } from 'react';
-import { Switch, Route, useLocation, useHistory } from 'react-router-dom';
-import { useController } from 'hooks/index';
-import {
-  AboutView,
-  AccountView,
-  AutolockView,
-  ConnectHardwareWalletView,
-  DeleteWalletView,
-  MainView,
-  NewAccountView,
-  PhraseView,
-  PrivateKeyView
-} from 'containers/auth/Settings/views';
-
-interface ISettings {
-  accountSettings?: boolean;
-  generalSettings?: boolean;
-}
-
-const Settings: FC<ISettings> = ({ accountSettings = false, generalSettings = false }) => {
-  const location = useLocation();
-  const history = useHistory();
-  const controller = useController();
-
-  useEffect(() => {
-    const redirectRoute = controller.appRoute();
-
-    history.push(redirectRoute);
-  }, []);
-
-  useEffect(() => {
-    controller.appRoute(location.pathname);
-  }, [location]);
-
-  return (
-    <>
-      <div>
-        <Switch>
-          <Route
-            path='/general'
-            render={(props) => (
-              <MainView {...props} accountSettings={accountSettings} generalSettings={generalSettings} />
-            )}
-            exact
-          />
-          <Route path="/general-autolock" component={AutolockView} exact />
-          <Route path="/general-about" component={AboutView} exact />
-          <Route path="/general-phrase" component={PhraseView} exact />
-          <Route path="/general-delete" component={DeleteWalletView} exact />
-
-          <Route
-            path='/account'
-            render={(props) => (
-              <MainView {...props} accountSettings={accountSettings} generalSettings={generalSettings} />
-            )}
-            exact
-          />
-          <Route
-            path='/account-priv'
-            render={(props) => (
-              <PrivateKeyView {...props} id='0' />
-            )}
-            exact
-          />
-          <Route path="/account-hardware" component={ConnectHardwareWalletView} exact />
-          <Route path="/account-newaccount" component={NewAccountView} exact />
-          <Route path="/account-details" component={AccountView} exact />
-        </Switch>
-      </div>
-    </>
-  );
-};
-
-export default Settings;
Index: extension/source/containers/auth/Home/AssetsPanel.tsx
===================================================================
diff --git a/extension/source/containers/auth/Home/AssetsPanel.tsx b/extension/source/containers/auth/Home/AssetsPanel.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/Home/AssetsPanel.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,61 +0,0 @@
-import React, { FC } from 'react';
-
-interface IAssetsPanel {
-  show: boolean;
-  classNames: any
-}
-
-const AssetsPanel: FC<IAssetsPanel> = ({ show, classNames }) => {
-  return (
-    <ul className={classNames}>
-      assets panel
-
-      {show ? (
-        <ul>show assets panel</ul>
-      ) : (
-        <span>
-          You have no tokens or NFTs.
-        </span>
-
-        //       {!changingNetwork && (
-        //         <img src={`/${SyscoinIcon}`} className="w-40 max-w-40 mx-auto mt-8" alt="Syscoin" />
-        //       )}
-        //     </>
-      )}
-
-      {/* <ul>
-        {assets.map((asset: Assets) => {
-          if (asset.assetGuid !== undefined) {
-            return (
-              <Fragment key={uuid()}>
-                <div
-                  onClick={() => {
-                    setOpenAssetBlockExplorer(true);
-                    setAssetSelected(asset.assetGuid);
-                    setAssetType(asset.type)
-                    getTransactionAssetData(asset.assetGuid).then((response: any) => {
-                      setAssetTx(response);
-                    })
-                  }}
-                >
-                  <div>
-                    <span title="Click here to go to view transaction in sys block explorer">
-                      <span>
-                        {formatCurrency(String(asset.balance / 10 ** asset.decimals), asset.decimals)} {asset.symbol}
-                      </span>
-                    </span>
-                    <div>
-                      <Icon name="arrow-up" className="w-4 bg-brand-gray200 text-brand-navy" />
-                    </div>
-                  </div>
-                </div>
-              </Fragment>
-            );
-          }
-        })}
-      </ul> */}
-    </ul>
-  )
-}
-
-export default AssetsPanel;
\ No newline at end of file
Index: extension/source/containers/auth/MintNFT/index.tsx
===================================================================
diff --git a/extension/source/containers/auth/MintNFT/index.tsx b/extension/source/containers/auth/MintNFT/index.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/MintNFT/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,2 +0,0 @@
-export { default } from './MintNFT';
-export { default as MintNFTConfirm } from './Confirm';
Index: extension/source/containers/auth/IssueAsset/IssueAsset.tsx
===================================================================
diff --git a/extension/source/containers/auth/IssueAsset/IssueAsset.tsx b/extension/source/containers/auth/IssueAsset/IssueAsset.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/IssueAsset/IssueAsset.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,24 +0,0 @@
-import React from 'react';
-import { useController } from 'hooks/index';
-
-import SiteTransaction from '../SiteTransaction';
-
-const IssueAsset = () => {
-  const controller = useController();
-
-  return (
-    <div>
-      <SiteTransaction
-        callbackToSetDataFromWallet={
-          controller.wallet.account.setDataFromWalletToMintSPT
-        }
-        messageToSetDataFromWallet="DATA_FROM_WALLET_TO_MINT_TOKEN"
-        confirmRoute="/issueAsset/confirm"
-        itemStringToClearData="mintSPT"
-        layoutTitle="Issue token"
-      />
-    </div>
-  );
-};
-
-export default IssueAsset;
Index: extension/source/containers/auth/SiteTransaction/index.tsx
===================================================================
diff --git a/extension/source/containers/auth/SiteTransaction/index.tsx b/extension/source/containers/auth/SiteTransaction/index.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/SiteTransaction/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,2 +0,0 @@
-export { default } from './SiteTransaction';
-export { default as ConfirmTransaction } from './Confirm';
Index: extension/source/containers/auth/SignPSBT/index.tsx
===================================================================
diff --git a/extension/source/containers/auth/SignPSBT/index.tsx b/extension/source/containers/auth/SignPSBT/index.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/SignPSBT/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,1 +0,0 @@
-export { default } from './SignPSBT';
Index: extension/source/containers/auth/SignTransaction/index.tsx
===================================================================
diff --git a/extension/source/containers/auth/SignTransaction/index.tsx b/extension/source/containers/auth/SignTransaction/index.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/SignTransaction/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,1 +0,0 @@
-export { default } from './SignTransaction';
Index: extension/source/containers/auth/ConnectWallet/index.tsx
===================================================================
diff --git a/extension/source/containers/auth/ConnectWallet/index.tsx b/extension/source/containers/auth/ConnectWallet/index.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/ConnectWallet/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,1 +0,0 @@
-export { default } from './ConnectWallet';
Index: extension/source/containers/auth/Create/Confirm.tsx
===================================================================
diff --git a/extension/source/containers/auth/Create/Confirm.tsx b/extension/source/containers/auth/Create/Confirm.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/Create/Confirm.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,32 +0,0 @@
-import React from 'react';
-import IWalletState from 'state/wallet/types';
-import { useSelector } from 'react-redux';
-import { useController } from 'hooks/index';
-import { RootState } from 'state/store';
-
-import { ConfirmTransaction } from '../SiteTransaction';
-
-const CreateTokenConfirm = () => {
-  const controller = useController();
-  const { newSPT } = controller.wallet.account.getTransactionItem();
-
-  const { creatingAsset }: IWalletState = useSelector(
-    (state: RootState) => state.wallet
-  );
-
-  return (
-    <div>
-      <ConfirmTransaction
-        transactionItem="newSPT"
-        itemStringToClearData="newSPT"
-        confirmTransaction={controller.wallet.account.confirmNewSPT}
-        errorMessage="Can't create token. Try again later."
-        layoutTitle="Confirm token creation"
-        data={newSPT}
-        transactingStateItem={creatingAsset}
-      />
-    </div>
-  );
-};
-
-export default CreateTokenConfirm;
Index: extension/source/containers/auth/Create/Create.tsx
===================================================================
diff --git a/extension/source/containers/auth/Create/Create.tsx b/extension/source/containers/auth/Create/Create.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/Create/Create.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,24 +0,0 @@
-import React from 'react';
-import { useController } from 'hooks/index';
-
-import SiteTransaction from '../SiteTransaction';
-
-const Create = () => {
-  const controller = useController();
-
-  return (
-    <div>
-      <SiteTransaction
-        callbackToSetDataFromWallet={
-          controller.wallet.account.setDataFromWalletToCreateSPT
-        }
-        messageToSetDataFromWallet="DATA_FROM_WALLET_TO_CREATE_TOKEN"
-        confirmRoute="/create/confirm"
-        itemStringToClearData="newSPT"
-        layoutTitle="Create token"
-      />
-    </div>
-  );
-};
-
-export default Create;
Index: extension/source/containers/auth/IssueNFT/Confirm.tsx
===================================================================
diff --git a/extension/source/containers/auth/IssueNFT/Confirm.tsx b/extension/source/containers/auth/IssueNFT/Confirm.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/IssueNFT/Confirm.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,27 +0,0 @@
-import React from 'react';
-import { useController, useStore } from 'hooks/index';
-
-import { ConfirmTransaction } from '../SiteTransaction';
-
-const CreateAndIssueNFTConfirm = () => {
-  const controller = useController();
-  const { issuingNFT } = useStore();
-
-  const { mintNFT } = controller.wallet.account.getTransactionItem();
-
-  return (
-    <div>
-      <ConfirmTransaction
-        transactionItem="mintNFT"
-        itemStringToClearData="mintNFT"
-        confirmTransaction={controller.wallet.account.confirmIssueNFT}
-        errorMessage="Can't create and issue NFT. Try again later."
-        layoutTitle="Confirm NFT creation"
-        data={mintNFT}
-        transactingStateItem={issuingNFT}
-      />
-    </div>
-  );
-};
-
-export default CreateAndIssueNFTConfirm;
Index: extension/source/containers/auth/SignAndSend/SignAndSend.tsx
===================================================================
diff --git a/extension/source/containers/auth/SignAndSend/SignAndSend.tsx b/extension/source/containers/auth/SignAndSend/SignAndSend.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/SignAndSend/SignAndSend.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,20 +0,0 @@
-import React from 'react';
-import { useStore } from 'hooks/index';
-import SignTransaction from '../SignTransaction';
-
-const SignAndSend = () => {
-  const { signingTransaction } = useStore();
-
-  return (
-    <div>
-      <SignTransaction
-        item="currentPSBT"
-        transactingStateItem={signingTransaction}
-        sendPSBT={false}
-        warning="Only sign messages from sites you fully trust with your account."
-      />
-    </div>
-  )
-};
-
-export default SignAndSend;
Index: extension/source/containers/auth/SiteTransaction/Confirm.tsx
===================================================================
diff --git a/extension/source/containers/auth/SiteTransaction/Confirm.tsx b/extension/source/containers/auth/SiteTransaction/Confirm.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/SiteTransaction/Confirm.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,441 +0,0 @@
-import React, { useState, useEffect, FC } from 'react';
-import { useSelector } from 'react-redux';
-import Layout from 'containers/common/Layout';
-import { Button, Icon } from 'components/index';;
-import { useController } from 'hooks/index';
-import { RootState } from 'state/store';
-import IWalletState, { IAccountState } from 'state/wallet/types';
-import { useAlert } from 'react-alert';
-import { browser } from 'webextension-polyfill-ts';
-import { useHistory } from 'react-router';
-
-import { getHost } from '../../../scripts/Background/helpers';
-import { ellipsis, formatURL } from '../helpers';
-
-interface IConfirmTransaction {
-  confirmTransaction: any;
-  data: any[];
-  errorMessage: string;
-  itemStringToClearData: string;
-  layoutTitle: string;
-  transactingStateItem: boolean;
-  transactionItem: any;
-}
-
-const ConfirmTransaction: FC<IConfirmTransaction> = ({
-  transactionItem,
-  itemStringToClearData,
-  confirmTransaction,
-  errorMessage,
-  layoutTitle,
-  data,
-  transactingStateItem,
-}) => {
-  const controller = useController();
-  const history = useHistory();
-  const alert = useAlert();
-
-  const { accounts, tabs }: IWalletState = useSelector(
-    (state: RootState) => state.wallet
-  );
-  const { currentSenderURL } = tabs;
-
-  const [connectedAccountId, setConnectedAccountId] = useState(-1);
-  const transactionItemData =
-    controller.wallet.account.getTransactionItem()[transactionItem];
-  const [confirmed, setConfirmed] = useState<boolean>(false);
-  const [loading, setLoading] = useState<boolean>(false);
-  const [expanded, setExpanded] = useState<boolean>(false);
-  const [loadingConfirm, setLoadingConfirm] = useState<boolean>(false);
-  const [dataToRender, setDataToRender] = useState<any[]>([]);
-  const [advancedOptions, setAdvancedOptions] = useState<any[]>([]); const [recommendedFee, setRecommendedFee] = useState(0.00001);
-  const [assetData, setAssetData] = useState<any>({});
-
-  const advancedOptionsArray = [
-    'notarydetails',
-    'notaryAddress',
-    'auxfeedetails',
-    'payoutAddress',
-    'capabilityflags',
-    'contract',
-  ];
-
-  useEffect(() => {
-    controller.wallet.account.getRecommendFee().then((response: any) => {
-      setRecommendedFee(response);
-    })
-  }, []);
-
-  useEffect(() => {
-    if (data) {
-      let newData: any = {};
-      let newAdvancedOptions: any = {};
-
-      Object.entries(data).map(([key, value]) => {
-        if (!newData[key]) {
-          newData[key] = {
-            label: key,
-            value,
-          };
-        }
-
-        if (advancedOptionsArray.includes(key) && !newAdvancedOptions[key]) {
-          newAdvancedOptions[key] = {
-            label: key,
-            value,
-          };;
-        }
-      });
-
-      setDataToRender(Object.values(newData))
-      setAdvancedOptions(Object.values(newAdvancedOptions))
-    }
-
-    setConnectedAccountId(
-      accounts.findIndex((account: IAccountState) => {
-        return account.connectedTo.filter((url: string) => {
-          return url === getHost(currentSenderURL);
-        });
-      })
-    );
-  }, [data]);
-
-  useEffect(() => {
-    dataToRender.map((data) => {
-      if (data.label === 'assetGuid' && itemStringToClearData !== 'newSPT' && itemStringToClearData !== 'mintNFT') {
-        controller.wallet.account.getDataAsset(data.value).then((response: any) => {
-          setAssetData(response);
-        })
-      }
-    })
-  }, [dataToRender]);
-
-  const handleRejectTransaction = () => {
-    history.push('/home');
-
-    browser.runtime.sendMessage({
-      type: 'WALLET_ERROR',
-      target: 'background',
-      transactionError: true,
-      invalidParams: false,
-      message: "Transaction rejected.",
-    });
-
-    browser.runtime.sendMessage({
-      type: 'CANCEL_TRANSACTION',
-      target: 'background',
-      item: itemStringToClearData || null,
-    });
-
-    browser.runtime.sendMessage({
-      type: 'CLOSE_POPUP',
-      target: 'background',
-    });
-  }
-
-  const handleClosePopup = () => {
-    browser.runtime.sendMessage({
-      type: 'CLOSE_POPUP',
-      target: 'background',
-    });
-
-    history.push('/home');
-  };
-
-  const handleCancelTransactionOnSite = () => {
-    browser.runtime.sendMessage({
-      type: 'CANCEL_TRANSACTION',
-      target: 'background',
-      item: itemStringToClearData || null,
-    });
-
-    browser.runtime.sendMessage({
-      type: 'CLOSE_POPUP',
-      target: 'background',
-    });
-
-    history.push('/home');
-  };
-
-  const handleConfirm = () => {
-    const acc = accounts.find((element) => element.id === connectedAccountId);
-    let isPending = false;
-
-    if ((acc ? acc.balance : -1) > 0) {
-      setLoadingConfirm(true);
-      setLoading(true);
-      isPending = true;
-
-      confirmTransaction()
-        .then((response: any) => {
-          isPending = false;
-
-          setConfirmed(true);
-          setLoading(false);
-          setLoadingConfirm(false);
-
-          if (response) {
-            browser.runtime.sendMessage({
-              type: 'TRANSACTION_RESPONSE',
-              target: 'background',
-              response,
-            });
-          }
-        })
-        .catch((error: any) => {
-          if (error && transactionItemData.fee > recommendedFee) {
-            alert.removeAll();
-            alert.error(`${formatURL(String(error.message), 166)} Please, reduce fees to send transaction.`);
-          }
-
-          if (error && transactionItemData < recommendedFee) {
-            alert.removeAll();
-            alert.error(errorMessage);
-          }
-
-          browser.runtime.sendMessage({
-            type: 'WALLET_ERROR',
-            target: 'background',
-            transactionError: true,
-            invalidParams: false,
-            message: errorMessage
-          });
-
-          alert.removeAll();
-          alert.error(errorMessage);
-
-          setTimeout(() => {
-            handleCancelTransactionOnSite();
-          }, 4000);
-        });
-
-      setTimeout(() => {
-        if (isPending && !confirmed) {
-          alert.removeAll();
-          alert.error(errorMessage);
-
-          setTimeout(() => {
-            handleCancelTransactionOnSite();
-          }, 4000);
-        }
-      }, 8 * 60 * 1000);
-    }
-  };
-
-  const renderData = () => {
-    return dataToRender.map(({ label, value }) => {
-      if (label) {
-        if (
-          label === 'receiver' ||
-          label === 'issuer' ||
-          label === 'newOwner' ||
-          label === 'description'
-        ) {
-          return (
-            <div key={label}>
-              <p>{label}</p>
-              <p>{ellipsis(value)}</p>
-            </div>
-          );
-        }
-
-        if (advancedOptionsArray.includes(label)) {
-          return;
-        }
-
-        if (label === "assetGuid") {
-          return;
-        }
-
-        return (
-          <div key={label}>
-            <p>{label}</p>
-            <p>{value}</p>
-          </div>
-        );
-      }
-
-      return null;
-    });
-  };
-
-  const renderOptions = () => {
-    return advancedOptions.map(({ label, value }) => {
-      if (label && value) {
-        if (label == 'contract') {
-          return (
-            <div key={label}>
-              <p>{label}</p>
-              <p>{formatURL(value)}</p>
-            </div>
-          );
-        }
-
-        if (label == 'notaryAddress' || label == 'payoutAddress') {
-          return (
-            <div key={label}>
-              <p>{label}</p>
-              <p>{ellipsis(value)}</p>
-            </div>
-          );
-        }
-
-        if (label == 'notarydetails' || label == 'auxfeedetails') {
-          return <div key={label}>{renderAdvancedDetails(value, label)}</div>;
-        }
-
-        return (
-          <div key={label}>
-            <p>{label}</p>
-            <p>{value}</p>
-          </div>
-        );
-      }
-
-      return null;
-    });
-  };
-
-  const renderAdvancedDetails = (items: any, itemName: string) => {
-    return (
-      <div>
-        {itemName == 'notarydetails' && items && items.endpoint !== '' && (
-          <div>
-            <div>
-              <p>Endpoint</p>
-              <p>{formatURL(items.endpoint)}</p>
-            </div>
-
-            <div>
-              <p>Instant transfers</p>
-              <p>{items.instanttransfers || 0}</p>
-            </div>
-
-            <div>
-              <p>HD required</p>
-              <p>{items.hdrequired ? 'Yes' : 'No'}</p>
-            </div>
-          </div>
-        )}
-
-        {itemName == 'auxfeedetails' && items && (
-          <div>
-            {items.auxfees.map((auxfee: any, index: number) => {
-              return (
-                <div key={index} >
-                  <div>
-                    <p>Bound</p>
-                    <p>{auxfee.bound}</p>
-                  </div>
-
-                  <div>
-                    <p>Percent</p>
-                    <p>{auxfee.percent}</p>
-                  </div>
-                </div>
-              );
-            }) || 0}
-          </div>
-        )}
-      </div>
-    );
-  };
-
-  return confirmed ? (
-    <Layout title="Your transaction is underway" linkTo="/remind" showLogo>
-      <div className="body-description">
-        You can follow your transaction under activity on your account screen.
-      </div>
-      <Button
-        type="button"
-        onClick={handleClosePopup}
-      >
-        Ok
-      </Button>
-    </Layout>
-  ) : (
-    <div>
-      {transactingStateItem && loading ? (
-        <Layout title="" showLogo>
-          <div >
-            <section>
-              <Icon name="loading" className="w-4 bg-brand-graydark100 text-brand-white" />
-            </section>
-          </div>
-        </Layout>
-      ) : (
-        <div>
-          {transactionItemData && data && !loading && (
-            <div>
-              <Layout title={layoutTitle} showLogo>
-                <div >
-                  <div>
-                    <section >
-                      {renderData()}
-
-                      {assetData && itemStringToClearData !== 'newSPT' && itemStringToClearData !== 'mintNFT' && (
-                        <div>
-                          <div key="symbol">
-                            <p>symbol</p>
-                            <p>{assetData && assetData.symbol ? atob(String(assetData.symbol)) : 'Not found'}</p>
-                          </div>
-                          <div key="assetGuid">
-                            <p>assetGuid</p>
-                            <p>{assetData && assetData.assetGuid ? String(assetData.assetGuid) : 'Not found'}</p>
-                          </div>
-                        </div>
-                      )}
-
-                      <div>
-                        <p>Site</p>
-                        <p>{getHost(`${currentSenderURL}`)}</p>
-                      </div>
-
-                      <div>
-                        <div
-                        >
-                          <span
-                            onClick={() => setExpanded(!expanded)}
-                          >
-                            Advanced options
-                            <Icon name="arrow-down" className="w-4 bg-brand-graydark100 text-brand-white" />
-                          </span>
-
-                          <ul >{renderOptions()}</ul>
-                        </div>
-                      </div>
-                    </section>
-
-                    <section >
-                      <div >
-                        <Button
-                          type="button"
-                          onClick={handleRejectTransaction}
-                        >
-                          Reject
-                        </Button>
-
-                        <Button
-                          type="submit"
-                          onClick={handleConfirm}
-                        >
-                          {loadingConfirm ? (
-                            <Icon name="loading" className="w-4 bg-brand-graydark100 text-brand-white" />
-                          ) : (
-                            'Confirm'
-                          )}
-                        </Button>
-                      </div>
-                    </section>
-                  </div>
-                </div>
-              </Layout>
-            </div>
-          )}
-        </div>
-      )}
-    </div>
-  );
-};
-
-export default ConfirmTransaction;
Index: extension/source/containers/auth/IssueAsset/index.tsx
===================================================================
diff --git a/extension/source/containers/auth/IssueAsset/index.tsx b/extension/source/containers/auth/IssueAsset/index.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/IssueAsset/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,2 +0,0 @@
-export { default } from './IssueAsset';
-export { default as IssueTokenConfirm } from './Confirm';
Index: extension/source/containers/auth/UpdateAsset/UpdateAsset.tsx
===================================================================
diff --git a/extension/source/containers/auth/UpdateAsset/UpdateAsset.tsx b/extension/source/containers/auth/UpdateAsset/UpdateAsset.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/UpdateAsset/UpdateAsset.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,24 +0,0 @@
-import React from 'react';
-import { useController } from 'hooks/index';
-
-import SiteTransaction from '../SiteTransaction';
-
-const UpdateAsset = () => {
-  const controller = useController();
-
-  return (
-    <div>
-      <SiteTransaction
-        callbackToSetDataFromWallet={
-          controller.wallet.account.setDataFromWalletToUpdateAsset
-        }
-        messageToSetDataFromWallet="DATA_FROM_WALLET_TO_UPDATE_TOKEN"
-        confirmRoute="/updateAsset/confirm"
-        itemStringToClearData="updateAssetItem"
-        layoutTitle="Update token"
-      />
-    </div>
-  );
-};
-
-export default UpdateAsset;
Index: extension/source/containers/auth/TransferOwnership/TransferOwnership.tsx
===================================================================
diff --git a/extension/source/containers/auth/TransferOwnership/TransferOwnership.tsx b/extension/source/containers/auth/TransferOwnership/TransferOwnership.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/TransferOwnership/TransferOwnership.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,24 +0,0 @@
-import React from 'react';
-import { useController } from 'hooks/index';
-
-import SiteTransaction from '../SiteTransaction';
-
-const TransferOwnership = () => {
-  const controller = useController();
-
-  return (
-    <div>
-      <SiteTransaction
-        callbackToSetDataFromWallet={
-          controller.wallet.account.setDataFromWalletToTransferOwnership
-        }
-        messageToSetDataFromWallet="DATA_FROM_WALLET_TO_TRANSFER_OWNERSHIP"
-        confirmRoute="/transferOwnership/confirm"
-        itemStringToClearData="transferOwnershipData"
-        layoutTitle="Transfer ownership"
-      />
-    </div>
-  );
-};
-
-export default TransferOwnership;
Index: extension/source/containers/auth/IssueNFT/IssueNFT.tsx
===================================================================
diff --git a/extension/source/containers/auth/IssueNFT/IssueNFT.tsx b/extension/source/containers/auth/IssueNFT/IssueNFT.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/IssueNFT/IssueNFT.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,24 +0,0 @@
-import React from 'react';
-import { useController } from 'hooks/index';
-
-import SiteTransaction from '../SiteTransaction';
-
-const IssueAsset = () => {
-  const controller = useController();
-
-  return (
-    <div>
-      <SiteTransaction
-        callbackToSetDataFromWallet={
-          controller.wallet.account.setDataFromWalletToMintNFT
-        }
-        messageToSetDataFromWallet="DATA_FROM_WALLET_TO_MINT_NFT"
-        confirmRoute="/issueNFT/confirm"
-        itemStringToClearData="mintNFT"
-        layoutTitle="NFT creation"
-      />
-    </div>
-  );
-};
-
-export default IssueAsset;
Index: extension/source/containers/auth/Create/index.tsx
===================================================================
diff --git a/extension/source/containers/auth/Create/index.tsx b/extension/source/containers/auth/Create/index.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/Create/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,2 +0,0 @@
-export { default } from './Create';
-export { default as CreateTokenConfirm } from './Confirm';
Index: extension/source/containers/auth/MintNFT/MintNFT.tsx
===================================================================
diff --git a/extension/source/containers/auth/MintNFT/MintNFT.tsx b/extension/source/containers/auth/MintNFT/MintNFT.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/MintNFT/MintNFT.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,24 +0,0 @@
-import React from 'react';
-import { useController } from 'hooks/index';
-
-import SiteTransaction from '../SiteTransaction';
-
-const MintNFT = () => {
-  const controller = useController();
-
-  return (
-    <div>
-      <SiteTransaction
-        callbackToSetDataFromWallet={
-          controller.wallet.account.setDataFromWalletToIssueNFT
-        }
-        messageToSetDataFromWallet="DATA_FROM_WALLET_TO_ISSUE_NFT"
-        confirmRoute="/mintNFT/confirm"
-        itemStringToClearData="issueNFTItem"
-        layoutTitle="NFT mint"
-      />
-    </div>
-  );
-};
-
-export default MintNFT;
Index: extension/source/containers/auth/SiteTransaction/SiteTransaction.tsx
===================================================================
diff --git a/extension/source/containers/auth/SiteTransaction/SiteTransaction.tsx b/extension/source/containers/auth/SiteTransaction/SiteTransaction.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/SiteTransaction/SiteTransaction.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,131 +0,0 @@
-import React, { useState, FC } from 'react';
-import Layout from 'containers/common/Layout';
-import { Button } from 'components/index';
-import { useHistory } from 'react-router-dom';
-import {
-  useController,
-  // useUtils
-} from 'hooks/index';
-import { browser } from 'webextension-polyfill-ts';
-
-interface ISiteTransaction {
-  callbackToSetDataFromWallet: any;
-  confirmRoute: string;
-  itemStringToClearData: string;
-  layoutTitle: string;
-  messageToSetDataFromWallet: string;
-}
-
-const SiteTransaction: FC<ISiteTransaction> = ({
-  callbackToSetDataFromWallet,
-  messageToSetDataFromWallet,
-  confirmRoute,
-  itemStringToClearData,
-  layoutTitle,
-}) => {
-  const controller = useController();
-  const history = useHistory();
-  // const { alert } = useUtils();
-
-  // const [loading, setLoading] = useState<boolean>(false);
-  const [fee, setFee] = useState('0');
-  const [recommend, setRecommend] = useState(0.00001);
-  // const [transacting, setTransacting] = useState(false);
-
-  const handleGetFee = async () => {
-    const recommendFee = await controller.wallet.account.getRecommendFee();
-
-    setRecommend(recommendFee);
-    setFee(String(recommendFee));
-  };
-
-  const handleMessageToSetDataFromWallet = () => {
-    callbackToSetDataFromWallet({
-      fee,
-    });
-
-    browser.runtime.sendMessage({
-      type: messageToSetDataFromWallet,
-      target: 'background',
-    });
-
-    // setTransacting(true);
-    // setLoading(true);
-
-    history.push(confirmRoute);
-  };
-
-  // const handleFeeChange = useCallback(
-  //   (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
-  //     setFee(event.target.value.replace(/[^0-9.]/g, '').replace(/(\..*?)\..*/g, '$1'));
-
-  //     if (Number(event.target.value) > 0.1) {
-  //       alert.removeAll();
-  //       alert.error(`Error: Fee too high, maximum 0.1 SYS.`, { timeout: 2000 });
-
-  //       return;
-  //     }
-  //   },
-  //   []
-  // );
-
-  const handleRejectTransaction = () => {
-    history.push('/home');
-
-    browser.runtime.sendMessage({
-      type: 'WALLET_ERROR',
-      target: 'background',
-      transactionError: true,
-      invalidParams: false,
-      message: 'Transaction rejected.',
-    });
-
-    browser.runtime.sendMessage({
-      type: 'CANCEL_TRANSACTION',
-      target: 'background',
-      item: itemStringToClearData || null,
-    });
-
-    browser.runtime.sendMessage({
-      type: 'CLOSE_POPUP',
-      target: 'background',
-    });
-  };
-
-  return (
-    <div>
-      <Layout title={layoutTitle}>
-        <form>
-          <label htmlFor="fee">Fee</label>
-
-          <section>
-            <input type="text" />
-
-            <Button type="button" onClick={handleGetFee}>
-              Recommend
-            </Button>
-          </section>
-
-          <p>
-            With current network conditions, we recommend a fee of {recommend}{' '}
-            SYS.
-          </p>
-
-          <section>
-            <div>
-              <Button type="button" onClick={handleRejectTransaction}>
-                Reject
-              </Button>
-
-              <Button type="button" onClick={handleMessageToSetDataFromWallet}>
-                Next
-              </Button>
-            </div>
-          </section>
-        </form>
-      </Layout>
-    </div>
-  );
-};
-
-export default SiteTransaction;
Index: extension/source/containers/auth/TransferOwnership/index.tsx
===================================================================
diff --git a/extension/source/containers/auth/TransferOwnership/index.tsx b/extension/source/containers/auth/TransferOwnership/index.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/TransferOwnership/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,2 +0,0 @@
-export { default } from './TransferOwnership';
-export { default as TransferOwnershipConfirm } from './Confirm';
Index: extension/source/containers/auth/Home/ActivityPanel.tsx
===================================================================
diff --git a/extension/source/containers/auth/Home/ActivityPanel.tsx b/extension/source/containers/auth/Home/ActivityPanel.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/Home/ActivityPanel.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,72 +0,0 @@
-import React, { FC } from 'react';
-
-interface IActivityPanel {
-  show: boolean;
-  classNames: any
-}
-
-const ActivityPanel: FC<IActivityPanel> = ({ show, classNames }) => {
-  return (
-    <ul className={classNames}>
-      activity panel
-
-      {show ? (
-        <ul>show activity panel</ul>
-      ) : (
-        <>
-          <span>
-            You have no transaction history.
-          </span>
-
-          {/* {!changingNetwork && (
-            <img src={`/${SyscoinIcon}`} className="w-40 max-w-40 mx-auto mt-8" alt="Syscoin" />
-          )} */}
-        </>
-      )}
-      {/* {transactions.map((tx: Transaction, idx: number) => {
-        const isConfirmed = tx.confirmations > 0;
-
-        return (
-          <Fragment key={uuid()}>
-            {isShowedGroupBar(tx, idx) && (
-              <li >
-                {formatDistanceDate(new Date(tx.blockTime * 1000).toDateString())}
-              </li>
-            )}
-            <li
-              onClick={() => {
-                setOpenBlockExplorer(true);
-                setTxidSelected(tx.txid);
-                setTxType(tx.tokenType);
-                getTransactionData(tx.txid).then((response: any) => {
-                  setTx(response);
-                })
-              }}>
-              <div>
-                {isConfirmed ? null : <Icon name="loading" className="w-4 bg-brand-gray200 text-brand-navy" />}
-              </div>
-              <div>
-                <span title="Click here to go to view transaction in sys block explorer">
-                  <span>
-                    {new Date(tx.blockTime * 1000).toLocaleTimeString(navigator.language, {
-                      hour: '2-digit',
-                      minute: '2-digit'
-                    })}
-                  </span>
-                  <small>{tx.txid}</small>
-                  <small>{isConfirmed ? "Confirmed" : "Unconfirmed"}</small>
-                  <small>{getTxType(tx)}</small>
-                </span>
-                <div>
-                  <Icon name="arrow-up" className="w-4 bg-brand-gray200 text-brand-navy" />
-                </div>
-              </div>
-            </li>
-          </Fragment>
-        );
-      })} */}
-    </ul>
-  )
-}
-
-export default ActivityPanel;
\ No newline at end of file
Index: extension/source/containers/auth/SignTransaction/SignTransaction.tsx
===================================================================
diff --git a/extension/source/containers/auth/SignTransaction/SignTransaction.tsx b/extension/source/containers/auth/SignTransaction/SignTransaction.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/SignTransaction/SignTransaction.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,216 +0,0 @@
-import React, { useState, FC } from 'react';
-import Layout from 'containers/common/Layout';
-import { Button, Icon } from 'components/index';
-import { useHistory } from 'react-router-dom';
-import { useController, useUtils, useFormat, useStore } from 'hooks/index';
-import { browser } from 'webextension-polyfill-ts';
-import { getHost } from 'scripts/Background/helpers';
-
-interface ISignTransaction {
-  item: string;
-  sendPSBT: boolean;
-  transactingStateItem: boolean;
-  warning: string;
-}
-
-const SignTransaction: FC<ISignTransaction> = ({
-  item,
-  sendPSBT,
-  transactingStateItem,
-  warning,
-}) => {
-  const controller = useController();
-  const history = useHistory();
-  const { alert } = useUtils();
-  const { ellipsis } = useFormat();
-
-  const [loading, setLoading] = useState<boolean>(false);
-  const [confirmed, setConfirmed] = useState<boolean>(false);
-  const base64 = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/;
-
-  const { currentSenderURL, accounts } = useStore();
-
-  const psbt = controller.wallet.account.getTransactionItem()[item];
-
-  const handleRejectTransaction = () => {
-    history.push('/home');
-
-    browser.runtime.sendMessage({
-      type: 'WALLET_ERROR',
-      target: 'background',
-      transactionError: true,
-      invalidParams: false,
-      message: "Transaction rejected.",
-    });
-
-    browser.runtime.sendMessage({
-      type: 'CANCEL_TRANSACTION',
-      target: 'background',
-      item: transactingStateItem ? item : null,
-    });
-
-    browser.runtime.sendMessage({
-      type: 'CLOSE_POPUP',
-      target: 'background',
-    });
-  }
-
-
-  const handleConfirmSignature = () => {
-    setLoading(true);
-
-    if (!base64.test(psbt.psbt) || typeof psbt.assets !== 'string') {
-      alert.removeAll();
-      alert.error(`PSBT must be in Base64 format and assets must be a JSON string. Please check the documentation to see the correct formats.`);
-
-      setTimeout(() => {
-        handleCancelTransactionOnSite();
-      }, 10000);
-
-      return;
-    }
-
-    controller.wallet.account
-      .confirmSignature(sendPSBT)
-      .then((response: any) => {
-        if (response) {
-          setConfirmed(true);
-          setLoading(false);
-
-          setTimeout(() => {
-            handleCancelTransactionOnSite();
-          }, 4000);
-
-          browser.runtime.sendMessage({
-            type: 'TRANSACTION_RESPONSE',
-            target: 'background',
-            response,
-          });
-        }
-      })
-      .catch((error: any) => {
-        if (error) {
-          alert.removeAll();
-          alert.error("Can't sign transaction. Try again later.");
-
-          browser.runtime.sendMessage({
-            type: 'WALLET_ERROR',
-            target: 'background',
-            transactionError: true,
-            invalidParams: false,
-            message: "Can't sign transaction. Try again later.",
-          });
-
-          setTimeout(() => {
-            handleCancelTransactionOnSite();
-          }, 4000);
-        }
-      });
-  };
-
-  const handleCancelTransactionOnSite = () => {
-    history.push('/home');
-
-    browser.runtime.sendMessage({
-      type: 'CANCEL_TRANSACTION',
-      target: 'background',
-      item: transactingStateItem ? item : null,
-    });
-
-    browser.runtime.sendMessage({
-      type: 'CLOSE_POPUP',
-      target: 'background',
-    });
-  };
-
-  const handleClosePopup = () => {
-    browser.runtime.sendMessage({
-      type: 'CLOSE_POPUP',
-      target: 'background',
-    });
-  };
-
-  const connectedAccount = accounts.find((account) => {
-    return account.connectedTo.find((url: any) => {
-      return url == getHost(currentSenderURL);
-    });
-  });
-
-  return confirmed ? (
-    <Layout title="Your transaction is underway" linkTo="/remind" showLogo>
-      <div className="body-description">
-        You can follow your transaction under activity on your account screen.
-      </div>
-      <Button
-        type="button"
-        onClick={handleClosePopup}
-      >
-        Ok
-      </Button>
-    </Layout>
-  ) : (
-    <div>
-      {transactingStateItem && loading ? (
-        <Layout title="" showLogo>
-          <div >
-            <section>
-            <Icon name="loading"  className="w-4 bg-brand-graydark100 text-brand-white"/>
-            </section>
-          </div>
-        </Layout>
-      ) : (
-        <div>
-          {transactingStateItem && psbt && !loading && (
-            <div>
-              <Layout title="Signature request" showLogo>
-                <div >
-                  <p>{getHost(currentSenderURL)}</p>
-
-                  <div >
-                    <p>{connectedAccount?.label}</p>
-                    <p>
-                      {connectedAccount?.address.main && ellipsis(connectedAccount?.address.main)}
-                    </p>
-                  </div>
-
-                  <pre>{`${JSON.stringify(
-                    controller.wallet.account.importPsbt(psbt),
-                    null,
-                    2
-                  )}`}</pre>
-
-                  <p
-                  
-                    style={{ textAlign: 'center', marginTop: '1rem' }}
-                  >
-                    { warning }
-                  </p>
-
-                  <section >
-                    <div >
-                      <Button
-                        type="button"
-                        onClick={handleRejectTransaction}
-                      >
-                        Reject
-                      </Button>
-
-                      <Button
-                        type="button"
-                        onClick={handleConfirmSignature}
-                      >
-                        {loading ? <Icon name="loading" className="w-4 bg-brand-graydark100 text-brand-white" /> : 'Sign'}
-                      </Button>
-                    </div>
-                  </section>
-                </div>
-              </Layout>
-            </div>
-          )}
-        </div>
-      )}
-    </div>
-  );
-};
-
-export default SignTransaction;
Index: extension/source/containers/auth/TransferOwnership/Confirm.tsx
===================================================================
diff --git a/extension/source/containers/auth/TransferOwnership/Confirm.tsx b/extension/source/containers/auth/TransferOwnership/Confirm.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/TransferOwnership/Confirm.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,28 +0,0 @@
-import React from 'react';
-import { useController, useStore } from 'hooks/index';
-
-import { ConfirmTransaction } from '../SiteTransaction';
-
-const TransferOwnershipConfirm = () => {
-  const controller = useController();
-  const { transferOwnershipData } =
-    controller.wallet.account.getTransactionItem();
-
-  const { transferringOwnership } = useStore();
-
-  return (
-    <div>
-      <ConfirmTransaction
-        transactionItem="transferOwnershipData"
-        itemStringToClearData="transferOwnershipData"
-        confirmTransaction={controller.wallet.account.confirmTransferOwnership}
-        errorMessage="Can't transfer ownership. Try again later."
-        layoutTitle="Confirm transfer ownership"
-        data={transferOwnershipData}
-        transactingStateItem={transferringOwnership}
-      />
-    </div>
-  );
-};
-
-export default TransferOwnershipConfirm;
Index: extension/source/containers/auth/IssueAsset/Confirm.tsx
===================================================================
diff --git a/extension/source/containers/auth/IssueAsset/Confirm.tsx b/extension/source/containers/auth/IssueAsset/Confirm.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/IssueAsset/Confirm.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,27 +0,0 @@
-import React from 'react';
-import { useController, useStore } from 'hooks/index';
-
-import { ConfirmTransaction } from '../SiteTransaction';
-
-const IssueAssetConfirm = () => {
-  const controller = useController();
-  const { mintSPT } = controller.wallet.account.getTransactionItem();
-
-  const { issuingAsset } = useStore();
-
-  return (
-    <div>
-      <ConfirmTransaction
-        transactionItem="mintSPT"
-        itemStringToClearData="mintSPT"
-        confirmTransaction={controller.wallet.account.confirmIssueSPT}
-        errorMessage="Can't issue token. Try again later."
-        layoutTitle="Confirm token issue"
-        data={mintSPT}
-        transactingStateItem={issuingAsset}
-      />
-    </div>
-  );
-};
-
-export default IssueAssetConfirm;
Index: extension/source/containers/auth/helpers.tsx
===================================================================
diff --git a/extension/source/containers/auth/helpers.tsx b/extension/source/containers/auth/helpers.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/helpers.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,54 +0,0 @@
-import format from 'date-fns/format';
-import currency from 'currency.js';
-
-export const ellipsis = (str: any, start = 7, end = 4) => {
-  if (typeof str !== 'string') {
-    return str;
-  }
-
-  return `${str.substring(0, start)}...${str.substring(
-    str.length - end,
-    str.length
-  )}`;
-};
-
-const getYesterday = () => {
-  const d = new Date();
-  d.setDate(d.getDate() - 1);
-  return d;
-};
-
-export const formatDistanceDate = (timestamp: string) => {
-  const formatStyle = 'M-d-yyyy';
-  const today = new Date();
-  const yesterday = getYesterday();
-  const formatedDate = format(new Date(timestamp), formatStyle);
-
-  if (formatedDate === format(today, formatStyle)) return 'Today';
-  if (formatedDate === format(yesterday, formatStyle)) return 'Yesterday';
-  return formatedDate;
-};
-
-export const formatNumber = (num: number, min = 4, max = 4, maxSig = 12) => {
-  return num.toLocaleString(navigator.language, {
-    minimumFractionDigits: min,
-    maximumFractionDigits: max,
-    maximumSignificantDigits: maxSig,
-  });
-};
-
-export const formatCurrency = (number: string, precision: number) => {
-  if (Number(number) < 1e-6) {
-    number = Number(number).toFixed(precision);
-  }
-
-  return currency(number, { separator: ',', symbol: '', precision }).format();
-};
-
-export const formatURL = (url: string, size = 30) => {
-  if (url.length >= size) {
-    return `${url.slice(0, size)}...`;
-  }
-
-  return url;
-};
Index: extension/source/containers/auth/ConnectWallet/ConnectedAccounts.tsx
===================================================================
diff --git a/extension/source/containers/auth/ConnectWallet/ConnectedAccounts.tsx b/extension/source/containers/auth/ConnectWallet/ConnectedAccounts.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/ConnectWallet/ConnectedAccounts.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,161 +0,0 @@
-import React, { useState } from 'react';
-import { browser } from 'webextension-polyfill-ts';
-import { Button } from 'components/index';;
-import Header from 'containers/common/Header';
-import { ellipsis } from 'containers/auth/helpers';
-import { useSelector } from 'react-redux';
-import { RootState } from 'state/store';
-import IWalletState from 'state/wallet/types';
-import { useAlert } from 'react-alert';
-import { useController } from 'hooks/index';
-
-import { getHost } from '../../../scripts/Background/helpers';
-
-const ConnectedAccounts = () => {
-  const controller = useController();
-  const alert = useAlert();
-
-  const { accounts, tabs, activeAccountId }: IWalletState =
-    useSelector((state: RootState) => state.wallet);
-  const [changeAccountIsOpen, setChangeAccountIsOpen] =
-    useState<boolean>(false);
-  const [accountId, setAccountId] = useState<number>(-1);
-  const { currentSenderURL } = tabs;
-
-  const connectedAccount = accounts.filter((account) => {
-    return account.connectedTo.find((url: any) => {
-      return url == getHost(currentSenderURL);
-    });
-  });
-
-  const handleChangeAccount = (id: number) => {
-    if (id === connectedAccount[0].id) {
-      return;
-    }
-
-    setAccountId(id);
-  };
-
-  const handleDisconnect = () => {
-    browser.runtime.sendMessage({
-      type: 'CLOSE_POPUP',
-      target: 'background',
-    });
-  };
-
-  const handleConfirm = () => {
-    try {
-      browser.runtime.sendMessage({
-        type: 'CHANGE_CONNECTED_ACCOUNT',
-        target: 'background',
-        id: accountId,
-        url: currentSenderURL,
-      });
-
-      browser.runtime.sendMessage({
-        type: 'CLOSE_POPUP',
-        target: 'background',
-      });
-
-      controller.wallet.account.updateTokensState().then(() => {
-        console.log('tokens state updated after change connected account');
-      });
-    } catch (error) {
-      alert.removeAll();
-      alert.error('Error changing account. Try again.');
-    }
-  };
-
-  return (
-    <div >
-      <Header />
-
-      {changeAccountIsOpen ? (
-        <div >
-          <p >Choose your account</p>
-
-          <ul >
-            {accounts.map((account) => {
-              return (
-                <li
-                  key={account.id}
-                  onClick={() => handleChangeAccount(account.id)}
-                > 
-                  <div >
-                    <p>{account.label}</p>
-                    <small>{ellipsis(account.address.main)}</small>
-                  </div>
-                  {account.id === activeAccountId && <small>(active)</small>}
-                  {account.id === accountId && account.id !== connectedAccount[0].id && (
-                    // <img src={checkGreen} alt="check" />
-                    <p>check</p>
-                  )}
-                </li>
-              );
-            })}
-          </ul>
-
-          <div >
-            <Button
-              type="button"
-              onClick={() => setChangeAccountIsOpen(false)}
-            >
-              Cancel
-            </Button>
-            <Button
-              type="button"
-              onClick={() => handleConfirm()}
-            >
-              Confirm
-            </Button>
-          </div>
-        </div>
-      ) : (
-        <div >
-          <div>
-            <p>
-              This account is connected to
-              <br />
-              {getHost(currentSenderURL)}
-            </p>
-            {connectedAccount[0].isTrezorWallet ? (
-              <small>
-                To change your connected Trezor account, you need to disconnect and connect the account you want.
-              </small>
-            ) : (
-              <small>
-                To change your connected account you need to have more than one
-                account.
-              </small>
-            )}
-          </div>
-
-          <div >
-            <div>
-              <p>{connectedAccount[0].label}</p>
-              <small>{ellipsis(connectedAccount[0].address.main)}</small>
-            </div>
-          </div>
-
-          <div >
-            <Button
-              type="button"
-              onClick={handleDisconnect}
-            >
-              Close
-            </Button>
-
-            <Button
-              type="button"
-              onClick={() => setChangeAccountIsOpen(!changeAccountIsOpen)}
-            >
-              Change
-            </Button>
-          </div>
-        </div>
-      )}
-    </div>
-  );
-};
-
-export default ConnectedAccounts;
Index: extension/source/containers/auth/ConnectWallet/ConnectWallet.tsx
===================================================================
diff --git a/extension/source/containers/auth/ConnectWallet/ConnectWallet.tsx b/extension/source/containers/auth/ConnectWallet/ConnectWallet.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/ConnectWallet/ConnectWallet.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,196 +0,0 @@
-import React, { useState } from 'react';
-import { browser } from 'webextension-polyfill-ts';
-import Header from 'containers/common/Header';
-import { Button, Icon } from 'components/index';
-import { ellipsis } from 'containers/auth/helpers';
-import { useSelector } from 'react-redux';
-import { RootState } from 'state/store';
-import IWalletState from 'state/wallet/types';
-import { useHistory } from 'react-router';
-import { getHost } from 'scripts/Background/helpers';
-import { useAlert } from 'react-alert';
-
-const ConnectWallet = () => {
-  const history = useHistory();
-  const alert = useAlert()
-
-  const { accounts, activeAccountId, tabs }: IWalletState =
-    useSelector((state: RootState) => state.wallet);
-  const [accountId, setAccountId] = useState<number>(-1);
-  const { currentSenderURL } = tabs;
-  const [continueConnection, setContinueConnection] = useState(false);
-  const connectedAccount = accounts.find((account) => {
-    return account.id === accountId;
-  });
-
-  const handleSelectAccount = (id: number) => {
-    setAccountId(id);
-  };
-
-  const handleConfirmConnection = () => {
-    try {
-      browser.runtime.sendMessage({
-        type: 'SELECT_ACCOUNT',
-        target: 'background',
-        id: accountId,
-      });
-
-      browser.runtime
-        .sendMessage({
-          type: 'CONFIRM_CONNECTION',
-          target: 'background',
-        })
-        .then(() => {
-          history.push('/home');
-
-          browser.runtime.sendMessage({
-            type: 'CLOSE_POPUP',
-            target: 'background',
-          });
-
-          return true;
-        });
-
-      return true;
-    } catch (error) {
-      alert.removeAll();
-      alert.error('Sorry, an internal error has occurred.');
-
-      return false;
-    }
-  };
-
-  const handleCancelConnection = () => {
-    history.push('/home');
-
-    if (accountId > -1) {
-      browser.runtime
-        .sendMessage({
-          type: 'RESET_CONNECTION_INFO',
-          target: 'background',
-          id: accountId,
-          url: currentSenderURL,
-        })
-        .then(() => {
-          browser.runtime
-            .sendMessage({
-              type: 'CLOSE_POPUP',
-              target: 'background',
-            });
-        });
-
-      return;
-    }
-
-    browser.runtime.sendMessage({
-      type: 'CLOSE_POPUP',
-      target: 'background',
-    });
-  };
-
-  return (
-    <div>
-      {continueConnection ? (
-        <div >
-          <Header />
-
-          <h1>
-            Connect with <b>Pali Wallet</b>
-          </h1>
-
-          <p>2/2</p>
-
-          <div>
-            <p>Site: {currentSenderURL}</p>
-            {connectedAccount && (
-              <div>
-                <p>Connect to account {connectedAccount?.label}</p>
-                <p>{ellipsis(connectedAccount?.address.main)}</p>
-              </div>
-            )}
-          </div>
-
-          <small>
-            Only connect with sites you trust. <a href="#">Learn more.</a>
-          </small>
-
-          <div>
-            <Button
-              type="button"
-              onClick={handleCancelConnection}
-            >
-              Cancel
-            </Button>
-
-            <Button
-              type="button"
-              onClick={handleConfirmConnection}
-            >
-              Confirm
-            </Button>
-          </div>
-        </div>
-      ) : (
-        <div>
-          <Header />
-
-          <h1>
-            Connect with <b>Pali Wallet</b>
-          </h1>
-
-          <p>1/2</p>
-          <p>{getHost(`${currentSenderURL}`)}</p>
-          <p>Choose account</p>
-
-          {accounts.length > 0 ? (
-            <ul>
-              {accounts.map((acc: any) => (
-                <li
-                  key={acc.id}
-                  onClick={() => handleSelectAccount(acc.id)}
-                >
-                  <div>
-                    <p>
-                      {acc.label}{' '}
-                      {acc.id === activeAccountId && <small>(active)</small>}
-                    </p>
-                    <small>{ellipsis(acc.address.main)}</small>
-                  </div>
-
-                  {acc.id === accountId && <p>check</p>}
-                </li>
-              ))}
-            </ul>
-          ) : (
-            <div>
-              <Icon name="loading" className="w-4 bg-brand-gray200 text-brand-navy" />
-            </div>
-          )}
-
-          <small>
-            Only connect with sites you trust. <a href="#">Learn more.</a>
-          </small>
-
-          <div>
-            <Button
-              type="button"
-              onClick={handleCancelConnection}
-            >
-              Cancel
-            </Button>
-
-            <Button
-              type="button"
-              onClick={() => setContinueConnection(true)}
-            >
-              Next
-            </Button>
-          </div>
-        </div>
-      )}
-    </div>
-
-  );
-};
-
-export default ConnectWallet;
Index: extension/source/containers/auth/SignAndSend/index.tsx
===================================================================
diff --git a/extension/source/containers/auth/SignAndSend/index.tsx b/extension/source/containers/auth/SignAndSend/index.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/SignAndSend/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,1 +0,0 @@
-export { default } from './SignAndSend';
Index: extension/source/containers/auth/Settings/views/Layout/index.tsx
===================================================================
diff --git a/extension/source/containers/auth/Settings/views/Layout/index.tsx b/extension/source/containers/auth/Settings/views/Layout/index.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/Settings/views/Layout/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,26 +0,0 @@
-import React, { FC } from 'react';
-import Header from 'containers/common/Header';
-
-interface IViewLayout {
-  title: string;
-  children: any;
-}
-
-const ViewLayout: FC<IViewLayout> = ({
-  title,
-  children
-}) => {
-  return (
-    <div>
-      <Header normalHeader />
-
-      <div className="flex justify-center items-center bg-brand-gold py-4 px-2">
-        {title}
-      </div>
-
-      {children}
-    </div>
-  );
-};
-
-export default ViewLayout;
Index: extension/source/containers/auth/UpdateAsset/index.tsx
===================================================================
diff --git a/extension/source/containers/auth/UpdateAsset/index.tsx b/extension/source/containers/auth/UpdateAsset/index.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/UpdateAsset/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,2 +0,0 @@
-export { default } from './UpdateAsset';
-export { default as UpdateConfirm } from './Confirm';
Index: extension/source/containers/auth/IssueNFT/index.tsx
===================================================================
diff --git a/extension/source/containers/auth/IssueNFT/index.tsx b/extension/source/containers/auth/IssueNFT/index.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/IssueNFT/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,2 +0,0 @@
-export { default } from './IssueNFT';
-export { default as CreateAndIssueNFTConfirm } from './Confirm';
Index: extension/source/containers/auth/MintNFT/Confirm.tsx
===================================================================
diff --git a/extension/source/containers/auth/MintNFT/Confirm.tsx b/extension/source/containers/auth/MintNFT/Confirm.tsx
deleted file mode 100644
--- a/extension/source/containers/auth/MintNFT/Confirm.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ /dev/null	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
@@ -1,27 +0,0 @@
-import React from 'react';
-import { useController, useStore } from 'hooks/index';
-
-import { ConfirmTransaction } from '../SiteTransaction';
-
-const MintNFTConfirm = () => {
-  const controller = useController();
-  const { mintNFT } = useStore();
-
-  const { issueNFTItem } = controller.wallet.account.getTransactionItem();
-
-  return (
-    <div>
-      <ConfirmTransaction
-        transactionItem="issueNFTItem"
-        itemStringToClearData="issueNFTItem"
-        confirmTransaction={controller.wallet.account.confirmIssueNFTTx}
-        errorMessage="Can't issue NFT. Try again later."
-        layoutTitle="Confirm NFT mint"
-        data={issueNFTItem}
-        transactingStateItem={mintNFT}
-      />
-    </div>
-  );
-};
-
-export default MintNFTConfirm;
Index: extension/source/containers/auth/Settings/Settings.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { FC } from 'react';\r\nimport * as Views from './views';\r\n\r\ninterface ISettings {\r\n  onClose?: () => void;\r\n  open: boolean;\r\n  accountSettings?: boolean;\r\n  generalSettings?: boolean;\r\n}\r\n\r\nconst Settings: FC<ISettings> = ({\r\n  onClose,\r\n  open,\r\n  generalSettings = true,\r\n  accountSettings = false,\r\n}) => {\r\n  return (\r\n    <div>\r\n      {open && (\r\n        <div className=\"transition-all duration-300 ease-in-out\">\r\n          <div\r\n            onClick={onClose}\r\n            className=\"transition-all duration-300 ease-in-out fixed -inset-0 w-full z-0 bg-brand-darktransparent\"\r\n          ></div>\r\n\r\n\r\n          <div\r\n            className={generalSettings ?\r\n              \"transition-all duration-300 ease-in-out fixed z-10 flex flex-col bg-brand-royalBlue max-w-70 top-3rem right-4 p-6 rounded-3xl\" : \"transition-all duration-300 ease-in-out fixed z-10 flex flex-col bg-brand-deepPink max-w-70 top-3rem right-4 p-6 rounded-3xl\"\r\n            }\r\n          >\r\n            <h2 className=\"pb-4 text-brand-white border-b border-dashed border-brand-graylight w-full text-center mb-4\">{generalSettings ? 'GENERAL SETTINGS' : 'ACCOUNT SETTINGS'}</h2>\r\n\r\n            <Views.MainView\r\n              accountSettings={accountSettings}\r\n              generalSettings={generalSettings}\r\n              onClose={onClose}\r\n            />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Settings/Settings.tsx b/extension/source/containers/auth/Settings/Settings.tsx
--- a/extension/source/containers/auth/Settings/Settings.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Settings/Settings.tsx	(date 1637064532361)
@@ -8,7 +8,7 @@
   generalSettings?: boolean;
 }
 
-const Settings: FC<ISettings> = ({
+export const Settings: FC<ISettings> = ({
   onClose,
   open,
   generalSettings = true,
@@ -42,5 +42,3 @@
     </div>
   );
 };
-
-export default Settings;
Index: extension/source/containers/auth/Receive/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export { default } from './Receive';\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Receive/index.tsx b/extension/source/containers/auth/Receive/index.tsx
--- a/extension/source/containers/auth/Receive/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Receive/index.tsx	(date 1637064532355)
@@ -1,1 +1,1 @@
-export { default } from './Receive';
+export { Receive } from './Receive';
Index: extension/source/containers/auth/Receive/Receive.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect, useState } from 'react';\r\nimport { useController, useUtils, useStore } from 'hooks/index';\r\nimport QRCode from 'qrcode.react';\r\nimport { IconButton, Icon } from 'components/index';\r\nimport Header from 'containers/common/Header';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst WalletReceive = () => {\r\n  const { useCopyClipboard } = useUtils();\r\n  const [isCopied, copyText] = useCopyClipboard();\r\n  const controller = useController();\r\n  const [loaded, setLoaded] = useState<boolean>(false);\r\n  const { accounts, activeAccountId } = useStore();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const getNewAddress = async () => {\r\n      if (await controller.wallet.getNewAddress()) {\r\n        setLoaded(true);\r\n      }\r\n    }\r\n\r\n    getNewAddress();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"bg-brand-gray\">\r\n      <Header normalHeader />\r\n      <IconButton\r\n        type=\"primary\"\r\n        shape=\"circle\"\r\n        onClick={() => history.push('/home')}\r\n      >\r\n        <Icon name=\"arrow-left\" className=\"w-4 bg-brand-graydark100 text-brand-white\" />\r\n      </IconButton>\r\n      <section>Receive SYS</section>\r\n\r\n      <section>\r\n        {loaded ? (\r\n          <div>\r\n            <div>\r\n              <QRCode\r\n                value={accounts.find(element => element.id === activeAccountId)!.address.main}\r\n                bgColor=\"#fff\"\r\n                fgColor=\"#000\"\r\n                size={180}\r\n              />\r\n              {accounts.find(element => element.id === activeAccountId)!.address.main}\r\n            </div>\r\n            <div>\r\n              <IconButton\r\n                type=\"primary\"\r\n                shape=\"circle\"\r\n                onClick={() =>\r\n                  copyText(accounts.find(element => element.id === activeAccountId)!.address.main)\r\n                }\r\n              >\r\n                <Icon name=\"copy\" className=\"w-4 bg-brand-graydark100 text-brand-white\" />\r\n              </IconButton>\r\n              <span>\r\n                {isCopied ? 'Copied address' : 'Copy'}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        ) : <Icon name=\"loading\" className=\"w-4 bg-brand-graydark100 text-brand-white\" />}\r\n\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WalletReceive;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Receive/Receive.tsx b/extension/source/containers/auth/Receive/Receive.tsx
--- a/extension/source/containers/auth/Receive/Receive.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Receive/Receive.tsx	(date 1637064532354)
@@ -5,7 +5,7 @@
 import Header from 'containers/common/Header';
 import { useHistory } from 'react-router-dom';
 
-const WalletReceive = () => {
+export const Receive = () => {
   const { useCopyClipboard } = useUtils();
   const [isCopied, copyText] = useCopyClipboard();
   const controller = useController();
@@ -68,5 +68,3 @@
     </div>
   );
 };
-
-export default WalletReceive;
Index: extension/source/state/wallet/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { SYS_NETWORK } from 'constants/index';\r\n\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { Transaction } from '../../scripts/types';\r\nimport { getHost } from '../../scripts/Background/helpers';\r\n\r\nimport IWalletState, {\r\n  IAccountUpdateState,\r\n  IAccountState,\r\n  IAccountUpdateAddress,\r\n  IAccountUpdateXpub,\r\n  IWalletTokenState,\r\n} from './types';\r\n\r\nconst initialState: IWalletState = {\r\n  status: 0,\r\n  accounts: [],\r\n  activeAccountId: 0,\r\n  activeNetwork: SYS_NETWORK.main.id,\r\n  encriptedMnemonic: null,\r\n  confirmingTransaction: false,\r\n  creatingAsset: false,\r\n  issuingAsset: false,\r\n  issuingNFT: false,\r\n  mintNFT: false,\r\n  updatingAsset: false,\r\n  transferringOwnership: false,\r\n  changingNetwork: false,\r\n  signingTransaction: false,\r\n  signingPSBT: false,\r\n  walletTokens: [],\r\n  tabs: {\r\n    currentSenderURL: '',\r\n    currentURL: '',\r\n    canConnect: false,\r\n    connections: [],\r\n  },\r\n  timer: 5,\r\n};\r\n\r\nconst WalletState = createSlice({\r\n  name: 'wallet',\r\n  initialState,\r\n  reducers: {\r\n    setTimer(state: IWalletState, action: PayloadAction<number>) {\r\n      return {\r\n        ...state,\r\n        timer: action.payload,\r\n      };\r\n    },\r\n    updateAllTokens(\r\n      state: IWalletState,\r\n      action: PayloadAction<IWalletTokenState>\r\n    ) {\r\n      const { accountId, accountXpub, tokens, holdings, mintedTokens } =\r\n        action.payload;\r\n\r\n      const sameAccountIndexAndDifferentXpub: number =\r\n        state.walletTokens.findIndex((accountTokens: any) => {\r\n          return (\r\n            accountTokens.accountId === accountId &&\r\n            accountTokens.accountXpub !== accountXpub\r\n          );\r\n        });\r\n\r\n      if (sameAccountIndexAndDifferentXpub > -1) {\r\n        state.walletTokens[sameAccountIndexAndDifferentXpub] = action.payload;\r\n\r\n        return;\r\n      }\r\n\r\n      const index: number = state.walletTokens.findIndex(\r\n        (accountTokens: any) => {\r\n          return (\r\n            accountTokens.accountId === accountId &&\r\n            accountTokens.accountXpub === accountXpub\r\n          );\r\n        }\r\n      );\r\n\r\n      const walletTokens = state.walletTokens[index];\r\n\r\n      if (index > -1) {\r\n        if (walletTokens.tokens !== tokens) {\r\n          walletTokens.tokens = tokens;\r\n        }\r\n\r\n        if (walletTokens.holdings !== holdings) {\r\n          walletTokens.holdings = holdings;\r\n        }\r\n\r\n        if (walletTokens.mintedTokens !== mintedTokens) {\r\n          walletTokens.mintedTokens = mintedTokens;\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if (\r\n        state.walletTokens.indexOf({\r\n          ...walletTokens,\r\n          holdings,\r\n          tokens,\r\n          mintedTokens,\r\n        }) > -1\r\n      ) {\r\n        return;\r\n      }\r\n\r\n      state.walletTokens.push(action.payload);\r\n    },\r\n    clearAllTransactions(state: IWalletState) {\r\n      return {\r\n        ...state,\r\n        mintNFT: false,\r\n        signingPSBT: false,\r\n        confirmingTransaction: false,\r\n        creatingAsset: false,\r\n        issuingAsset: false,\r\n        issuingNFT: false,\r\n        updatingAsset: false,\r\n        transferringOwnership: false,\r\n        signingTransaction: false,\r\n      };\r\n    },\r\n    updateSwitchNetwork(state: IWalletState, action: PayloadAction<boolean>) {\r\n      return {\r\n        ...state,\r\n        changingNetwork: action.payload,\r\n      };\r\n    },\r\n    updateCanConfirmTransaction(\r\n      state: IWalletState,\r\n      action: PayloadAction<boolean>\r\n    ) {\r\n      return {\r\n        ...state,\r\n        confirmingTransaction: action.payload,\r\n      };\r\n    },\r\n    signTransactionState(state: IWalletState, action: PayloadAction<boolean>) {\r\n      return {\r\n        ...state,\r\n        signingTransaction: action.payload,\r\n      };\r\n    },\r\n    signPSBTState(state: IWalletState, action: PayloadAction<boolean>) {\r\n      return {\r\n        ...state,\r\n        signingPSBT: action.payload,\r\n      };\r\n    },\r\n    createAsset(state: IWalletState, action: PayloadAction<boolean>) {\r\n      return {\r\n        ...state,\r\n        creatingAsset: action.payload,\r\n      };\r\n    },\r\n    issueAsset(state: IWalletState, action: PayloadAction<boolean>) {\r\n      return {\r\n        ...state,\r\n        issuingAsset: action.payload,\r\n      };\r\n    },\r\n    setIssueNFT(state: IWalletState, action: PayloadAction<boolean>) {\r\n      return {\r\n        ...state,\r\n        mintNFT: action.payload,\r\n      };\r\n    },\r\n    issueNFT(state: IWalletState, action: PayloadAction<boolean>) {\r\n      return {\r\n        ...state,\r\n        issuingNFT: action.payload,\r\n      };\r\n    },\r\n    setUpdateAsset(state: IWalletState, action: PayloadAction<boolean>) {\r\n      return {\r\n        ...state,\r\n        updatingAsset: action.payload,\r\n      };\r\n    },\r\n    setTransferOwnership(state: IWalletState, action: PayloadAction<boolean>) {\r\n      return {\r\n        ...state,\r\n        transferringOwnership: action.payload,\r\n      };\r\n    },\r\n    removeConnection(state: IWalletState, action: PayloadAction<any>) {\r\n      const connectionIndex: number = state.tabs.connections.findIndex(\r\n        (connection: any) => connection.url === getHost(action.payload.url)\r\n      );\r\n\r\n      const account = state.accounts.find(\r\n        (element: IAccountState) => element.id === action.payload.accountId\r\n      );\r\n\r\n      if (connectionIndex === -1) {\r\n        return;\r\n      }\r\n\r\n      state.tabs.connections.splice(connectionIndex, 1);\r\n\r\n      account?.connectedTo.splice(\r\n        account?.connectedTo.indexOf(getHost(action.payload.url)),\r\n        1\r\n      );\r\n    },\r\n    updateConnectionsArray(\r\n      state: IWalletState,\r\n      action: PayloadAction<{ accountId: number, url: string }>\r\n    ) {\r\n      const { accounts, tabs } = state;\r\n      const { accountId, url } = action.payload;\r\n\r\n      const accountIndex = tabs.connections.findIndex((connection: any) => {\r\n        return connection.accountId === accountId; \r\n      });\r\n\r\n      const currentAccountIndex = accounts.findIndex((account: IAccountState) => {\r\n        return account.id === accountId;\r\n      })\r\n\r\n      const urlIndex = tabs.connections.findIndex((connection: any) => {\r\n        return connection.url === getHost(url);\r\n      });\r\n\r\n      if (tabs.connections[urlIndex]) {\r\n        const accountIdConnected = accounts.findIndex((account: IAccountState) => {\r\n          return account.id === tabs.connections[urlIndex].accountId;\r\n        });\r\n\r\n        if (accountIdConnected > -1) {\r\n          const connectedToIndex = accounts[accountIdConnected].connectedTo.findIndex((connectedURL: string) => {\r\n            return connectedURL === getHost(url);\r\n          });\r\n  \r\n          if (connectedToIndex > -1) {\r\n            accounts[accountIdConnected].connectedTo.splice(connectedToIndex, 1);\r\n\r\n            tabs.connections[urlIndex] = {\r\n              ...tabs.connections[urlIndex],\r\n              accountId,\r\n            }\r\n\r\n            accounts[currentAccountIndex].connectedTo.push(getHost(url));\r\n          }\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if (tabs.connections[accountIndex]) {\r\n        if (tabs.connections[accountIndex].url === getHost(url)) {\r\n          return;\r\n        }\r\n\r\n        tabs.connections.push({\r\n          accountId,\r\n          url: getHost(url)\r\n        });\r\n\r\n        accounts[currentAccountIndex].connectedTo.push(getHost(url));\r\n\r\n        return;\r\n      }\r\n\r\n      tabs.connections.push({\r\n        accountId,\r\n        url: getHost(url),\r\n      });\r\n\r\n      accounts[currentAccountIndex].connectedTo.push(getHost(url));\r\n    },\r\n    updateCanConnect(state: IWalletState, action: PayloadAction<boolean>) {\r\n      return {\r\n        ...state,\r\n        tabs: {\r\n          ...state.tabs,\r\n          canConnect: action.payload\r\n        },\r\n      };\r\n    },\r\n    updateCurrentURL(state: IWalletState, action: PayloadAction<string>) {\r\n      return {\r\n        ...state,\r\n        tabs: {\r\n          ...state.tabs,\r\n          currentURL: action.payload\r\n        }\r\n      };\r\n    },\r\n    setSenderURL(state: IWalletState, action: PayloadAction<string>) {\r\n      return {\r\n        ...state,\r\n        tabs: {\r\n          ...state.tabs,\r\n          currentSenderURL: action.payload\r\n        },\r\n      };\r\n    },\r\n    setEncriptedMnemonic(\r\n      state: IWalletState,\r\n      action: PayloadAction<CryptoJS.lib.CipherParams>\r\n    ) {\r\n      state.encriptedMnemonic = action.payload.toString();\r\n    },\r\n    updateStatus(state: IWalletState) {\r\n      state.status = Date.now();\r\n    },\r\n    createAccount(state: IWalletState, action: PayloadAction<IAccountState>) {\r\n      return {\r\n        ...state,\r\n        accounts: [...state.accounts, action.payload],\r\n      };\r\n    },\r\n    removeAccount(state: IWalletState, action: PayloadAction<number>) {\r\n      if (state.accounts.length <= 1) {\r\n        return;\r\n      }\r\n\r\n      const accountIndex = state.accounts.findIndex(\r\n        (element: IAccountState) => element.id === action.payload\r\n      );\r\n\r\n      if (state.activeAccountId === action.payload) {\r\n        state.activeAccountId = state.accounts[0].id;\r\n      }\r\n\r\n      const infoIndex = state.walletTokens.findIndex(\r\n        (element: any) => element.accountId === action.payload\r\n      );\r\n\r\n      const connectionIndex = state.tabs.connections.findIndex(\r\n        (element: any) => element.accountId === action.payload\r\n      );\r\n\r\n      state.walletTokens.splice(infoIndex, 1);\r\n      state.tabs.connections.splice(connectionIndex, 1);\r\n      state.accounts.splice(accountIndex, 1);\r\n    },\r\n\r\n    removeAccounts(state: IWalletState) {\r\n      state.accounts = [];\r\n      state.activeAccountId = 0;\r\n    },\r\n    updateAccount(\r\n      state: IWalletState,\r\n      action: PayloadAction<IAccountUpdateState>\r\n    ) {\r\n      const indexOf = state.accounts.findIndex(\r\n        (element: IAccountState) => element.id === action.payload.id\r\n      );\r\n      state.accounts[indexOf] = {\r\n        ...state.accounts[indexOf],\r\n        ...action.payload,\r\n      };\r\n    },\r\n    updateAccountAddress(\r\n      state: IWalletState,\r\n      action: PayloadAction<IAccountUpdateAddress>\r\n    ) {\r\n      const indexOf = state.accounts.findIndex(\r\n        (element: IAccountState) => element.id === action.payload.id\r\n      );\r\n\r\n      state.accounts[indexOf] = {\r\n        ...state.accounts[indexOf],\r\n        ...action.payload,\r\n      };\r\n    },\r\n    updateAccountXpub(\r\n      state: IWalletState,\r\n      action: PayloadAction<IAccountUpdateXpub>\r\n    ) {\r\n      state.accounts[action.payload.id] = {\r\n        ...state.accounts[action.payload.id],\r\n        ...action.payload,\r\n      };\r\n    },\r\n    deleteWallet(state: IWalletState) {\r\n      state.accounts = [];\r\n      state.activeAccountId = 0;\r\n      state.encriptedMnemonic = null;\r\n      state.activeNetwork = SYS_NETWORK.main.id;\r\n      state.status = 0;\r\n      state.tabs = {\r\n        currentSenderURL: '',\r\n        currentURL: '',\r\n        canConnect: false,\r\n        connections: []\r\n      };\r\n      state.confirmingTransaction = false;\r\n      state.creatingAsset = false;\r\n      state.signingPSBT = false;\r\n      state.issuingAsset = false;\r\n      state.issuingNFT = false;\r\n      state.updatingAsset = false;\r\n      state.transferringOwnership = false;\r\n      state.changingNetwork = false;\r\n      state.signingTransaction = false;\r\n      state.walletTokens = [];\r\n    },\r\n    changeAccountActiveId(state: IWalletState, action: PayloadAction<number>) {\r\n      state.activeAccountId = action.payload;\r\n    },\r\n    changeActiveNetwork(state: IWalletState, action: PayloadAction<string>) {\r\n      state.activeNetwork = action.payload;\r\n    },\r\n    updateTransactions(\r\n      state: IWalletState,\r\n      action: PayloadAction<{ id: number, txs: Transaction[] }>\r\n    ) {\r\n      const indexOf = state.accounts.findIndex(\r\n        (element: IAccountState) => element.id === action.payload.id\r\n      );\r\n\r\n      state.accounts[indexOf].transactions = action.payload.txs;\r\n    },\r\n    updateLabel(\r\n      state: IWalletState,\r\n      action: PayloadAction<{ id: number, label: string }>\r\n    ) {\r\n      const indexOf = state.accounts.findIndex(\r\n        (element: IAccountState) => element.id === action.payload.id\r\n      );\r\n\r\n      state.accounts[indexOf].label = action.payload.label;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  updateStatus,\r\n  createAccount,\r\n  removeAccount,\r\n  removeAccounts,\r\n  deleteWallet,\r\n  changeAccountActiveId,\r\n  changeActiveNetwork,\r\n  updateAccount,\r\n  updateTransactions,\r\n  updateLabel,\r\n  setEncriptedMnemonic,\r\n  updateAccountAddress,\r\n  updateAccountXpub,\r\n  setSenderURL,\r\n  updateCurrentURL,\r\n  updateCanConnect,\r\n  updateConnectionsArray,\r\n  removeConnection,\r\n  updateCanConfirmTransaction,\r\n  createAsset,\r\n  issueAsset,\r\n  issueNFT,\r\n  setUpdateAsset,\r\n  setTransferOwnership,\r\n  updateSwitchNetwork,\r\n  clearAllTransactions,\r\n  signTransactionState,\r\n  updateAllTokens,\r\n  signPSBTState,\r\n  setIssueNFT,\r\n  setTimer,\r\n} = WalletState.actions;\r\n\r\nexport default WalletState.reducer;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/state/wallet/index.ts b/extension/source/state/wallet/index.ts
--- a/extension/source/state/wallet/index.ts	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/state/wallet/index.ts	(date 1637064532450)
@@ -1,9 +1,7 @@
 import { SYS_NETWORK } from 'constants/index';
-
 import { createSlice, PayloadAction } from '@reduxjs/toolkit';
-
 import { Transaction } from '../../scripts/types';
-import { getHost } from '../../scripts/Background/helpers';
+// import { useUtils } from 'hooks/index';
 
 import IWalletState, {
   IAccountUpdateState,
@@ -13,6 +11,15 @@
   IWalletTokenState,
 } from './types';
 
+// const { getHost } = useUtils();
+const getHost = (url: string) => {
+  if (typeof url === 'string' && url !== '') {
+    return new URL(url).host;
+  }
+
+  return url;
+};
+
 const initialState: IWalletState = {
   status: 0,
   accounts: [],
Index: extension/source/containers/auth/Start/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export { default } from './Start';\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Start/index.tsx b/extension/source/containers/auth/Start/index.tsx
--- a/extension/source/containers/auth/Start/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Start/index.tsx	(date 1637064532379)
@@ -1,1 +1,1 @@
-export { default } from './Start';
+export { Start } from './Start';
Index: extension/source/containers/auth/Start/Start.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\r\nimport { Button, Link } from 'components/index';\r\nimport { useController } from 'hooks/index';\r\nimport LogoImage from 'assets/images/logo-s.svg';\r\nimport { Form, Input } from 'antd';\r\n\r\nconst Starter = () => {\r\n  const controller = useController();\r\n\r\n  const onSubmit = (data: any) => {\r\n    controller.wallet.unLock(data.password);\r\n  };\r\n  \r\n  return (\r\n    <div className=\"mt-16 flex justify-center items-center flex-col min-w-full p-2\">\r\n      <p className=\" text-brand-deepPink100 text-center text-lg  font-normal mb-2 tracking-wider\">WELCOME TO</p>\r\n\r\n      <h1 className=\" text-brand-royalBlue font-bold text-center text-4xl m-0 font-sans leading-4 tracking-wide\"\r\n      >Pali Wallet</h1>\r\n\r\n      <img src={LogoImage} className=\"w-52 my-8\" alt=\"syscoin\" />\r\n\r\n      <Form\r\n        className=\"flex justify-center items-center flex-col gap-8 text-center\"\r\n        name=\"basic\"\r\n        labelCol={{ span: 8 }}\r\n        wrapperCol={{ span: 16 }}\r\n        initialValues={{ remember: true }}\r\n        onFinish={onSubmit}\r\n        autoComplete=\"off\"\r\n      >\r\n        <Form.Item\r\n          name=\"password\"\r\n          hasFeedback\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: ''\r\n            },\r\n            ({}) => ({\r\n              validator(_, value) {\r\n                console.log('value pass',controller.wallet.unLock(value))\r\n                if (controller.wallet.unLock(value)) {\r\n                  return Promise.resolve();\r\n                }\r\n\r\n                return Promise.reject('');\r\n              },\r\n            }),\r\n          ]}\r\n        >\r\n          <Input.Password placeholder=\"Enter your password\" />\r\n        </Form.Item>\r\n        <Button\r\n          type=\"submit\"\r\n        >\r\n          Unlock\r\n        </Button>\r\n      </Form>\r\n      \r\n      <Link className=\"font-light mt-12 text-base text-brand-graylight hover:text-brand-royalBlue transition-all duration-300\" to=\"/import\">\r\n        Import using wallet seed phrase\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Starter;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Start/Start.tsx b/extension/source/containers/auth/Start/Start.tsx
--- a/extension/source/containers/auth/Start/Start.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Start/Start.tsx	(date 1637064532376)
@@ -4,7 +4,7 @@
 import LogoImage from 'assets/images/logo-s.svg';
 import { Form, Input } from 'antd';
 
-const Starter = () => {
+export const Start = () => {
   const controller = useController();
 
   const onSubmit = (data: any) => {
@@ -65,4 +65,4 @@
   );
 };
 
-export default Starter;
+export default Start;
Index: extension/source/containers/auth/Send/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export { default as SendConfirm } from './Confirm';\r\nexport { default } from './Send';\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Send/index.tsx b/extension/source/containers/auth/Send/index.tsx
--- a/extension/source/containers/auth/Send/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Send/index.tsx	(date 1637064532360)
@@ -1,2 +1,2 @@
-export { default as SendConfirm } from './Confirm';
-export { default } from './Send';
+export { SendConfirm } from './Confirm';
+export { Send } from './Send';
Index: extension/source/containers/auth/Send/Confirm.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from 'react';\r\nimport Header from 'containers/common/Header';\r\nimport Layout from 'containers/common/Layout';\r\nimport { Button, Icon } from 'components/index';;\r\nimport { useController, useFiat, useStore, useUtils, useFormat } from 'hooks/index';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { IAccountState } from 'state/wallet/types';\r\nimport { browser } from 'webextension-polyfill-ts';\r\n\r\nimport { getHost } from '../../../scripts/Background/helpers';\r\n\r\nimport { useEffect } from 'react';\r\nimport { Assets } from 'scripts/types';\r\n\r\nconst SendConfirm = () => {\r\n  const controller = useController();\r\n  const getFiatAmount = useFiat();\r\n  const history = useHistory();\r\n\r\n  const { alert } = useUtils();\r\n  const { ellipsis, formatURL } = useFormat();\r\n  const { accounts, activeAccountId, currentSenderURL, confirmingTransaction } = useStore();\r\n\r\n  const connectedAccount = accounts.find((account: IAccountState) => {\r\n    return account.connectedTo.find((url: any) => {\r\n      return url === getHost(currentSenderURL);\r\n    });\r\n  });\r\n  \r\n  const sysExplorer = controller.wallet.account.getSysExplorerSearch();\r\n  const { tempTx } = controller.wallet.account.getTransactionItem();\r\n  const [confirmed, setConfirmed] = useState<boolean>(false);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [recommendedFee, setRecommendedFee] = useState(0.00001);\r\n  const [tokenData, setTokenData] = useState<any>({});\r\n\r\n  useEffect(() => {\r\n    if (tempTx?.token) {\r\n      const selectedAsset = accounts.find(element => element.id === activeAccountId)!.assets.filter((asset: Assets) => asset.assetGuid == tempTx?.token);\r\n\r\n      setTokenData(selectedAsset[0]);\r\n    }\r\n\r\n    controller.wallet.account.getRecommendFee().then((response: any) => {\r\n      setRecommendedFee(response);\r\n    })\r\n  }, []);\r\n\r\n  const handleConfirm = () => {\r\n    const acc = accounts.find(element => element.id === activeAccountId)\r\n\r\n    if ((acc ? acc.balance : -1) > 0) {\r\n      setLoading(true);\r\n\r\n      controller.wallet.account.confirmTempTx().then((error: any) => {\r\n        if (error) {\r\n          alert.removeAll();\r\n          alert.error('Can\\'t complete transaction. Try again later.');\r\n\r\n          if (confirmingTransaction) {\r\n            browser.runtime.sendMessage({\r\n              type: 'WALLET_ERROR',\r\n              target: 'background',\r\n              transactionError: true,\r\n              invalidParams: false,\r\n              message: `TransactionError: ${error}`\r\n            });\r\n\r\n            setTimeout(() => {\r\n              handleCancelTransactionOnSite();\r\n            }, 4000);\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        browser.runtime.sendMessage({\r\n          type: 'WALLET_ERROR',\r\n          target: 'background',\r\n          transactionError: false,\r\n          invalidParams: false,\r\n          message: 'Everything is fine, transaction completed.'\r\n        });\r\n\r\n        setConfirmed(true);\r\n        setLoading(false);\r\n      }).catch((error: any) => {\r\n        if (error && tempTx.fee > recommendedFee) {\r\n          alert.removeAll();\r\n          alert.error(`${formatURL(String(error.message), 166)} Please, reduce fees to send transaction.`);\r\n        }\r\n\r\n        if (error && tempTx.fee <= recommendedFee) {\r\n          const max = 100 * tempTx.amount / accounts[activeAccountId].balance;\r\n\r\n          if (tempTx.amount >= (max * tempTx.amount / 100)) {\r\n            alert.removeAll();\r\n            alert.error(error.message);\r\n\r\n            setLoading(false);\r\n\r\n            return;\r\n          }\r\n\r\n          alert.removeAll();\r\n          alert.error('Can\\'t complete transaction. Try again later.');\r\n        }\r\n\r\n        if (confirmingTransaction) {\r\n          browser.runtime.sendMessage({\r\n            type: 'WALLET_ERROR',\r\n            target: 'background',\r\n            transactionError: true,\r\n            invalidParams: false,\r\n            message: `TransactionError: ${error}`\r\n          });\r\n\r\n          setTimeout(() => {\r\n            handleCancelTransactionOnSite();\r\n          }, 4000);\r\n        }\r\n\r\n        setLoading(false);\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    history.push(\"/home\");\r\n  }\r\n\r\n  const handleClosePopup = () => {\r\n    browser.runtime.sendMessage({\r\n      type: \"CLOSE_POPUP\",\r\n      target: \"background\"\r\n    });\r\n  }\r\n\r\n  const handleCancelTransactionOnSite = () => {\r\n    browser.runtime.sendMessage({\r\n      type: \"CANCEL_TRANSACTION\",\r\n      target: \"background\",\r\n      item: tempTx ? 'tempTx' : null\r\n    });\r\n\r\n    browser.runtime.sendMessage({\r\n      type: \"CLOSE_POPUP\",\r\n      target: \"background\"\r\n    });\r\n  }\r\n\r\n  const goHome = () => {\r\n    return history.push('/home');\r\n  }\r\n\r\n  return confirmed ? (\r\n    <Layout title=\"Your transaction is underway\" linkTo=\"/remind\" showLogo>\r\n      <div className=\"body-description\">\r\n        You can follow your transaction under activity on your account screen.\r\n      </div>\r\n      <Button\r\n        type=\"button\"\r\n        onClick={confirmingTransaction ? handleClosePopup : goHome}\r\n      >\r\n        Next\r\n      </Button>\r\n    </Layout>\r\n  ) : (\r\n    <div >\r\n      <Header/>\r\n      <section >Confirm</section>\r\n      <section >\r\n        <div >\r\n          <Icon name=\"arrow-up\" className=\"w-4 bg-brand-graydark100 text-brand-white\" />\r\n        </div>\r\n        {tempTx?.isToken && tokenData && tokenData?.symbol ? `${String(tempTx.amount)} ${String(tokenData?.symbol)}` : `${(tempTx?.amount || 0) + (tempTx?.fee || 0)} SYS`}\r\n      </section>\r\n      <section >\r\n        <div>\r\n          <p>From</p>\r\n          <span>\r\n            {confirmingTransaction && connectedAccount ? connectedAccount?.label : accounts.find(element => element.id === activeAccountId)!.label || ''} (\r\n            {ellipsis(tempTx!.fromAddress)})\r\n          </span>\r\n        </div>\r\n        <div>\r\n          <p>To</p>\r\n          <span>{tempTx!.toAddress}</span>\r\n        </div>\r\n        <div>\r\n          <p>Transaction fee</p>\r\n          <span>\r\n            {tempTx!.fee} SYS (≈ {getFiatAmount(tempTx?.fee || 0, 8)})\r\n          </span>\r\n        </div>\r\n        {tempTx?.isToken && tokenData && (\r\n          <div>\r\n            <div>\r\n              <p>Token being sent</p>\r\n              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>\r\n                <span>\r\n                  {tokenData?.symbol ? `${String(tokenData?.symbol)}` : null}\r\n                </span>\r\n                <span style={{ cursor: 'pointer' }} onClick={() => window.open(`${sysExplorer}/asset/${tokenData.assetGuid}`)}>See on SYS block explorer</span>\r\n              </div>\r\n            </div>\r\n\r\n          </div>\r\n        )}\r\n      </section>\r\n      <section>\r\n        <div>\r\n          <p>Max total</p>\r\n          <span>\r\n            {!tempTx?.isToken ? getFiatAmount(\r\n              Number(tempTx?.amount || 0) + Number(tempTx?.fee || 0),\r\n              8\r\n            ) : `${String(tempTx?.amount)} ${tokenData?.symbol ? String(tokenData?.symbol) : 'SYS'}`}\r\n          </span>\r\n        </div>\r\n\r\n        {confirmingTransaction && (\r\n          <div>\r\n            <span style={{ fontSize: '14px', margin: '0px' }}>Confirm transaction on {currentSenderURL}?</span>\r\n          </div>\r\n        )}\r\n\r\n        <div>\r\n          <Button\r\n            type=\"button\"\r\n            onClick={confirmingTransaction ? handleCancelTransactionOnSite : handleCancel}\r\n          >\r\n            Cancel\r\n          </Button>\r\n\r\n          <Button\r\n            type=\"submit\"\r\n            onClick={handleConfirm}\r\n          >\r\n            {loading ? <Icon name=\"loading\" className=\"w-4 bg-brand-graydark100 text-brand-white\" /> : 'Confirm'}\r\n          </Button>\r\n        </div>\r\n      </section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SendConfirm;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Send/Confirm.tsx b/extension/source/containers/auth/Send/Confirm.tsx
--- a/extension/source/containers/auth/Send/Confirm.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Send/Confirm.tsx	(date 1637064532357)
@@ -1,23 +1,21 @@
 import React, { useState } from 'react';
 import Header from 'containers/common/Header';
-import Layout from 'containers/common/Layout';
+import { Layout } from 'containers/common/Layout';
 import { Button, Icon } from 'components/index';;
 import { useController, useFiat, useStore, useUtils, useFormat } from 'hooks/index';
 import { useHistory } from 'react-router-dom';
 import { IAccountState } from 'state/wallet/types';
 import { browser } from 'webextension-polyfill-ts';
 
-import { getHost } from '../../../scripts/Background/helpers';
-
 import { useEffect } from 'react';
 import { Assets } from 'scripts/types';
 
-const SendConfirm = () => {
+export const SendConfirm = () => {
   const controller = useController();
   const getFiatAmount = useFiat();
   const history = useHistory();
 
-  const { alert } = useUtils();
+  const { alert, getHost } = useUtils();
   const { ellipsis, formatURL } = useFormat();
   const { accounts, activeAccountId, currentSenderURL, confirmingTransaction } = useStore();
 
@@ -154,7 +152,7 @@
   }
 
   return confirmed ? (
-    <Layout title="Your transaction is underway" linkTo="/remind" showLogo>
+    <Layout title="Your transaction is underway">
       <div className="body-description">
         You can follow your transaction under activity on your account screen.
       </div>
@@ -244,5 +242,3 @@
     </div>
   );
 };
-
-export default SendConfirm;
Index: extension/source/containers/auth/Home/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export { default } from './Home';\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Home/index.tsx b/extension/source/containers/auth/Home/index.tsx
--- a/extension/source/containers/auth/Home/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Home/index.tsx	(date 1637064532352)
@@ -1,1 +1,1 @@
-export { default } from './Home';
+export { Home } from './Home';
Index: extension/source/containers/auth/Send/Send.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import * as React from 'react';\r\nimport {\r\n  // ChangeEvent,\r\n  // useState,\r\n  // useCallback,\r\n  // useMemo,\r\n  // useEffect,\r\n  FC,\r\n} from 'react';\r\n// import { useHistory } from 'react-router-dom';\r\nimport Header from 'containers/common/Header';\r\n// import { Button, IconButton, Icon } from 'components/index';;\r\n// import { useController, useFiat, useStore, useUtils } from 'hooks/index';\r\n// import { Assets } from '../../../scripts/types';\r\n// import { Form, Input } from 'antd';\r\n\r\ninterface IWalletSend {\r\n  initAddress?: string;\r\n}\r\nconst WalletSend: FC<IWalletSend> = (/*{ initAddress = '' }*/) => {\r\n  // const history = useHistory();\r\n  // // const getFiatAmount = useFiat();\r\n  // const controller = useController();\r\n  // const { alert } = useUtils();\r\n  // const { accounts, activeAccountId, activeNetwork, changingNetwork } = useStore();\r\n  \r\n  // const [address, setAddress] = useState<string>(initAddress);\r\n  // const [amount, setAmount] = useState<string>('');\r\n  // const [fee, setFee] = useState<string>('0.00001');\r\n  // const [recommend, setRecommend] = useState<number>(0);\r\n  // const [checked, setChecked] = useState<boolean>(false);\r\n  // const [selectedAsset, setSelectedAsset] = useState<Assets | null>(null);\r\n  // const [expanded, setExpanded] = useState<boolean>(false);\r\n\r\n  // const onSubmit = (data: any) => {\r\n  //   const {\r\n  //     address,\r\n  //     amount,\r\n  //     fee\r\n  //   } = data;\r\n\r\n  //   if (Number(fee) > 0.1) {\r\n  //     alert.removeAll();\r\n  //     alert.error(`Error: Fee too high, maximum 0.1 SYS`, { timeout: 2000 });\r\n\r\n  //     return;\r\n  //   }\r\n\r\n  //   if (selectedAsset) {\r\n  //     try {\r\n  //       controller.wallet.account.updateTempTx({\r\n  //         fromAddress: accounts.find(element => element.id === activeAccountId)!.address.main,\r\n  //         toAddress: address,\r\n  //         amount: Number(amount - fee),\r\n  //         fee,\r\n  //         token: selectedAsset.assetGuid,\r\n  //         isToken: true,\r\n  //         rbf: !checked,\r\n  //       });\r\n\r\n  //       history.push('/send/confirm');\r\n  //     } catch (error) {\r\n  //       alert.removeAll();\r\n  //       alert.error('An internal error has occurred.');\r\n  //     }\r\n\r\n  //     return;\r\n  //   }\r\n\r\n  //   controller.wallet.account.updateTempTx({\r\n  //     fromAddress: accounts.find(element => element.id === activeAccountId)!.address.main,\r\n  //     toAddress: address,\r\n  //     amount: Number(amount - fee),\r\n  //     fee,\r\n  //     token: null,\r\n  //     isToken: false,\r\n  //     rbf: true,\r\n  //   });\r\n\r\n  //   history.push('/send/confirm');\r\n  // };\r\n\r\n  // const handleAmountChange = useCallback(\r\n  //   (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n  //     setAmount(event.target.value);\r\n  //   },\r\n  //   []\r\n  // );\r\n\r\n  // const handleFeeChange = useCallback(\r\n  //   (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n  //     setFee(event.target.value.replace(/[^0-9.]/g, '').replace(/(\\..*?)\\..*/g, '$1'));\r\n\r\n  //     if (Number(event.target.value) > 0.1) {\r\n  //       alert.removeAll();\r\n  //       alert.error(`Error: Fee too high, maximum 0.1 SYS.`, { timeout: 2000 });\r\n\r\n  //       return;\r\n  //     }\r\n  //   },\r\n  //   []\r\n  // );\r\n\r\n  // const handleAddressChange = useCallback(\r\n  //   (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n  //     setAddress(event.target.value.trim());\r\n  //   },\r\n  //   []\r\n  // );\r\n\r\n  // const handleTypeChanged = useCallback(\r\n  //   (\r\n  //     checked: boolean\r\n  //   ) => {\r\n  //     setChecked(checked);\r\n  //   },\r\n  //   []\r\n  // )\r\n\r\n  // const handleGetFee = () => {\r\n  //   controller.wallet.account.getRecommendFee().then((response: any) => {\r\n  //     setRecommend(response);\r\n  //     setFee(response.toString());\r\n  //   });\r\n  // };\r\n\r\n  // const handleAssetSelected = (item: any) => {\r\n  //   const selectedAsset = accounts.find(element => element.id === activeAccountId)!.assets.filter((asset: Assets) => asset.assetGuid == item);\r\n\r\n  //   if (selectedAsset[0]) {\r\n  //     setSelectedAsset(selectedAsset[0]);\r\n\r\n  //     return;\r\n  //   }\r\n\r\n  //   setSelectedAsset(null);\r\n  // };\r\n\r\n  // useEffect(handleGetFee, []);\r\n\r\n  // const checkAssetBalance = () => {\r\n  //   return Number(selectedAsset ?\r\n  //     (selectedAsset.balance / 10 ** selectedAsset.decimals).toFixed(selectedAsset.decimals) :\r\n  //     accounts.find(element => element.id === activeAccountId)!.balance.toFixed(8))\r\n  // }\r\n\r\n  // const showAssetBalance = () => {\r\n  //   return (selectedAsset ?\r\n  //     (selectedAsset.balance / 10 ** selectedAsset.decimals).toFixed(selectedAsset.decimals) :\r\n  //     accounts.find(element => element.id === activeAccountId)!.balance.toFixed(8))\r\n  // }\r\n\r\n  return (\r\n    <div className=\"bg-brand-gray\">\r\n      <Header normalHeader />\r\n\r\n      <p>send component - replace with antd</p>\r\n\r\n      {/* <IconButton\r\n        type=\"primary\"\r\n        shape=\"circle\"\r\n        onClick={() => history.goBack()}\r\n      >\r\n        <Icon name=\"arrow-left\" className=\"w-4 bg-brand-graydark100 text-brand-white\" />\r\n      </IconButton>\r\n\r\n      <Form\r\n        name=\"basic\"\r\n        labelCol={{ span: 8 }}\r\n        wrapperCol={{ span: 8 }}\r\n        initialValues={{ remember: true }}\r\n        onFinish={onSubmit}\r\n        autoComplete=\"off\"\r\n        className=\"flex justify-center items-center flex-col gap-4 mt-8 text-center\"\r\n      >\r\n        <section>Send {selectedAsset ? selectedAsset.symbol : \"SYS\"}</section>\r\n\r\n        <section>\r\n          <div>\r\n            Balance:{' '}\r\n            {changingNetwork ? (\r\n              <Icon name=\"loading\" className=\"w-4 bg-brand-graydark100 text-brand-white\" />\r\n            ) : (\r\n              <span>{showAssetBalance()}</span>\r\n            )}\r\n\r\n            {selectedAsset\r\n              ? selectedAsset.symbol\r\n              : <small>{activeNetwork == \"testnet\" ? \"TSYS\" : \"SYS\"}</small>}\r\n          </div>\r\n        </section>\r\n\r\n        <Form.Item\r\n          label=\"Recipient Address\"\r\n          name=\"address\"\r\n          hasFeedback\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: ''\r\n            },\r\n            ({ }) => ({\r\n              validator(_, value) {\r\n                if (controller.wallet.account.isValidSYSAddress(value, activeNetwork)) {\r\n                  return Promise.resolve();\r\n                }\r\n\r\n                return Promise.reject('');\r\n              }\r\n            })\r\n          ]}\r\n        >\r\n          <Input placeholder=\"address\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Choose asset\"\r\n          name=\"asset\"\r\n          hasFeedback\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: ''\r\n            },\r\n          ]}\r\n        >\r\n          <div\r\n            onClick={() => setExpanded(!expanded)}\r\n          >\r\n            <span>\r\n              {selectedAsset?.symbol || \"SYS\"}\r\n              <Icon name=\"arrow-down\" className=\"w-4 bg-brand-graydark100 text-brand-white\" />\r\n            </span>\r\n            <ul >\r\n              <li onClick={() => handleAssetSelected(1)}>\r\n                <p>SYS</p>\r\n                <p>Native</p>\r\n              </li>\r\n\r\n              {accounts.find(element => element.id === activeAccountId)!.assets.map((item, index) => {\r\n                if (!controller.wallet.account.isNFT(item.assetGuid)) {\r\n                  return (\r\n                    <li key={index} onClick={() => handleAssetSelected(item.assetGuid)}>\r\n                      <p>{item.symbol}</p>\r\n                      <p>SPT</p>\r\n                    </li>\r\n                  )\r\n                }\r\n\r\n                return (\r\n                  <li key={index} onClick={() => handleAssetSelected(item.assetGuid)}>\r\n                    <p>{item.symbol}</p>\r\n                    <p>NFT</p>\r\n                  </li>\r\n                )\r\n              })}\r\n            </ul>\r\n          </div>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Asset amount\"\r\n          name=\"amount\"\r\n          hasFeedback\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: ''\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"amount\" />\r\n          {accounts.find(element => element.id === activeAccountId)!.balance === 0 && <small >You don't have SYS available.</small>}\r\n          <Button\r\n            type=\"button\"\r\n            onClick={() =>\r\n              setAmount(selectedAsset ? controller.wallet.account.isNFT(selectedAsset.assetGuid) ? String(selectedAsset.balance) : String((selectedAsset.balance / 10 ** selectedAsset.decimals).toFixed(selectedAsset.decimals)) : String(accounts.find(element => element.id === activeAccountId)!.balance))\r\n            }\r\n          >\r\n            Max\r\n          </Button>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Fee\"\r\n          name=\"fee\"\r\n          hasFeedback\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: ''\r\n            },\r\n          ]}\r\n        >\r\n          <Input placeholder=\"fee\" />\r\n          <div>\r\n            {`With current network conditions we recommend a fee of ${recommend} SYS.`}\r\n          </div>\r\n          <Button\r\n            type=\"button\"\r\n            onClick={handleGetFee}\r\n          >\r\n            Recommend\r\n          </Button>\r\n        </Form.Item>\r\n      </Form> */}\r\n\r\n      {/* <form autoComplete=\"off\">\r\n        <section >\r\n          <ul >\r\n            <div >\r\n              <span>\r\n                ≈ {!selectedAsset ? getFiatAmount(Number(amount) + Number(fee), 6) : getFiatAmount(Number(fee), 6)}\r\n              </span>\r\n            </div>\r\n\r\n            <div>\r\n              <Button\r\n                type=\"button\"\r\n              >\r\n                Close\r\n              </Button>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                disabled={\r\n                  accounts.find(element => element.id === activeAccountId)!.balance === 0 ||\r\n                  checkAssetBalance() < Number(amount) ||\r\n                  !amount ||\r\n                  !fee ||\r\n                  Number(fee) > 0.1 ||\r\n                  !address ||\r\n                  Number(amount) <= 0\r\n                }\r\n              >\r\n                Send\r\n              </Button>\r\n            </div>\r\n          </ul>\r\n        </section>\r\n      </form> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WalletSend;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Send/Send.tsx b/extension/source/containers/auth/Send/Send.tsx
--- a/extension/source/containers/auth/Send/Send.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Send/Send.tsx	(date 1637064532358)
@@ -14,10 +14,10 @@
 // import { Assets } from '../../../scripts/types';
 // import { Form, Input } from 'antd';
 
-interface IWalletSend {
+interface ISend {
   initAddress?: string;
 }
-const WalletSend: FC<IWalletSend> = (/*{ initAddress = '' }*/) => {
+export const Send: FC<ISend> = (/*{ initAddress = '' }*/) => {
   // const history = useHistory();
   // // const getFiatAmount = useFiat();
   // const controller = useController();
@@ -342,5 +342,3 @@
     </div>
   );
 };
-
-export default WalletSend;
Index: extension/manual_install/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Pali Wallet Browser extension\r\n\r\nThis zips contains the build version for Pali wallet for version 1.0.9\r\n\r\n## Chrome/Brave Installation\r\nTo install it manually on chrome follow the below guide:\r\nhttps://webkul.com/blog/how-to-install-the-unpacked-extension-in-chrome/\r\n\r\n* If you're installing using Brave just change the chrome:// to brave://\r\n\r\n## Firefox Installation\r\nTo install it manually on firefox follow the below guide:\r\nhttps://accessfirefox.org/Install_Addon_Manually.php\r\n\r\n\r\n## Opera Intallation\r\nTo install it manually download the opera.crx file and follow step 9 of this link:\r\nhttps://forums.opera.com/topic/33583/install-chrome-extensions/221?lang=en-US\r\n\r\n\r\n### Developer Note:\r\nWe have tested thoroughly the extension on Brave and Chrome, but still, there might be issues with Firefox and Opera extensions. If you find any issue within Firefox or Opera or even bugs on Brave and Chrome extension please report to us at claudio@pollum.io
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/manual_install/README.md b/extension/manual_install/README.md
--- a/extension/manual_install/README.md	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/manual_install/README.md	(date 1637064532274)
@@ -1,6 +1,6 @@
 # Pali Wallet Browser extension
 
-This zips contains the build version for Pali wallet for version 1.0.9
+This zips contains the build version for Pali wallet for version 1.0.10
 
 ## Chrome/Brave Installation
 To install it manually on chrome follow the below guide:
@@ -19,4 +19,4 @@
 
 
 ### Developer Note:
-We have tested thoroughly the extension on Brave and Chrome, but still, there might be issues with Firefox and Opera extensions. If you find any issue within Firefox or Opera or even bugs on Brave and Chrome extension please report to us at claudio@pollum.io
\ No newline at end of file
+We have tested thoroughly the extension on Brave and Chrome, but still, there might be issues with Firefox and Opera extensions. If you find any issue within Firefox or Opera or even bugs on Brave and Chrome extension please report to us at claudio@pollum.io
Index: extension/source/containers/auth/Home/Home.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect, useState } from 'react';\r\nimport { Button, Icon, ModalBlock } from 'components/index';\r\nimport { useController, useStore, useFiat, useFormat } from 'hooks/index';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Header from 'containers/common/Header';\r\nimport TxsPanel from './TxsPanel';\r\nimport { ReloadOutlined } from '@ant-design/icons';\r\n\r\nconst Home = () => {\r\n  const controller = useController();\r\n  const history = useHistory();\r\n  const getFiatAmount = useFiat();\r\n  \r\n  const { formatNumber } = useFormat();\r\n\r\n  const {\r\n    accounts,\r\n    activeAccountId,\r\n    changingNetwork,\r\n    activeNetwork,\r\n  } = useStore();\r\n\r\n  const [openBlockExplorer, setOpenBlockExplorer] = useState<boolean>(false);\r\n  const [openAssetBlockExplorer, setOpenAssetBlockExplorer] =\r\n    useState<boolean>(false);\r\n  const [txidSelected, setTxidSelected] = useState('');\r\n  const [assetSelected, setAssetSelected] = useState(-1);\r\n  const [txType, setTxType] = useState('');\r\n  const [assetType, setAssetType] = useState('');\r\n  const sysExplorer = controller.wallet.account.getSysExplorerSearch();\r\n  const [tx, setTx] = useState(null);\r\n  const [assetTx, setAssetTx] = useState(null);\r\n\r\n  const handleRefresh = () => {\r\n    controller.wallet.account.getLatestUpdate();\r\n    controller.wallet.account.watchMemPool(accounts[activeAccountId]);\r\n    controller.stateUpdater();\r\n  };\r\n\r\n  const getTransactionData = async (txid: string) => {\r\n    return await controller.wallet.account.getTransactionData(txid);\r\n  };\r\n\r\n  const getTransactionAssetData = async (assetGuid: string) => {\r\n    return await controller.wallet.account.getDataAsset(assetGuid);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (\r\n      !controller.wallet.isLocked() &&\r\n      accounts.length > 0 &&\r\n      accounts.find((element) => element.id === activeAccountId)\r\n    ) {\r\n      handleRefresh();\r\n    }\r\n  }, [!controller.wallet.isLocked(), accounts.length > 0]);\r\n\r\n  const handleOpenExplorer = (txid: string) => {\r\n    window.open(`${sysExplorer}/tx/${txid}`);\r\n  };\r\n\r\n  const handleOpenAssetExplorer = (assetGuid: number) => {\r\n    window.open(`${sysExplorer}/asset/${assetGuid}`);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {openBlockExplorer && (\r\n        <div\r\n          onClick={() => {\r\n            setOpenBlockExplorer(false);\r\n          }}\r\n        />\r\n      )}\r\n\r\n      {openAssetBlockExplorer && (\r\n        <div\r\n          onClick={() => {\r\n            setOpenAssetBlockExplorer(false);\r\n          }}\r\n        />\r\n      )}\r\n\r\n      {openBlockExplorer && (\r\n        <ModalBlock\r\n          title=\"Open block explorer\" // txtype\r\n          message=\"Would you like to go to view transaction in Sys Block Explorer?\"\r\n          setCallback={() => {\r\n            setOpenBlockExplorer(false);\r\n            setTxidSelected('');\r\n            setTx(null);\r\n          }}\r\n          callback={() => handleOpenExplorer(txidSelected)}\r\n          tx={tx}\r\n          txType={txType}\r\n        />\r\n      )}\r\n\r\n      {openAssetBlockExplorer && (\r\n        <ModalBlock\r\n          title=\"Open block explorer\" // asset type\r\n          message=\"Would you like to go to view asset in Sys Block Explorer?\"\r\n          setCallback={() => {\r\n            setOpenAssetBlockExplorer(false);\r\n            setAssetSelected(-1);\r\n            setAssetTx(null);\r\n          }}\r\n          callback={() => handleOpenAssetExplorer(assetSelected)}\r\n          assetTx={assetTx}\r\n          assetType={assetType}\r\n        />\r\n      )}\r\n\r\n      {accounts.find((element) => element.id === activeAccountId) ? (\r\n        <>\r\n          <Header accountHeader />\r\n\r\n          <section className=\"flex items-center flex-col gap-4 text-brand-white bg-brand-navydarker\">\r\n            <button onClick={handleRefresh} className=\"\">\r\n              <ReloadOutlined />\r\n            </button>\r\n\r\n            {changingNetwork ? (\r\n              <Icon name=\"loading\" className=\"w-4 bg-brand-gray200 text-brand-navy\" />\r\n            ) : (\r\n              <h3>\r\n                {formatNumber(\r\n                  accounts.find((element) => element.id === activeAccountId)\r\n                    ?.balance || 0\r\n                )}{' '}\r\n                <small>{activeNetwork == 'testnet' ? 'TSYS' : 'SYS'}</small>\r\n              </h3>\r\n            )}\r\n\r\n            {changingNetwork ? (\r\n              <p style={{ color: 'white' }}>...</p>\r\n            ) : (\r\n              <small style={{ marginTop: '5px', marginBottom: '5px' }}>\r\n                {activeNetwork !== 'testnet'\r\n                  ? getFiatAmount(\r\n                    accounts.find((element) => element.id === activeAccountId)\r\n                      ?.balance || 0\r\n                  )\r\n                  : ''}\r\n              </small>\r\n            )}\r\n\r\n            <div >\r\n              <Button\r\n                className=\"bg-brand-navydarker rounded-l-full border border-brand-deepPink tracking-normal text-base py-1.5 px-12 cursor-pointer mr-px hover:bg-brand-deepPink\"\r\n                type=\"button\"\r\n                onClick={() => history.push('/send')}\r\n              >\r\n                Send\r\n              </Button>\r\n              <button\r\n                className=\"bg-brand-navydarker rounded-r-full border border-brand-royalBlue tracking-normal text-base py-1.5 px-12 cursor-pointer ml-px hover:bg-brand-royalBlue\"\r\n                type=\"button\"\r\n                onClick={() => history.push('/receive')}\r\n              >\r\n                Receive\r\n              </button>\r\n            </div>\r\n          </section>\r\n\r\n          <TxsPanel\r\n            getTransactionAssetData={getTransactionAssetData}\r\n            getTransactionData={getTransactionData}\r\n            setTx={setTx}\r\n            setAssetTx={setAssetTx}\r\n            setAssetType={setAssetType}\r\n            setTxType={setTxType}\r\n            txidSelected={txidSelected}\r\n            setTxidSelected={setTxidSelected}\r\n            setAssetSelected={setAssetSelected}\r\n            openBlockExplorer={openBlockExplorer}\r\n            setOpenBlockExplorer={setOpenBlockExplorer}\r\n            openAssetBlockExplorer={openAssetBlockExplorer}\r\n            setOpenAssetBlockExplorer={setOpenAssetBlockExplorer}\r\n            address={\r\n              accounts.find((element) => element.id === activeAccountId)\r\n                ?.address.main || 'no addr'\r\n            }\r\n            transactions={\r\n              accounts.find((element) => element.id === activeAccountId)\r\n                ?.transactions || []\r\n            }\r\n            assets={\r\n              accounts.find((element) => element.id === activeAccountId)\r\n                ?.assets || []\r\n            }\r\n          />\r\n        </>\r\n      ) : (\r\n        <section\r\n        >\r\n          <Icon name=\"loading\" className=\"w-4 bg-brand-gray200 text-brand-navy\" />\r\n        </section>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Home/Home.tsx b/extension/source/containers/auth/Home/Home.tsx
--- a/extension/source/containers/auth/Home/Home.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Home/Home.tsx	(date 1637064761590)
@@ -7,11 +7,11 @@
 import TxsPanel from './TxsPanel';
 import { ReloadOutlined } from '@ant-design/icons';
 
-const Home = () => {
+export const Home = () => {
   const controller = useController();
   const history = useHistory();
   const getFiatAmount = useFiat();
-  
+
   const { formatNumber } = useFormat();
 
   const {
Index: extension/source/pages/App/custom.d.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>declare module '*.png' {\r\n  const value: string;\r\n  export default value;\r\n}\r\n\r\ndeclare module '*.svg' {\r\n  const value: string;\r\n  export default value;\r\n}\r\n\r\ndeclare module 'react-alert';\r\n\r\ndeclare module 'bip84';\r\n\r\ndeclare interface IWalletController {\r\n  account: Readonly<IAccountController>;\r\n  checkPassword: (pwd: string) => boolean;\r\n  createHardwareWallet: () => void;\r\n  createWallet: (isUpdated?: boolean) => void;\r\n  deleteWallet: (pwd: string) => void;\r\n  generatePhrase: () => string | null;\r\n  getNewAddress: () => Promise<boolean>;\r\n  getPhrase: (pwd: string) => string | null;\r\n  importPhrase: (phr: string) => boolean;\r\n  isLocked: () => boolean;\r\n  logOut: () => void;\r\n  setWalletPassword: (pwd: string) => void;\r\n  switchNetwork: (networkId: string) => void;\r\n  switchWallet: (id: number) => void;\r\n  unLock: (pwd: string) => boolean;\r\n}\r\n\r\ndeclare interface IMessagesController { }\r\n\r\ndeclare interface IAccountController {\r\n  addNewAccount: (label: string) => Promise<string | null>;\r\n  clearTransactionItem: (item: any) => void;\r\n  confirmIssueNFT: () => Promise<any>;\r\n  confirmIssueSPT: () => Promise<any>;\r\n  confirmNewSPT: () => Promise<any>;\r\n  confirmSignature: (sendPSBT: boolean) => any;\r\n  confirmTempTx: () => Promise<any>;\r\n  confirmTransferOwnership: () => any;\r\n  confirmUpdateAssetTransaction: () => any;\r\n  createSPT: (spt: ISPTInfo) => void;\r\n  getChangeAddress: () => Promise<string>;\r\n  getConnectedAccount: () => IAccountState;\r\n  getConnectedAccountXpub: () => string | null;\r\n  getDataAsset: (assetGuid: any) => any;\r\n  getDataFromPageToInitTransaction: () => any;\r\n  getHoldingsData: () => any;\r\n  getLatestUpdate: () => void;\r\n  getPrimaryAccount: (pwd: string, sjs: any) => void;\r\n  getRawTransaction: (txid: string) => any;\r\n  getRecommendFee: () => Promise<number>;\r\n  getSysExplorerSearch: () => string;\r\n  getTransactionData: (txid: string) => any;\r\n  getTransactionInfoByTxId: (txid: any) => any;\r\n  getTransactionItem: () => any | null;\r\n  getUserMintedTokens: () => any;\r\n  isNFT: (guid: number) => boolean;\r\n  isValidSYSAddress: (address: string, network: string) => boolean | undefined;\r\n  issueNFT: (nft: INFTIssue) => void;\r\n  issueSPT: (spt: ISPTIssue) => void;\r\n  setCurrentPSBT: (psbt: any) => any;\r\n  setCurrentPsbtToSign: (psbtToSign: any) => any;\r\n  setDataFromPageToCreateNewSPT: (data: any) => void;\r\n  setDataFromPageToMintNFT: (data: any) => void;\r\n  setDataFromPageToMintSPT: (data: any) => void;\r\n  setDataFromPageToTransferOwnership: (data: any) => void;\r\n  setDataFromPageToUpdateAsset: (data: any) => void;\r\n  setDataFromWalletToCreateSPT: (data: any) => void;\r\n  setDataFromWalletToMintNFT: (data: any) => void;\r\n  setDataFromWalletToMintSPT: (data: any) => void;\r\n  updateAccountLabel: (id: number, label: string) => void;\r\n  updateTempTx: (tx: ITransactionInfo) => void;\r\n  updateTokensState: () => any;\r\n  updateTxs: () => void;\r\n  watchMemPool: (currentAccount: IAccountState) => void;\r\n  setDataFromWalletToTransferOwnership: (data: any) => void;\r\n  setNewXpub: (id: number, xpub: string, xprv: string, key: string) => boolean;\r\n  setDataFromWalletToUpdateAsset: (data: any) => void;\r\n  setUpdateAsset: (asset: any) => any;\r\n  updateTokensState: () => any;\r\n  setNewAddress: (addr: string) => boolean;\r\n  subscribeAccount: (isHardwareWallet: boolean, sjs?: any, label?: string, walletCreation?: boolean) => Promise<string | null>;\r\n  setHDSigner: (accountId: number) => any;\r\n  setNewOwnership: (data: any) => any;\r\n  confirmIssueNFTTx: () => any;\r\n  setNewIssueNFT: (data: any) => any;\r\n  setDataFromPageToIssueNFT: (data: any) => any;\r\n  setDataFromWalletToIssueNFT: (data: any) => any;\r\n  importPsbt: (psbt: any) => any;\r\n  decryptAES: (encryptedString: any, key: string) => any;\r\n  setAutolockTimer: (minutes: number) => any;\r\n}\r\n\r\ndeclare type CreateTokenItems = {\r\n  auxfeedetails?: {\r\n    auxfees: [{\r\n      bound: any | 0,\r\n      percent: any | 0\r\n    }]\r\n  },\r\n  capabilityflags?: string | '127',\r\n  description: string,\r\n  initialSupply?: number | 0,\r\n  maxsupply: number,\r\n  notaryAddress?: string,\r\n  notarydetails?: {\r\n    endpoint?: string | null,\r\n    hdrequired?: boolean,\r\n    instanttransfers?: boolean\r\n  },\r\n  payoutAddress?: string,\r\n  precision: number,\r\n  receiver: string,\r\n  symbol: string\r\n}\r\n\r\ndeclare type SendTokenItems = {\r\n  amount: number,\r\n  fee: number,\r\n  isToken: boolean,\r\n  rbf: boolean,\r\n  receiver: string,\r\n  sender: string,\r\n  token: string\r\n}\r\n\r\ndeclare type IssueTokenItems = {\r\n  amount: number,\r\n  assetGuid: string\r\n}\r\n\r\ndeclare type CreateAndIssueNFTItems = {\r\n  auxfeedetails?: {\r\n    auxfees: [{\r\n      bound: any | 0,\r\n      percent: any | 0\r\n    }]\r\n  },\r\n  description: string,\r\n  issuer: string,\r\n  notaryAddress?: string,\r\n  notarydetails?: {\r\n    endpoint?: string | null,\r\n    hdrequired?: boolean,\r\n    instanttransfers?: boolean\r\n  },\r\n  payoutAddress?: string,\r\n  precision: number,\r\n  symbol: string\r\n}\r\n\r\ndeclare type UpdateAssetItems = {\r\n  assetGuid: string,\r\n  auxfeedetails?: {\r\n    auxfees: [{\r\n      bound: any | 0,\r\n      percent: any | 0\r\n    }]\r\n  },\r\n  capabilityflags?: string | '127',\r\n  contract?: string,\r\n  description?: string,\r\n  notaryAddress?: string,\r\n  notarydetails?: {\r\n    endpoint?: string | null,\r\n    hdrequired?: boolean,\r\n    instanttransfers?: boolean\r\n  },\r\n  payoutAddress?: string\r\n}\r\n\r\ndeclare type TransferOwnershipItems = {\r\n  assetGuid: string,\r\n  newOwner: string\r\n}\r\n\r\ndeclare interface IConnectionsController {\r\n  connectWallet: () => any;\r\n  getChangeAddress: () => any | null;\r\n  getConnectedAccount: () => any | null;\r\n  getConnectedAccountXpub: () => any | null;\r\n  getDataAsset: (assetGuid: any) => any | null;\r\n  getHoldingsData: () => any | null;\r\n  getUserMintedTokens: () => Promise<any> | null;\r\n  getWalletState: () => any | null;\r\n  handleCreateNFT: (items: CreateAndIssueNFTItems) => Promise<any> | null;\r\n  handleCreateToken: (items: CreateTokenItems) => Promise<any> | null;\r\n  handleIssueNFT: (amount: number, assetGuid: string) => Promise<any> | null;\r\n  handleIssueSPT: (items: IssueTokenItems) => Promise<any> | null;\r\n  handleSendToken: (items: SendTokenItems) => Promise<any> | null;\r\n  handleTransferOwnership: (items: TransferOwnershipItems) => Promise<any> | null;\r\n  handleUpdateAsset: (items: UpdateAssetItems) => Promise<any> | null;\r\n  isLocked: () => any;\r\n  isNFT: (guid: number) => boolean | null;\r\n  isValidSYSAddress: (address: string) => any | null;\r\n  onWalletUpdate: (callback: any) => any;\r\n  signAndSend: (psbt: any) => Promise<any> | null;\r\n  signPSBT: (psbtToSign: any) => Promise<any> | null;\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/pages/App/custom.d.ts b/extension/source/pages/App/custom.d.ts
--- a/extension/source/pages/App/custom.d.ts	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/pages/App/custom.d.ts	(date 1637064532438)
@@ -200,4 +200,4 @@
   onWalletUpdate: (callback: any) => any;
   signAndSend: (psbt: any) => Promise<any> | null;
   signPSBT: (psbtToSign: any) => Promise<any> | null;
-}
\ No newline at end of file
+}
Index: extension/source/hooks/usePrice.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { PRICE_SYS_ID, DEFAULT_CURRENCY } from 'constants/index';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport IPriceState from 'state/price/types';\r\nimport { RootState } from 'state/store';\r\n\r\nexport const useFiat = () => {\r\n  const price: IPriceState = useSelector((state: RootState) => state.price);\r\n\r\n  return (amount: number, fraction = 4) => {\r\n    const value = amount * price.fiat[PRICE_SYS_ID];\r\n    return `${DEFAULT_CURRENCY.symbol}${value.toLocaleString(\r\n      navigator.language,\r\n      {\r\n        minimumFractionDigits: fraction,\r\n        maximumFractionDigits: fraction,\r\n      }\r\n    )} ${DEFAULT_CURRENCY.name}`;\r\n  };\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/hooks/usePrice.ts b/extension/source/hooks/usePrice.ts
--- a/extension/source/hooks/usePrice.ts	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/hooks/usePrice.ts	(date 1637064532434)
@@ -9,12 +9,17 @@
 
   return (amount: number, fraction = 4) => {
     const value = amount * price.fiat[PRICE_SYS_ID];
-    return `${DEFAULT_CURRENCY.symbol}${value.toLocaleString(
-      navigator.language,
-      {
-        minimumFractionDigits: fraction,
-        maximumFractionDigits: fraction,
-      }
-    )} ${DEFAULT_CURRENCY.name}`;
+
+    if (DEFAULT_CURRENCY && value && price) {
+      return `${DEFAULT_CURRENCY.symbol}${value.toLocaleString(
+        navigator.language,
+        {
+          minimumFractionDigits: fraction,
+          maximumFractionDigits: fraction,
+        }
+      )} ${DEFAULT_CURRENCY.name}`;
+    }
+
+    return `-- ${DEFAULT_CURRENCY.name}`;
   };
 }
Index: extension/source/containers/unauth/CreatePass/CreatePass.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useController } from 'hooks/index';\r\nimport { Form, Input } from 'antd';\r\nimport { Button } from 'components/index';;\r\nimport Layout from '../../common/Layout';\r\n\r\nconst CreatePass = () => {\r\n  const history = useHistory();\r\n  const controller = useController();\r\n\r\n  const onSubmit = (data: any) => {\r\n    try {\r\n      controller.wallet.setWalletPassword(data.password);\r\n\r\n      history.push('/create/phrase/generated');\r\n    } catch (error) {\r\n      console.log('error', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout\r\n      title=\"Password\"\r\n      onlySection\r\n      linkTo=\"/app.html\"\r\n    >\r\n      <Form\r\n        name=\"basic\"\r\n        labelCol={{ span: 8 }}\r\n        wrapperCol={{ span: 8 }}\r\n        initialValues={{ remember: true }}\r\n        onFinish={onSubmit}\r\n        autoComplete=\"off\"\r\n        className=\"flex justify-center text-justify items-center flex-col gap-4 mt-8 text-center\"\r\n      >\r\n        <Form.Item\r\n          name=\"password\"\r\n          hasFeedback\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: ''\r\n            },\r\n            {\r\n              pattern: /^(?=.*[a-z])(?=.*[0-9])(?=.{8,})/,\r\n              message: ''\r\n            }\r\n          ]}\r\n        >\r\n          <Input.Password placeholder=\"New password (min 8 chars)\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"repassword\"\r\n          dependencies={['password']}\r\n          hasFeedback\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: ''\r\n            },\r\n            ({ getFieldValue }) => ({\r\n              validator(_, value) {\r\n                if (!value || getFieldValue('password') === value) {\r\n                  return Promise.resolve();\r\n                }\r\n\r\n                return Promise.reject('');\r\n              },\r\n            }),\r\n          ]}\r\n        >\r\n          <Input.Password placeholder=\"Confirm password\" />\r\n        </Form.Item>\r\n\r\n        <span className=\"font-light text-brand-graylight text-sm\">\r\n          At least 8 characters, 1 lower-case and 1 numeral.\r\n        </span>\r\n\r\n        <span className=\"font-light text-brand-royalBlue text-sm mx-4 p-7\">\r\n          Do not forget to save your password. You will need this password to unlock your wallet.\r\n        </span>\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          className=\"absolute bottom-12 tracking-normal text-base leading-4 py-2.5 px-12 cursor-pointer rounded-full bg-brand-navy text-brand-white font-light border border-brand-royalBlue hover:bg-brand-royalBlue hover:text-brand-navy transition-all duration-300\"\r\n        >\r\n          Next\r\n        </Button>\r\n      </Form>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default CreatePass;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/unauth/CreatePass/CreatePass.tsx b/extension/source/containers/unauth/CreatePass/CreatePass.tsx
--- a/extension/source/containers/unauth/CreatePass/CreatePass.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/unauth/CreatePass/CreatePass.tsx	(date 1637064532547)
@@ -3,7 +3,7 @@
 import { useController } from 'hooks/index';
 import { Form, Input } from 'antd';
 import { Button } from 'components/index';;
-import Layout from '../../common/Layout';
+import { Layout } from '../../common/Layout';
 
 const CreatePass = () => {
   const history = useHistory();
@@ -23,7 +23,6 @@
     <Layout
       title="Password"
       onlySection
-      linkTo="/app.html"
     >
       <Form
         name="basic"
Index: extension/source/containers/unauth/Remind/Remind.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\r\nimport { Button, Link } from 'components/index';\r\n\r\nimport Layout from '../../common/Layout';\r\n\r\nconst WelcomeWallet = () => {\r\n  return (\r\n    <Layout title={`Let's create a new \\n Wallet`} linkTo=\"/app.html\" showLogo>\r\n      <span>\r\n        {`To create a wallet, you will generate a unique identifier and choose a password. They will allow you to interact with the SYS blockchain.\\n\r\n        Note that this software only temporarily stores your wallet information, and only if you choose to. Please make sure to safely back up the wallet information.`}\r\n      </span>\r\n      <Button type=\"button\">\r\n        I'm ready\r\n      </Button>\r\n      <Link to=\"#\">Already have a wallet? Click here</Link>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default WelcomeWallet;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/unauth/Remind/Remind.tsx b/extension/source/containers/unauth/Remind/Remind.tsx
--- a/extension/source/containers/unauth/Remind/Remind.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/unauth/Remind/Remind.tsx	(date 1637064532425)
@@ -1,11 +1,11 @@
 import React from 'react';
 import { Button, Link } from 'components/index';
 
-import Layout from '../../common/Layout';
+import {Layout} from '../../common/Layout';
 
 const WelcomeWallet = () => {
   return (
-    <Layout title={`Let's create a new \n Wallet`} linkTo="/app.html" showLogo>
+    <Layout title={`Let's create a new \n Wallet`}>
       <span>
         {`To create a wallet, you will generate a unique identifier and choose a password. They will allow you to interact with the SYS blockchain.\n
         Note that this software only temporarily stores your wallet information, and only if you choose to. Please make sure to safely back up the wallet information.`}
Index: extension/source/hooks/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export * from './useAccountController';\r\nexport * from './useBrowser';\r\nexport * from './useFormat';\r\nexport * from './useLink';\r\nexport * from './usePopup';\r\nexport * from './usePrice';\r\nexport * from './useStore';\r\nexport * from './useTransaction';\r\nexport * from './useUtils';\r\nexport * from './useWalletController';\r\nexport * from './useController';\r\nexport * from './usePrice';
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/hooks/index.ts b/extension/source/hooks/index.ts
--- a/extension/source/hooks/index.ts	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/hooks/index.ts	(date 1637064532426)
@@ -9,4 +9,5 @@
 export * from './useUtils';
 export * from './useWalletController';
 export * from './useController';
-export * from './usePrice';
\ No newline at end of file
+export * from './usePrice';
+export * from './useDappConnection';
Index: extension/source/containers/unauth/Phrase/RemindPhrase.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\r\nimport { Button } from 'components/index';;\r\n\r\nimport Layout from '../../common/Layout';\r\n\r\nconst RemindPhrase = () => {\r\n  return (\r\n    <Layout title={`Let's create your\\nrecovery phrase`} linkTo=\"/create/pass\">\r\n      <span className=\"body-description\">\r\n        A recovery phrase is a series of 12 words in a specific order. This word\r\n        combination is unique to your wallet. Make sure to have pen and paper\r\n        ready so you can write it down.\r\n      </span>\r\n\r\n      <Button\r\n        type=\"button\"\r\n        theme=\"btn-gradient-primary\"\r\n        linkTo=\"/create/phrase/generated\"\r\n      >\r\n        Start\r\n      </Button>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default RemindPhrase;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/unauth/Phrase/RemindPhrase.tsx b/extension/source/containers/unauth/Phrase/RemindPhrase.tsx
--- a/extension/source/containers/unauth/Phrase/RemindPhrase.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/unauth/Phrase/RemindPhrase.tsx	(date 1637064532423)
@@ -1,11 +1,11 @@
 import React from 'react';
 import { Button } from 'components/index';;
 
-import Layout from '../../common/Layout';
+import {Layout} from '../../common/Layout';
 
 const RemindPhrase = () => {
   return (
-    <Layout title={`Let's create your\nrecovery phrase`} linkTo="/create/pass">
+    <Layout title={`Let's create your\nrecovery phrase`}>
       <span className="body-description">
         A recovery phrase is a series of 12 words in a specific order. This word
         combination is unique to your wallet. Make sure to have pen and paper
Index: extension/source/containers/unauth/Phrase/ConfirmPhrase.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, {\r\n  useState,\r\n  // useMemo\r\n} from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useController } from 'hooks/index';\r\nimport { Button } from 'components/index';\r\nimport shuffle from 'lodash/shuffle';\r\n// import isEqual from 'lodash/isEqual';\r\n\r\nimport Layout from '../../common/Layout';\r\n\r\nconst ConfirmPhrase = () => {\r\n  const history = useHistory();\r\n  const controller = useController();\r\n  const phrases = controller.wallet.generatePhrase();\r\n\r\n  const [orgList, setOrgList] = useState<Array<string>>(\r\n    shuffle((phrases || '').split(' '))\r\n  );\r\n\r\n  const [newList, setNewList] = useState<Array<string>>([]);\r\n  const [passed, setPassed] = useState<boolean>(false);\r\n\r\n  // const isNotEqualArrays = useMemo((): boolean => {\r\n  //   if (!phrases) return true;\r\n  //   return !isEqual(phrases.split(' '), newList);\r\n  // }, [phrases, newList]);\r\n\r\n  const handleOrgPhrase = (idx: number) => {\r\n    const tempList = [...orgList];\r\n    setNewList([...newList, orgList[idx]]);\r\n    tempList.splice(idx, 1);\r\n    setOrgList([...tempList]);\r\n  };\r\n\r\n  const handleNewPhrase = (idx: number) => {\r\n    const tempList = [...newList];\r\n    setOrgList([...orgList, newList[idx]]);\r\n    tempList.splice(idx, 1);\r\n    setNewList([...tempList]);\r\n  };\r\n\r\n  const handleConfirm = () => {\r\n    if (!passed) {\r\n      setPassed(true);\r\n\r\n      return;\r\n    }\r\n\r\n    controller.wallet.createWallet();\r\n\r\n    history.push('/app.html');\r\n  };\r\n\r\n  return (\r\n    <Layout title=\"Confirm Recovery Phrase\" onlySection linkTo=\"/app.html\">\r\n      <div className=\"text-brand-white transition-all duration-300 ease-in-out flex justify-center items-center flex-col gap-4 mt-2\">\r\n        <>\r\n          <section className=\"flex p-4 flex-wrap box-border min-h-full transition-all duration-300 items-center justify-center gap-4 border-b border-brand-graylight w-11/12\">\r\n            {newList.map((phrase, idx) => (\r\n              <Button\r\n                className=\"px-6 text-brand-white min-w-xs h-7 text-xs flex items-center justify-center tracking-normal bg-brand-royalBlue border border-brand-royalBlue gap-4 rounded-md \"\r\n                key={idx}\r\n                type=\"button\"\r\n                onClick={() => handleNewPhrase(idx)}\r\n              >\r\n                {phrase}\r\n              </Button>\r\n            ))}\r\n          </section>\r\n          <section className=\"flex p-6 w-full flex-wrap box-border min-h-full transition-all duration-300 items-center justify-center gap-4\">\r\n            {orgList.map((phrase, idx) => (\r\n              <Button\r\n                className=\"px-2 min-w-xs h-7 font-bold text-xs leading-4 flex items-center justify-center tracking-normal bg-brand-navy p-1 border-2 border-brand-royalBlue gap-4 rounded-md text-brand-white\"\r\n                key={idx}\r\n                type=\"button\"\r\n                onClick={() => handleOrgPhrase(idx)}\r\n              >\r\n                {phrase}\r\n              </Button>\r\n            ))}\r\n          </section>\r\n          <Button\r\n            type=\"button\"\r\n            className=\"absolute bottom-12 tracking-normal text-base leading-4 py-2.5 px-12 cursor-pointer rounded-full bg-brand-navy text-brand-white border-2 border-brand-royalBlue hover:bg-brand-royalBlue hover:text-brand-navy transition-all duration-300\"\r\n            onClick={handleConfirm}\r\n          >\r\n            Validate\r\n          </Button>\r\n        </>\r\n        {passed && (\r\n          <div className=\"transition-all duration-300 ease-in-out\">\r\n            <div className=\"transition-all duration-300 ease-in-out fixed -inset-0 w-full z-0 bg-brand-darktransparent\" />\r\n\r\n            <div className=\"transition-all duration-300 ease-in-out fixed z-10 flex flex-col bg-brand-deepPink top-1/3 left-8 right-8 p-6 rounded-3xl\">\r\n              <h2 className=\"pb-4 text-brand-white border-b border-dashed border-brand-graylight w-full text-center mb-4\">\r\n                YOUR WALLET IS READY!\r\n              </h2>\r\n\r\n              <span className=\"font-light text-brand-graylight text-xs\">\r\n                You should now have your recovery phrase and your wallet\r\n                password written down for future reference.\r\n              </span>\r\n\r\n              <Button\r\n                type=\"button\"\r\n                className=\"tracking-normal text-base leading-4 py-2.5 px-12 cursor-pointer rounded-full bg-brand-deepPink text-brand-white font-light border border-brand-white hover:bg-brand-white hover:text-brand-deepPink transition-all duration-300 mt-8\"\r\n                onClick={handleConfirm}\r\n              >\r\n                Ok, let's get started\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default ConfirmPhrase;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/unauth/Phrase/ConfirmPhrase.tsx b/extension/source/containers/unauth/Phrase/ConfirmPhrase.tsx
--- a/extension/source/containers/unauth/Phrase/ConfirmPhrase.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/unauth/Phrase/ConfirmPhrase.tsx	(date 1637064704671)
@@ -8,7 +8,7 @@
 import shuffle from 'lodash/shuffle';
 // import isEqual from 'lodash/isEqual';
 
-import Layout from '../../common/Layout';
+import {Layout} from '../../common/Layout';
 
 const ConfirmPhrase = () => {
   const history = useHistory();
Index: extension/source/containers/unauth/Phrase/CreatePhrase.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { FC } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Button } from 'components/index';;\r\nimport { useController } from 'hooks/index';\r\n\r\nimport Layout from '../../common/Layout';\r\n\r\nconst CreatePhrase: FC = () => {\r\n  const history = useHistory();\r\n  const controller = useController();\r\n\r\n  const phrases = controller.wallet.generatePhrase();\r\n\r\n  const nextHandler = () => {\r\n    history.push('/create/phrase/check');\r\n  };\r\n\r\n  return (\r\n    <Layout\r\n      title=\"Recovery phrase\"\r\n      tooltipText=\"A recovery phrase is a series of 12 words in a specific order. This word combination is unique to your wallet. Make sure to have pen and paper ready so you can write it down.\"\r\n      onlySection\r\n      linkTo=\"/app.html\"\r\n    >\r\n      <div className=\"flex justify-center items-center flex-col gap-4 mt-8\">\r\n        {phrases && (\r\n          <ul className=\"list-none m-0 p-0 grid grid-cols-2 w-full gap-x-8\">\r\n            {phrases.split(' ').map((phrase: string, index: number) => (\r\n              <li\r\n                className=\"font-sans font-light text-sm leading-8 tracking-normal text-brand-graylight border-dashed border-b border-brand-graylight text-left w-32\"\r\n                key={index}\r\n              >\r\n                <span className=\"w-6 inline-block text-brand-royalBlue\">\r\n                  {String(index + 1).padStart(2, '0')} \r\n                </span>\r\n\r\n                {phrase}\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        )}\r\n        \r\n        <Button\r\n          type=\"button\"\r\n          className=\"absolute bottom-12 tracking-normal text-base leading-4 py-2.5 px-12 cursor-pointer rounded-full bg-brand-navy text-brand-white font-light border border-brand-royalBlue hover:bg-brand-royalBlue hover:text-brand-navy transition-all duration-300\"\r\n          onClick={nextHandler}\r\n        >\r\n          I've written it down\r\n        </Button>\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default CreatePhrase;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/unauth/Phrase/CreatePhrase.tsx b/extension/source/containers/unauth/Phrase/CreatePhrase.tsx
--- a/extension/source/containers/unauth/Phrase/CreatePhrase.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/unauth/Phrase/CreatePhrase.tsx	(date 1637064532422)
@@ -3,7 +3,7 @@
 import { Button } from 'components/index';;
 import { useController } from 'hooks/index';
 
-import Layout from '../../common/Layout';
+import {Layout} from '../../common/Layout';
 
 const CreatePhrase: FC = () => {
   const history = useHistory();
@@ -20,7 +20,6 @@
       title="Recovery phrase"
       tooltipText="A recovery phrase is a series of 12 words in a specific order. This word combination is unique to your wallet. Make sure to have pen and paper ready so you can write it down."
       onlySection
-      linkTo="/app.html"
     >
       <div className="flex justify-center items-center flex-col gap-4 mt-8">
         {phrases && (
Index: extension/source/hooks/useFormat.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import format from 'date-fns/format';\r\nimport currency from 'currency.js';\r\n\r\nconst getYesterday = () => {\r\n  const d = new Date();\r\n  d.setDate(d.getDate() - 1);\r\n  return d;\r\n};\r\n\r\n\r\nexport const useFormat = () => {\r\n  const ellipsis = (str: any, start = 7, end = 4) => {\r\n    if (typeof str !== 'string') {\r\n      return str;\r\n    }\r\n\r\n    return `${str.substring(0, start)}...${str.substring(\r\n      str.length - end,\r\n      str.length\r\n    )}`;\r\n  };\r\n\r\n  const formatDistanceDate = (timestamp: string) => {\r\n    const formatStyle = 'M-d-yyyy';\r\n    const today = new Date();\r\n    const yesterday = getYesterday();\r\n    const formatedDate = format(new Date(timestamp), formatStyle);\r\n\r\n    if (formatedDate === format(today, formatStyle)) return 'Today';\r\n    if (formatedDate === format(yesterday, formatStyle)) return 'Yesterday';\r\n    return formatedDate;\r\n  };\r\n\r\n  const formatNumber = (num: number, min = 4, max = 4, maxSig = 12) => {\r\n    return num.toLocaleString(navigator.language, {\r\n      minimumFractionDigits: min,\r\n      maximumFractionDigits: max,\r\n      maximumSignificantDigits: maxSig,\r\n    });\r\n  };\r\n\r\n  const formatCurrency = (number: string, precision: number) => {\r\n    if (Number(number) < 1e-6) {\r\n      number = Number(number).toFixed(precision);\r\n    }\r\n\r\n    return currency(number, { separator: ',', symbol: '', precision }).format();\r\n  };\r\n\r\n  //truncate\r\n  const formatURL = (url: string, size = 30) => {\r\n    if (url.length >= size) {\r\n      return `${url.slice(0, size)}...`;\r\n    }\r\n\r\n    return url;\r\n  };\r\n\r\n  return {\r\n    ellipsis,\r\n    formatURL,\r\n    formatCurrency,\r\n    formatNumber,\r\n    formatDistanceDate\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/hooks/useFormat.ts b/extension/source/hooks/useFormat.ts
--- a/extension/source/hooks/useFormat.ts	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/hooks/useFormat.ts	(date 1637064532430)
@@ -4,6 +4,7 @@
 const getYesterday = () => {
   const d = new Date();
   d.setDate(d.getDate() - 1);
+
   return d;
 };
 
@@ -28,6 +29,7 @@
 
     if (formatedDate === format(today, formatStyle)) return 'Today';
     if (formatedDate === format(yesterday, formatStyle)) return 'Yesterday';
+    
     return formatedDate;
   };
 
Index: extension/source/hooks/useUtils.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useHistory } from 'react-router-dom';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { useAlert } from 'react-alert';\r\n\r\nexport const useUtils = () => {\r\n  const useSettingsView = () => {\r\n    const history = useHistory();\r\n  \r\n    return useCallback((view) => {\r\n      history.push(view);\r\n    }, []);\r\n  }\r\n\r\n  const useCopyClipboard = (\r\n    timeout = 1000\r\n  ): [boolean, (toCopy: string) => void] => {\r\n    const [isCopied, setIsCopied] = useState<boolean>(false);\r\n  \r\n    const staticCopy = useCallback(async (text) => {\r\n      await navigator.clipboard.writeText(text);\r\n      setIsCopied(true);\r\n    }, []);\r\n  \r\n    useEffect(() => {\r\n      if (isCopied) {\r\n        const hide = setTimeout(() => {\r\n          setIsCopied(false);\r\n        }, timeout);\r\n  \r\n        return () => {\r\n          clearTimeout(hide);\r\n        };\r\n      }\r\n      return undefined;\r\n    }, [isCopied, setIsCopied, timeout]);\r\n  \r\n    return [isCopied, staticCopy];\r\n  }\r\n\r\n  const alert = useAlert();\r\n\r\n  return {\r\n    useSettingsView,\r\n    useCopyClipboard,\r\n    alert\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/hooks/useUtils.ts b/extension/source/hooks/useUtils.ts
--- a/extension/source/hooks/useUtils.ts	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/hooks/useUtils.ts	(date 1637064532436)
@@ -39,9 +39,18 @@
 
   const alert = useAlert();
 
+  const getHost = (url: string) => {
+    if (typeof url === 'string' && url !== '') {
+      return new URL(url).host;
+    }
+  
+    return url;
+  };
+
   return {
     useSettingsView,
     useCopyClipboard,
-    alert
+    alert,
+    getHost
   }
 }
\ No newline at end of file
Index: extension/source/containers/common/Layout/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export { default } from './Layout';\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/common/Layout/index.tsx b/extension/source/containers/common/Layout/index.tsx
--- a/extension/source/containers/common/Layout/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/common/Layout/index.tsx	(date 1637064532421)
@@ -1,1 +1,2 @@
-export { default } from './Layout';
+export * from './Layout';
+export * from './AuthViewLayout';
Index: extension/source/containers/common/Layout/Layout.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { ReactNode, FC } from 'react';\r\nimport Header from 'containers/common/Header';\r\nimport { Tooltip } from 'antd';\r\nimport { Icon } from 'components/index';\r\n\r\n\r\ninterface ILayout {\r\n  children: ReactNode;\r\n  linkTo?: string;\r\n  showLogo?: boolean;\r\n  title: string;\r\n  importSeed?: boolean;\r\n  onlySection?: boolean;\r\n  accountHeader?: boolean;\r\n  normalHeader?: boolean;\r\n  tooltipText?: string;\r\n}\r\n\r\nconst Layout: FC<ILayout> = ({\r\n  title,\r\n  // linkTo = '#',\r\n  // showLogo = false,\r\n  children,\r\n  // importSeed = false,\r\n  onlySection = false,\r\n  accountHeader = false,\r\n  normalHeader = false,\r\n  tooltipText = '',\r\n}) => {\r\n  \r\n  return (\r\n    <div className=\"flex flex-col justify-center items-center\">\r\n\r\n      <Header\r\n        onlySection={onlySection}\r\n        accountHeader={accountHeader}\r\n        normalHeader={normalHeader}\r\n      />\r\n\r\n      <section>\r\n        {tooltipText ? (\r\n          <div className=\"flex justify-center items-center gap-2\">\r\n            <span className=\"text-brand-royalBlue font-bold text-xl text-center tracking-normal\">{title}</span>\r\n\r\n            <Tooltip placement=\"bottom\" title={tooltipText}>\r\n              <Icon name=\"question\" className=\"text-brand-graylight w-4\" />\r\n            </Tooltip>\r\n          </div>\r\n\r\n        ) : (\r\n          <span className=\"text-brand-royalBlue font-bold text-xl text-center tracking-normal\">{title}</span>\r\n        )}\r\n\r\n      </section>\r\n      <section >{children}</section>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/common/Layout/Layout.tsx b/extension/source/containers/common/Layout/Layout.tsx
--- a/extension/source/containers/common/Layout/Layout.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/common/Layout/Layout.tsx	(date 1637064532554)
@@ -6,8 +6,6 @@
 
 interface ILayout {
   children: ReactNode;
-  linkTo?: string;
-  showLogo?: boolean;
   title: string;
   importSeed?: boolean;
   onlySection?: boolean;
@@ -16,12 +14,9 @@
   tooltipText?: string;
 }
 
-const Layout: FC<ILayout> = ({
+export const Layout: FC<ILayout> = ({
   title,
-  // linkTo = '#',
-  // showLogo = false,
   children,
-  // importSeed = false,
   onlySection = false,
   accountHeader = false,
   normalHeader = false,
@@ -56,5 +51,3 @@
     </div>
   );
 };
-
-export default Layout;
Index: extension/source/containers/common/Import/ImportPhrase.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { FC } from 'react';\r\nimport Layout from 'containers/common/Layout';\r\nimport { Button } from 'components/index';;\r\nimport { useController } from 'hooks/index';\r\nimport { Form, Input } from 'antd';\r\n\r\ninterface IImportPhrase {\r\n  onRegister: () => void;\r\n}\r\n\r\nconst ImportPhrase: FC<IImportPhrase> = ({ onRegister }) => {\r\n  const controller = useController();\r\n\r\n  const onSubmit = (data: any) => {\r\n    if (controller.wallet.importPhrase(data.phrase)) {\r\n      onRegister();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout onlySection title=\"Import wallet\" >\r\n      <Form\r\n        name=\"import\"\r\n        labelCol={{ span: 8 }}\r\n        wrapperCol={{ span: 8 }}\r\n        initialValues={{ remember: true }}\r\n        onFinish={onSubmit}\r\n        autoComplete=\"off\"\r\n        className=\"flex items-center flex-col gap-4 mt-8 \"\r\n      >\r\n        \r\n        <Form.Item\r\n          name=\"phrase\"\r\n          className=\"text-blue\"\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: ''\r\n            },\r\n            ({ }) => ({\r\n              validator(_, value) {\r\n                if (controller.wallet.importPhrase(value)) {\r\n                  return Promise.resolve();\r\n                }\r\n\r\n                return Promise.reject('Seed phrase is not valid');\r\n              },\r\n            }),\r\n          ]}\r\n        >\r\n          <Input.TextArea\r\n            autoSize={{ minRows: 3, maxRows: 5 }}\r\n            placeholder=\"Paste your wallet seed phrase\"\r\n            className=\"text-xs w-72 h-28 rounded p-2 pl-4 bg-brand-navydarker border border-brand-navymedium text-brand-royalBluemedium outline-none focus:border-brand-navylight\"\r\n          />\r\n        </Form.Item>\r\n\r\n        <span className=\"font-light text-brand-royalBluemedium text-xs mx-12 mt-2\">\r\n          Importing your wallet seed automatically import a wallet associated with this seed phrase.\r\n        </span>\r\n\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          className=\"absolute bottom-12 tracking-normal text-base leading-4 py-2.5 px-12 cursor-pointer rounded-full bg-brand-navy text-brand-white font-light border border-brand-royalBlue hover:bg-brand-royalBlue hover:text-brand-navy transition-all duration-300\"\r\n        >\r\n          Next\r\n        </Button>\r\n      </Form>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default ImportPhrase;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/common/Import/ImportPhrase.tsx b/extension/source/containers/common/Import/ImportPhrase.tsx
--- a/extension/source/containers/common/Import/ImportPhrase.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/common/Import/ImportPhrase.tsx	(date 1637064532565)
@@ -1,5 +1,5 @@
 import React, { FC } from 'react';
-import Layout from 'containers/common/Layout';
+import {Layout} from 'containers/common/Layout';
 import { Button } from 'components/index';;
 import { useController } from 'hooks/index';
 import { Form, Input } from 'antd';
Index: extension/source/containers/common/Import/CreatePass.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from 'react';  \r\nimport { useController, useStore } from 'hooks/index';\r\nimport { Form, Input } from 'antd';\r\nimport { Button } from 'components/index';;\r\nimport Layout from '../../common/Layout';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst CreatePass = () => {\r\n  const controller = useController();\r\n  const history = useHistory();\r\n\r\n  const { canConnect } = useStore()\r\n\r\n  const [passed, setPassed] = useState<boolean>(false);\r\n\r\n  const nextHandler = () => {\r\n    if (passed) {\r\n      controller.wallet.createWallet(true);\r\n\r\n      if (canConnect) {\r\n        history.push('/connect-wallet');\r\n      } else {\r\n        history.push('/home');\r\n      }\r\n    }\r\n  };\r\n\r\n  const onSubmit = (data: any) => {\r\n    controller.wallet.setWalletPassword(data.password);\r\n    setPassed(true);\r\n  };\r\n\r\n  return (\r\n    <Layout\r\n      title=\"Password\"\r\n      onlySection\r\n      linkTo=\"/app.html\"\r\n    >\r\n      <Form\r\n        name=\"basic\"\r\n        labelCol={{ span: 8 }}\r\n        wrapperCol={{ span: 8 }}\r\n        initialValues={{ remember: true }}\r\n        onFinish={onSubmit}\r\n        autoComplete=\"off\"\r\n        className=\"flex justify-center items-center flex-col gap-4 mt-8 text-center\"\r\n      >\r\n        <Form.Item\r\n          name=\"password\"\r\n          hasFeedback\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: ''\r\n            },\r\n            {\r\n              pattern: /^(?=.*[a-z])(?=.*[0-9])(?=.{8,})/,\r\n              message: ''\r\n            }\r\n          ]}\r\n        >\r\n          <Input.Password placeholder=\"New password (min 8 chars)\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"repassword\"\r\n          dependencies={['password']}\r\n          hasFeedback\r\n          rules={[\r\n            {\r\n              required: true,\r\n              message: ''\r\n            },\r\n            ({ getFieldValue }) => ({\r\n              validator(_, value) {\r\n                if (!value || getFieldValue('password') === value) {\r\n                  return Promise.resolve();\r\n                }\r\n\r\n                return Promise.reject('');\r\n              },\r\n            }),\r\n          ]}\r\n        >\r\n          <Input.Password placeholder=\"Confirm password\" />\r\n        </Form.Item>\r\n\r\n        <span className=\"font-light text-brand-graylight text-xs\">\r\n          At least 8 characters, 1 lower-case and 1 numeral.\r\n        </span>\r\n\r\n        <span className=\"font-light text-brand-royalBlue text-xs mx-4\">\r\n          Do not forget to save your password. You will need this password to unlock your wallet.\r\n        </span>\r\n\r\n        <Button\r\n          type={passed ? 'button' : 'submit'}\r\n          onClick={nextHandler}\r\n          className=\"absolute bottom-12 tracking-normal text-base leading-4 py-2.5 px-12 cursor-pointer rounded-full bg-brand-navy text-brand-white font-light border border-brand-royalBlue hover:bg-brand-royalBlue hover:text-brand-navy transition-all duration-300\"\r\n        >\r\n          Next\r\n        </Button>\r\n      </Form>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default CreatePass;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/common/Import/CreatePass.tsx b/extension/source/containers/common/Import/CreatePass.tsx
--- a/extension/source/containers/common/Import/CreatePass.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/common/Import/CreatePass.tsx	(date 1637064532419)
@@ -2,7 +2,7 @@
 import { useController, useStore } from 'hooks/index';
 import { Form, Input } from 'antd';
 import { Button } from 'components/index';;
-import Layout from '../../common/Layout';
+import {Layout} from '../../common/Layout';
 import { useHistory } from 'react-router-dom';
 
 const CreatePass = () => {
@@ -34,7 +34,6 @@
     <Layout
       title="Password"
       onlySection
-      linkTo="/app.html"
     >
       <Form
         name="basic"
Index: extension/source/containers/common/Header/AccountHeader.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { FC } from 'react';\r\nimport LogoImage from 'assets/images/logo-s.svg';\r\nimport { Icon, IconButton } from 'components/index';\r\nimport Settings from 'containers/auth/Settings';\r\n\r\ninterface IAccountHeader {\r\n  encriptedMnemonic: string;\r\n  importSeed: boolean;\r\n  accountSettingsShowed: boolean;\r\n  handleCloseSettings: any;\r\n  showSettings: any;\r\n  isUnlocked: boolean;\r\n}\r\n\r\nconst AccountHeader: FC <IAccountHeader> = ({\r\n  encriptedMnemonic,\r\n  importSeed,\r\n  accountSettingsShowed,\r\n  handleCloseSettings,\r\n  showSettings,\r\n  isUnlocked\r\n}) => {\r\n  return (\r\n    <div className=\"flex justify-between items-center bg-brand-navyborder\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <img src={`/${LogoImage}`} className=\"mx-auto w-14 rounded-full\" alt=\"Syscoin\" />\r\n\r\n        <div className=\"flex justify-start flex-col text-brand-white\">\r\n          <p className=\"text-base\">Account 1</p>\r\n          <small className=\"text-xs\">0x0000....0000000000000</small>\r\n        </div>\r\n      </div>\r\n\r\n\r\n      {encriptedMnemonic && !importSeed ? (\r\n        <IconButton\r\n          type=\"primary\"\r\n          shape=\"circle\"\r\n          className=\"bg-brand-navyborder\"\r\n          onClick={() => {\r\n            console.log('accountSettingsShowed', accountSettingsShowed)\r\n            accountSettingsShowed ? handleCloseSettings() : showSettings(!accountSettingsShowed)\r\n          }\r\n          }\r\n        >\r\n          <Icon name=\"dots\" className=\"w-4 text-brand-white\" />\r\n        </IconButton>\r\n      ) : (\r\n        null\r\n      )}\r\n\r\n      <Settings\r\n        accountSettings\r\n        generalSettings={false}\r\n        open={accountSettingsShowed && isUnlocked}\r\n        onClose={handleCloseSettings}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AccountHeader;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/common/Header/AccountHeader.tsx b/extension/source/containers/common/Header/AccountHeader.tsx
--- a/extension/source/containers/common/Header/AccountHeader.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/common/Header/AccountHeader.tsx	(date 1637064532579)
@@ -1,7 +1,7 @@
 import React, { FC } from 'react';
 import LogoImage from 'assets/images/logo-s.svg';
 import { Icon, IconButton } from 'components/index';
-import Settings from 'containers/auth/Settings';
+import { Settings } from 'containers/auth/index';
 
 interface IAccountHeader {
   encriptedMnemonic: string;
Index: extension/source/containers/common/Header/NormalHeader.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { FC, useEffect, useState, ChangeEvent } from 'react';\r\nimport { Modal, Select } from 'components/index';\r\nimport Settings from 'containers/auth/Settings';\r\nimport { SYS_NETWORK } from 'constants/index';\r\nimport { getHost } from '../../../scripts/Background/helpers';\r\nimport { browser } from 'webextension-polyfill-ts';\r\nimport { useController, useStore } from 'hooks/index';\r\nimport { SettingOutlined } from '@ant-design/icons';\r\n\r\ninterface INormalHeader {\r\n  importSeed: boolean;\r\n  generalSettingsShowed: boolean;\r\n  handleCloseSettings: any;\r\n  showSettings: any;\r\n  isUnlocked: boolean;\r\n  encriptedMnemonic: string;\r\n}\r\n\r\nconst NormalHeader: FC<INormalHeader> = ({\r\n  importSeed,\r\n  generalSettingsShowed,\r\n  handleCloseSettings,\r\n  showSettings,\r\n  isUnlocked,\r\n  encriptedMnemonic\r\n}) => {\r\n  const {\r\n    accounts,\r\n    activeAccountId,\r\n    currentURL,\r\n    activeNetwork\r\n  } = useStore();\r\n\r\n  const network = activeNetwork;\r\n\r\n  const [currentTabURL, setCurrentTabURL] = useState<string>(currentURL);\r\n  const [isOpenModal, setIsOpenModal] = useState<boolean>(false);\r\n  const [isConnected, setIsConnected] = useState<boolean>(false);\r\n\r\n  const controller = useController();\r\n\r\n  const handleSetModalIsOpen = () => {\r\n    setIsOpenModal(!isOpenModal);\r\n  };\r\n\r\n  const handleChangeNetwork = (\r\n    event: ChangeEvent<{\r\n      name?: string | undefined;\r\n      value: unknown;\r\n    }>\r\n  ) => {\r\n    controller.wallet.switchNetwork(event.target.value as string);\r\n    controller.wallet.getNewAddress();\r\n  };\r\n\r\n  useEffect(() => {\r\n    browser.windows.getAll({ populate: true }).then((windows) => {\r\n      for (const window of windows) {\r\n        const views = browser.extension.getViews({ windowId: window.id });\r\n\r\n        if (views) {\r\n          browser.tabs\r\n            .query({ active: true, currentWindow: true })\r\n            .then((tabs) => {\r\n              setCurrentTabURL(String(tabs[0].url));\r\n            });\r\n\r\n          return;\r\n        }\r\n      }\r\n    });\r\n  }, [!controller.wallet.isLocked()]);\r\n\r\n  useEffect(() => {\r\n    const acc = accounts.find((element) => element.id === activeAccountId);\r\n\r\n    if (acc && acc.connectedTo !== undefined) {\r\n      if (acc.connectedTo.length > 0) {\r\n        setIsConnected(\r\n          acc.connectedTo.findIndex((url: any) => {\r\n            return url == getHost(currentTabURL);\r\n          }) > -1\r\n        );\r\n        return;\r\n      }\r\n\r\n      setIsConnected(false);\r\n    }\r\n  }, [accounts, activeAccountId, currentTabURL]);\r\n\r\n  return (\r\n    <div className=\"flex justify-between items-center bg-brand-navydarker text-gray-300 p-2\">\r\n      <Select\r\n        value={network || SYS_NETWORK.main.id}\r\n        className=\"bg-brand-navydarker text-gray-300\"\r\n        onChange={handleChangeNetwork}\r\n        options={[\r\n          { [SYS_NETWORK.main.id]: SYS_NETWORK.main.label },\r\n          { [SYS_NETWORK.testnet.id]: SYS_NETWORK.testnet.label },\r\n        ]}\r\n      />\r\n\r\n      {isConnected ? (\r\n        <small\r\n          onClick={() => setIsOpenModal(!isOpenModal)}\r\n        >\r\n          Connected\r\n        </small>\r\n      ) : (\r\n        <small\r\n          onClick={() => setIsOpenModal(!isOpenModal)}\r\n        >\r\n          Not connected\r\n        </small>\r\n      )}\r\n\r\n      {isOpenModal && (\r\n        <div\r\n          onClick={() => setIsOpenModal(false)}\r\n        />\r\n      )}\r\n\r\n      {isOpenModal && isConnected && (\r\n        <Modal\r\n          title={currentTabURL}\r\n          connected\r\n          callback={handleSetModalIsOpen}\r\n        />\r\n      )}\r\n\r\n      {isOpenModal && !isConnected && (\r\n        <Modal\r\n          title={currentTabURL}\r\n          message=\"This account is not connected to this site. To connect to a sys platform site, find the connect button on their site.\"\r\n          callback={handleSetModalIsOpen}\r\n        />\r\n      )}\r\n\r\n      {encriptedMnemonic && !importSeed ? (\r\n\r\n        <button onClick={() => {\r\n          console.log('generalSettingsShowed', generalSettingsShowed)\r\n          generalSettingsShowed ? handleCloseSettings() : showSettings(!generalSettingsShowed)}}\r\n          >\r\n            <SettingOutlined />\r\n        </button>\r\n      ) : (\r\n        null\r\n      )}\r\n\r\n      <Settings\r\n        accountSettings={false}\r\n        generalSettings\r\n        open={generalSettingsShowed && isUnlocked}\r\n        onClose={handleCloseSettings}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NormalHeader;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/common/Header/NormalHeader.tsx b/extension/source/containers/common/Header/NormalHeader.tsx
--- a/extension/source/containers/common/Header/NormalHeader.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/common/Header/NormalHeader.tsx	(date 1637064811729)
@@ -2,7 +2,6 @@
 import { Modal, Select } from 'components/index';
 import Settings from 'containers/auth/Settings';
 import { SYS_NETWORK } from 'constants/index';
-import { getHost } from '../../../scripts/Background/helpers';
 import { browser } from 'webextension-polyfill-ts';
 import { useController, useStore } from 'hooks/index';
 import { SettingOutlined } from '@ant-design/icons';
@@ -31,6 +30,8 @@
     activeNetwork
   } = useStore();
 
+  const { getHost } = useUtils();
+
   const network = activeNetwork;
 
   const [currentTabURL, setCurrentTabURL] = useState<string>(currentURL);
Index: extension/source/components/Modal/Modal.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { FC } from 'react';\r\nimport { browser } from 'webextension-polyfill-ts';\r\nimport { useStore } from 'hooks/index';\r\n\r\nimport { getHost } from '../../scripts/Background/helpers';\r\nimport { ellipsis, formatURL } from '../../containers/auth/helpers';\r\n\r\ninterface IModal {\r\n  callback?: any;\r\n  connected?: boolean;\r\n  message?: any;\r\n  title: any;\r\n}\r\n\r\nexport const Modal: FC<IModal> = ({ title, message, connected, callback }) => {\r\n  const { accounts } = useStore();\r\n  \r\n  const handleDisconnect = (id: number) => {\r\n    browser.runtime.sendMessage({\r\n      type: 'RESET_CONNECTION_INFO',\r\n      target: 'background',\r\n      id,\r\n      url: title,\r\n    });\r\n  };\r\n\r\n  const connectedAccounts = accounts.filter((account) => {\r\n    return account.connectedTo.find((url: any) => url === getHost(title));\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <small>{formatURL(title)}</small>\r\n\r\n        {connected && (\r\n          <small>\r\n            You have {connectedAccounts.length} account connected to this site\r\n          </small>\r\n        )}\r\n      </div>\r\n\r\n      <p>{message}</p>\r\n\r\n      {!connected && (\r\n        <div>\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => callback()\r\n          }>\r\n            Close\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {connected && (\r\n        <div>\r\n          {connectedAccounts.map((item) => {\r\n            return (\r\n              <div key={item.id}>\r\n                <div >\r\n                  <p>{item.label}</p>\r\n                  <small>{ellipsis(item.address.main)}</small>\r\n                </div>\r\n\r\n                <svg\r\n                  onClick={() => handleDisconnect(item.id)}\r\n                  width=\"13\"\r\n                  height=\"16\"\r\n                  viewBox=\"0 0 13 16\"\r\n                  fill=\"none\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                >\r\n                  <path\r\n                    d=\"M12.3077 0.888889H9.23077L8.35165 0H3.95604L3.07692 0.888889H0V2.66667H12.3077V0.888889ZM0.879121 3.55556V14.2222C0.879121 15.2 1.67033 16 2.63736 16H9.67033C10.6374 16 11.4286 15.2 11.4286 14.2222V3.55556H0.879121ZM7.91209 9.77778V13.3333H4.3956V9.77778H2.63736L6.15385 6.22222L9.67033 9.77778H7.91209Z\"\r\n                    fill=\"#4ca1cf\"\r\n                  />\r\n                </svg>\r\n              </div>\r\n            );\r\n          })}\r\n\r\n          <div>\r\n            <p>Permissions</p>\r\n\r\n            <div>\r\n              <input\r\n                disabled\r\n                type=\"checkbox\"\r\n                name=\"permission\"\r\n                id=\"permission\"\r\n                checked\r\n              />\r\n              <small>View the adresses of your permitted accounts.</small>\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => callback()\r\n            }>\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/components/Modal/Modal.tsx b/extension/source/components/Modal/Modal.tsx
--- a/extension/source/components/Modal/Modal.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/components/Modal/Modal.tsx	(date 1637064532341)
@@ -1,9 +1,5 @@
 import React, { FC } from 'react';
-import { browser } from 'webextension-polyfill-ts';
-import { useStore } from 'hooks/index';
-
-import { getHost } from '../../scripts/Background/helpers';
-import { ellipsis, formatURL } from '../../containers/auth/helpers';
+import { useFormat, useUtils, useBrowser, useStore } from 'hooks/index';
 
 interface IModal {
   callback?: any;
@@ -14,6 +10,9 @@
 
 export const Modal: FC<IModal> = ({ title, message, connected, callback }) => {
   const { accounts } = useStore();
+  const { ellipsis, formatURL } = useFormat();
+  const { getHost } = useUtils();
+  const { browser } = useBrowser();
   
   const handleDisconnect = (id: number) => {
     browser.runtime.sendMessage({
Index: extension/source/hooks/usePopup.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export {}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/hooks/usePopup.ts b/extension/source/hooks/usePopup.ts
--- a/extension/source/hooks/usePopup.ts	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/hooks/usePopup.ts	(date 1637064532433)
@@ -1,1 +1,16 @@
-export {}
\ No newline at end of file
+import { useBrowser } from 'hooks/index';
+
+export const usePopup = () => {
+  const { browser } = useBrowser();
+
+  const closePopup = async () => {
+    await browser.runtime.sendMessage({
+      type: 'CLOSE_POPUP',
+      target: 'background',
+    });
+  }
+
+  return {
+    closePopup,
+  }
+}
\ No newline at end of file
Index: extension/source/hooks/useBrowser.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export {}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/hooks/useBrowser.ts b/extension/source/hooks/useBrowser.ts
--- a/extension/source/hooks/useBrowser.ts	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/hooks/useBrowser.ts	(date 1637064532427)
@@ -1,1 +1,7 @@
-export {}
\ No newline at end of file
+import { browser } from 'webextension-polyfill-ts';
+
+export const useBrowser = () => {
+  return {
+    browser,
+  }
+}
\ No newline at end of file
Index: extension/manifest.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"manifest_version\": 2,\r\n  \"name\": \"Pali Wallet\",\r\n  \"version\": \"1.0.10\",\r\n  \"icons\": {\r\n    \"16\": \"assets/icons/favicon-16.png\",\r\n    \"32\": \"assets/icons/favicon-32.png\",\r\n    \"48\": \"assets/icons/favicon-48.png\",\r\n    \"128\": \"assets/icons/favicon-128.png\"\r\n  },\r\n  \"description\": \"Extension wallet for SYS blockchain.\",\r\n  \"short_name\": \"pali\",\r\n  \"permissions\": [\r\n    \"http://*/*\",\r\n    \"https://*/*\",\r\n    \"*://connect.trezor.io/8/*\",\r\n    \"https://localhost:8088/\",\r\n    \"tabs\",\r\n    \"storage\",\r\n    \"notifications\",\r\n    \"management\"\r\n  ],\r\n  \"content_security_policy\": \"script-src 'self'; object-src 'self'\",\r\n  \"__chrome|firefox__author\": \"Pollum Sys Teams\",\r\n  \"__opera__developer\": {\r\n    \"name\": \"pollum labs\"\r\n  },\r\n  \"__firefox__applications\": {\r\n    \"gecko\": {\r\n      \"id\": \"{b3e96b5f-b5bf-8b48-846b-52f430365e80}\"\r\n    }\r\n  },\r\n  \"__chrome__minimum_chrome_version\": \"49\",\r\n  \"__opera__minimum_opera_version\": \"36\",\r\n  \"browser_action\": {\r\n    \"default_popup\": \"app.html\",\r\n    \"default_icon\": {\r\n      \"16\": \"assets/icons/favicon-16.png\",\r\n      \"32\": \"assets/icons/favicon-32.png\",\r\n      \"48\": \"assets/icons/favicon-48.png\",\r\n      \"128\": \"assets/icons/favicon-128.png\"\r\n    },\r\n    \"default_title\": \"Pali Wallet\",\r\n    \"__chrome|opera__chrome_style\": false,\r\n    \"__firefox__browser_style\": false\r\n  },\r\n  \"__chrome|opera__options_page\": \"options.html\",\r\n  \"options_ui\": {\r\n    \"page\": \"options.html\",\r\n    \"open_in_tab\": true,\r\n    \"__chrome__chrome_style\": false\r\n  },\r\n  \"background\": {\r\n    \"scripts\": [\r\n      \"js/webextension.bundle.js\",\r\n      \"js/background.bundle.js\"\r\n    ],\r\n    \"__chrome|opera__persistent\": false\r\n  },\r\n  \"content_scripts\": [\r\n    {\r\n      \"matches\": [\r\n        \"http://*/*\",\r\n        \"https://*/*\"\r\n      ],\r\n      \"run_at\": \"document_start\",\r\n      \"js\": [\r\n        \"js/webextension.bundle.js\",\r\n        \"js/contentScript.bundle.js\"\r\n      ]\r\n    },\r\n    {\r\n      \"matches\": [\r\n        \"*://connect.trezor.io/8/popup.html\",\r\n        \"https://localhost:8088/*\"\r\n      ],\r\n      \"js\": [\r\n        \"js/webextension.bundle.js\",\r\n        \"js/trezorScript.bundle.js\"\r\n      ]\r\n    }\r\n  ],\r\n  \"web_accessible_resources\": [\r\n    \"app.html\",\r\n    \"inpage.ts\",\r\n    \"js/inpage.bundle.js\"\r\n  ],\r\n  \"commands\": {\r\n    \"_execute_browser_action\": {\r\n      \"suggested_key\": {\r\n        \"default\": \"Ctrl+Shift+Y\"\r\n      }\r\n    }\r\n  }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/manifest.json b/extension/manifest.json
--- a/extension/manifest.json	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/manifest.json	(date 1637064532272)
@@ -17,8 +17,7 @@
     "https://localhost:8088/",
     "tabs",
     "storage",
-    "notifications",
-    "management"
+    "notifications"
   ],
   "content_security_policy": "script-src 'self'; object-src 'self'",
   "__chrome|firefox__author": "Pollum Sys Teams",
@@ -55,7 +54,7 @@
       "js/webextension.bundle.js",
       "js/background.bundle.js"
     ],
-    "__chrome|opera__persistent": false
+    "__chrome|opera__persistent": true
   },
   "content_scripts": [
     {
Index: extension/yarn.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/yarn.lock b/extension/yarn.lock
--- a/extension/yarn.lock	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/yarn.lock	(date 1637064532457)
@@ -2733,9 +2733,9 @@
   dependencies:
     nanoassert "^1.0.0"
 
-"blake2b@git+https://github.com/BitGo/blake2b.git#6268e6dd678661e0acc4359e9171b97eb1ebf8ac":
+"blake2b@https://github.com/BitGo/blake2b#6268e6dd678661e0acc4359e9171b97eb1ebf8ac":
   version "2.1.3"
-  resolved "git+https://github.com/BitGo/blake2b.git#6268e6dd678661e0acc4359e9171b97eb1ebf8ac"
+  resolved "https://github.com/BitGo/blake2b#6268e6dd678661e0acc4359e9171b97eb1ebf8ac"
   dependencies:
     blake2b-wasm "https://github.com/BitGo/blake2b-wasm#193cdb71656c1a6c7f89b05d0327bb9b758d071b"
     nanoassert "^1.0.0"
Index: extension/source/containers/auth/Settings/views/ConnectHardwareWalletView/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { FC, useState } from 'react';\r\nimport { Button } from 'components/index';;\r\nimport { useController } from 'hooks/index';\r\nimport TutorialPanel from './TutorialPanel';\r\nimport ViewLayout from '../Layout';\r\n\r\nconst ConnectHardwareWalletView: FC = () => {\r\n  const [selected, setSelected] = useState<boolean>(false);\r\n  const controller = useController();\r\n\r\n  const onclick = async () => {\r\n    controller.wallet.createHardwareWallet();\r\n  };\r\n\r\n  return (\r\n    <ViewLayout title=\"CONNECT HARDWARE WALLET\">\r\n      <div\r\n      >\r\n        <span>\r\n          Select a hardware wallet you'd like to use with Pali Wallet\r\n        </span>\r\n\r\n        <div>\r\n          <div\r\n            onClick={() => setSelected(!selected)}\r\n          >\r\n            Trezor\r\n          </div>\r\n        </div>\r\n\r\n        <span>Don't have a hardware wallet?</span>\r\n        <span>\r\n          Order a Trezor wallet and keep your funds in cold storage.\r\n        </span>\r\n\r\n        <a href=\"https://trezor.io/\" target=\"_blank\" rel=\"noreferrer\">\r\n          Buy now\r\n        </a>\r\n\r\n        <Button\r\n          type=\"submit\"\r\n          onClick={onclick}\r\n        >\r\n          Connect\r\n        </Button>\r\n\r\n        <TutorialPanel />\r\n      </div>\r\n    </ViewLayout>\r\n  );\r\n};\r\n\r\nexport default ConnectHardwareWalletView;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Settings/views/ConnectHardwareWalletView/index.tsx b/extension/source/containers/auth/Settings/views/ConnectHardwareWalletView/index.tsx
--- a/extension/source/containers/auth/Settings/views/ConnectHardwareWalletView/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Settings/views/ConnectHardwareWalletView/index.tsx	(date 1637064532368)
@@ -2,7 +2,7 @@
 import { Button } from 'components/index';;
 import { useController } from 'hooks/index';
 import TutorialPanel from './TutorialPanel';
-import ViewLayout from '../Layout';
+import { AuthViewLayout } from 'containers/common/Layout';
 
 const ConnectHardwareWalletView: FC = () => {
   const [selected, setSelected] = useState<boolean>(false);
@@ -13,7 +13,7 @@
   };
 
   return (
-    <ViewLayout title="CONNECT HARDWARE WALLET">
+    <AuthViewLayout title="CONNECT HARDWARE WALLET">
       <div
       >
         <span>
@@ -46,7 +46,7 @@
 
         <TutorialPanel />
       </div>
-    </ViewLayout>
+    </AuthViewLayout>
   );
 };
 
Index: extension/source/scripts/Background/controllers/AccountController.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* eslint-disable */\r\nimport { sys } from 'constants/index';\r\nimport store from 'state/store';\r\nimport IWalletState, { IAccountState } from 'state/wallet/types';\r\nimport { bech32 } from 'bech32';\r\nimport { fromZPub } from 'bip84';\r\nimport {\r\n  createAccount,\r\n  updateStatus,\r\n  updateAccount,\r\n  updateLabel,\r\n  updateTransactions,\r\n  updateAccountAddress,\r\n  updateAccountXpub,\r\n  updateSwitchNetwork,\r\n  updateAllTokens,\r\n  setTimer\r\n} from 'state/wallet';\r\n\r\nimport {\r\n  IAccountInfo,\r\n  ITransactionInfo,\r\n  Transaction,\r\n  Assets,\r\n  ISPTInfo,\r\n  ISPTIssue,\r\n  INFTIssue,\r\n  ISPTPageInfo,\r\n  ISPTWalletInfo,\r\n  INFTPageInfo,\r\n  INFTWalletInfo,\r\n  ISPTIssuePage,\r\n  ISPTIssueWallet,\r\n  UpdateTokenPageInfo,\r\n  UpdateTokenWalletInfo\r\n} from '../../types';\r\nimport CryptoJS from 'crypto-js';\r\n// import axios from 'axios';\r\n\r\nconst syscointx = require('syscointx-js');\r\nconst { each } = require('neo-async');\r\n\r\nconst AccountController = (actions: {\r\n  checkPassword: (pwd: string) => boolean;\r\n}): IAccountController => {\r\n  let intervalId: any;\r\n  let account: IAccountState;\r\n  let tempTx: ITransactionInfo | null;\r\n  let sysjs: any;\r\n  let newSPT: ISPTInfo | null;\r\n  let mintSPT: ISPTIssue | null;\r\n  let updateAssetItem: any | null;\r\n  let transferOwnershipData: any;\r\n  let mintNFT: INFTIssue | null;\r\n  let dataFromPageToCreateSPT: ISPTPageInfo;\r\n  let dataFromWalletToCreateSPT: ISPTWalletInfo;\r\n  let dataFromPageToMintSPT: ISPTIssuePage;\r\n  let dataFromWalletToMintSPT: ISPTIssueWallet;\r\n  let dataFromPageToMintNFT: INFTPageInfo;\r\n  let dataFromWalletToMintNFT: INFTWalletInfo;\r\n  let dataFromWalletToUpdateAsset: UpdateTokenWalletInfo;\r\n  let dataFromPageToUpdateAsset: UpdateTokenPageInfo;\r\n  let dataFromWalletToTransferOwnership: any;\r\n  let dataFromPageToTransferOwnership: any;\r\n  let dataFromPageToIssueNFT: any;\r\n  let dataFromWalletToIssueNFT: any;\r\n  let resAddress: any;\r\n  let encode: any;\r\n  let currentPSBT: any;\r\n  let TrezorSigner: any;\r\n  let currentPsbtToSign: any;\r\n  let issueNFTItem: any | null;\r\n\r\n  const getConnectedAccount = (): IAccountState => {\r\n    const { accounts, tabs }: IWalletState = store.getState().wallet;\r\n    const { currentURL } = tabs;\r\n\r\n    return accounts.find((account: IAccountState) => {\r\n      return account.connectedTo.find((url: string) => {\r\n        return url == new URL(currentURL).host;\r\n      });\r\n    }) as IAccountState;\r\n  };\r\n\r\n  const _coventPendingType = (txid: string) => {\r\n    return {\r\n      txid,\r\n      value: 0,\r\n      confirmations: 0,\r\n      fees: 0,\r\n      blockTime: Date.now() / 1e3,\r\n    } as Transaction;\r\n  };\r\n\r\n  const updateTransactionData = (item: string, txinfo: any) => {\r\n    const transactionItem = store.getState().wallet[item];\r\n    const transactions = transactionItem ? getConnectedAccount().transactions : account.transactions;\r\n\r\n    store.dispatch(\r\n      updateTransactions({\r\n        id: transactionItem ? getConnectedAccount().id : account.id,\r\n        txs: [_coventPendingType(txinfo), ...transactions],\r\n      })\r\n    );\r\n  };\r\n\r\n  const getTransactionInfoByTxId = async (txid: any) => {\r\n    return await sys.utils.fetchBackendRawTx(sysjs.blockbookURL, txid);\r\n  };\r\n\r\n  const getRawTransaction = async (txid: any) => {\r\n    return await sys.utils.fetchBackendRawTx(sysjs.blockbookURL, txid);\r\n  };\r\n\r\n  const getDataAsset = async (assetGuid: any) => {\r\n    return await sys.utils.fetchBackendAsset(sysjs.blockbookURL, assetGuid);\r\n  };\r\n\r\n  const countDecimals = (x: number) => {\r\n    if(Math.floor(x) === x) return 0;\r\n    return x.toString().split(\".\")[1].length || 0;\r\n}\r\n\r\n  const getSysExplorerSearch = () => {\r\n    return sysjs.blockbookURL;\r\n  };\r\n\r\n  const updateAccountLabel = (id: number, label: string, isHardwareWallet?: boolean) => {\r\n    if (isHardwareWallet) {\r\n      return;\r\n    }\r\n\r\n    store.dispatch(updateLabel({ id, label }));\r\n  };\r\n\r\n  const addNewAccount = async (label: string) => {\r\n    return await subscribeAccount(false, null, label);\r\n  };\r\n\r\n  const isNFT = (guid: number) => {\r\n    const assetGuid = BigInt.asUintN(64, BigInt(guid));\r\n\r\n    return (assetGuid >> BigInt(32)) > 0;\r\n  };\r\n\r\n  const getRecommendFee = async () => {\r\n    return await sys.utils.fetchEstimateFee(sysjs.blockbookURL, 1) / 10 ** 8;\r\n  };\r\n\r\n  const updateTxs = () => {\r\n    if (!account) {\r\n      return;\r\n    }\r\n\r\n    getLatestUpdate();\r\n  };\r\n\r\n  const clearTransactionItem = (item: string) => {\r\n    switch (item) {\r\n      case 'issueNFTItem':\r\n        issueNFTItem = null;\r\n        break;\r\n      case 'currentPSBT':\r\n        currentPSBT = null;\r\n        break\r\n      case 'currentPsbtToSign':\r\n        currentPsbtToSign = null;\r\n        break\r\n      case 'newSPT':\r\n        newSPT = null;\r\n        break;\r\n      case 'mintNFT':\r\n        mintNFT = null;\r\n        break;\r\n      case 'mintSPT':\r\n        mintSPT = null;\r\n        break;\r\n      case 'transferOwnershipData':\r\n        transferOwnershipData = null;\r\n        break;\r\n      case 'updateAssetItem':\r\n        updateAssetItem = null;\r\n        break;\r\n      case 'tempTx':\r\n        tempTx = null;\r\n        break;\r\n    }\r\n  }\r\n\r\n  const updateTempTx = (tx: ITransactionInfo) => {\r\n    tempTx = { ...tx };\r\n    tempTx.fromAddress = tempTx.fromAddress.trim();\r\n    tempTx.toAddress = tempTx.toAddress.trim();\r\n  };\r\n\r\n  const setNewAddress = (addr: string) => {\r\n    const { activeAccountId }: IWalletState = store.getState().wallet;\r\n\r\n    store.dispatch(\r\n      updateAccountAddress({\r\n        id: activeAccountId,\r\n        address: { main: addr },\r\n      })\r\n    );\r\n\r\n    return true;\r\n  }\r\n\r\n  const setNewXpub = (id: number, xpub: string, xprv: string, key: string) => {\r\n    store.dispatch(\r\n      updateAccountXpub({\r\n        id,\r\n        xpub,\r\n        xprv: CryptoJS.AES.encrypt(xprv, String(key)).toString()\r\n      })\r\n    );\r\n\r\n    return true;\r\n  }\r\n\r\n  const getPrimaryAccount = (pwd: string, sjs: any) => {\r\n    const { accounts, activeAccountId }: IWalletState = store.getState().wallet;\r\n\r\n    if (sjs) {\r\n      sysjs = sjs;\r\n    }\r\n\r\n    if (!actions.checkPassword(pwd)) return;\r\n\r\n    getLatestUpdate();\r\n\r\n    if (!account && accounts) {\r\n      account = accounts.find((account: IAccountState) => account.id === activeAccountId) || accounts[activeAccountId];\r\n\r\n      store.dispatch(updateStatus());\r\n    }\r\n  };\r\n\r\n  const watchMemPool = (currentAccount: IAccountState) => {\r\n    if (intervalId) {\r\n      return true;\r\n    }\r\n\r\n    intervalId = setInterval(() => {\r\n      getLatestUpdate();\r\n\r\n      const { accounts }: IWalletState = store.getState().wallet;\r\n\r\n      const activeAccount = accounts.find((account: IAccountState) => account.id === currentAccount.id);\r\n\r\n      if (\r\n        !activeAccount ||\r\n        !activeAccount?.transactions ||\r\n        !activeAccount!.transactions.filter(\r\n          (tx: Transaction) => tx.confirmations > 0\r\n        ).length\r\n      ) {\r\n        clearInterval(intervalId);\r\n\r\n        return false;\r\n      }\r\n    }, 30 * 1000);\r\n\r\n    return true;\r\n  };\r\n\r\n  const getTransactionItem = () => {\r\n    return {\r\n      issueNFTItem: issueNFTItem || null,\r\n      currentPSBT: currentPSBT || null,\r\n      currentPsbtToSign: currentPsbtToSign || null,\r\n      tempTx: tempTx || null,\r\n      newSPT: newSPT || null,\r\n      mintSPT: mintSPT || null,\r\n      mintNFT: mintNFT || null,\r\n      updateAssetItem: updateAssetItem || null,\r\n      transferOwnershipData: transferOwnershipData || null\r\n    };\r\n  };\r\n\r\n  const getTransactionData = async (txid: string) => {\r\n    return await getTransactionInfoByTxId(txid);\r\n  }\r\n\r\n  const fetchBackendConnectedAccount = async (connectedAccount: IAccountState) => {\r\n    if (connectedAccount.isTrezorWallet) {\r\n      return await sys.utils.fetchBackendAccount(sysjs.blockbookURL, account.xpub, 'tokens=nonzero&details=txs', true);\r\n    }\r\n\r\n    return await sys.utils.fetchBackendAccount(sysjs.blockbookURL, connectedAccount.xpub, 'details=txs&assetMask=non-token-transfers', true, sysjs.Signer);\r\n  };\r\n\r\n  const getChangeAddress = async () => {\r\n    const { activeAccountId }: IWalletState = store.getState().wallet;\r\n    const connectedAccount: IAccountState = getConnectedAccount();\r\n    if (!sysjs) {\r\n      //TODO: enhance this error message\r\n      console.log('SYSJS not defined')\r\n\r\n      return await 'Error: wallet is locked, ask client to unlock it to get change address';\r\n    }\r\n\r\n    if (connectedAccount.isTrezorWallet) {\r\n      //TODO: Implement changeAddress for trezor wallets \r\n      //only when trezor enable syscoin on mainnet\r\n      let addr: string = 'Error: Failed to fetch trezor change address'\r\n      const inter = await getNewChangeAddress(true);\r\n      if (inter !== null) {\r\n        addr = inter\r\n      }\r\n      return addr;\r\n    }\r\n\r\n    else {\r\n      let changeAddress: string = '';\r\n      if (connectedAccount.id === activeAccountId) {\r\n        changeAddress = (await sysjs.Signer.getNewChangeAddress())\r\n        console.log(changeAddress)\r\n        return changeAddress;\r\n      }\r\n      else {\r\n        await sysjs.Signer.setAccountIndex(connectedAccount.id)\r\n        changeAddress = await sysjs.Signer.getNewChangeAddress();\r\n        sysjs.Signer.setAccountIndex(activeAccountId)\r\n        return changeAddress;\r\n      }\r\n    }\r\n  }\r\n\r\n  const sortList = (list: any) => {\r\n    return list.sort((a: any, b: any) => {\r\n      const previous = a.symbol.toLowerCase();\r\n      const next = b.symbol.toLowerCase();\r\n\r\n      //@ts-ignore\r\n      return (previous > next) - (previous < next);\r\n    })\r\n  }\r\n\r\n  const updateTokensState = async () => {\r\n    if (!sysjs) {\r\n      return;\r\n    }\r\n\r\n    const { accounts }: IWalletState = store.getState().wallet;\r\n\r\n    return await Promise.all(accounts.map(async (account: IAccountState) => {\r\n      const assetsData: any = {};\r\n\r\n      const { tokensAsset } = await sys.utils.fetchBackendAccount(sysjs.blockbookURL, account.xpub, 'tokens=derived&details=txs', true, sysjs.Signer);\r\n      const { transactions } = await fetchBackendConnectedAccount(account);\r\n\r\n      let tokensMap: any = {};\r\n      let mintedTokens: any = {};\r\n\r\n      if (!tokensAsset) {\r\n        store.dispatch(updateAllTokens({\r\n          accountId: account.id,\r\n          accountXpub: account.xpub,\r\n          tokens: tokensMap,\r\n          holdings: sortList(Object.values(assetsData)),\r\n          mintedTokens: sortList(Object.values(mintedTokens)),\r\n        }));\r\n\r\n        return;\r\n      }\r\n\r\n      await new Promise((resolve) => {\r\n        each(tokensAsset, function ({ balance, symbol, assetGuid, decimals, type }: any, done: any) {\r\n          tokensMap[assetGuid] = {\r\n            balance: Number(tokensMap[assetGuid] ? tokensMap[assetGuid].balance : 0) + Number(balance),\r\n            type,\r\n            decimals,\r\n            symbol: symbol ? atob(String(symbol)) : '',\r\n            assetGuid\r\n          };\r\n\r\n\r\n          done();\r\n        }, function () {\r\n          resolve('ok');\r\n        });\r\n      });\r\n\r\n      try {\r\n        if (transactions) {\r\n          await new Promise((resolve) => {\r\n            each(transactions, function ({ tokenType, tokenTransfers }: any, done: any) {\r\n              if (tokenType === 'SPTAssetActivate') {\r\n                for (const token of tokenTransfers) {\r\n                  try {\r\n                    getDataAsset(token.token).then((assetData: any) => {\r\n                      mintedTokens[token.token] = {\r\n                        assetGuid: token.token,\r\n                        symbol: token.symbol ? atob(String(token.symbol)) : '',\r\n                        maxSupply: Number(assetData.maxSupply),\r\n                        totalSupply: Number(assetData.totalSupply)\r\n                      }\r\n                    });\r\n                  } catch (error) {\r\n                    console.log(error);\r\n                  }\r\n                }\r\n              }\r\n\r\n              done();\r\n            }, function () {\r\n              resolve('ok');\r\n            });\r\n          })\r\n        }\r\n\r\n        await Promise.all(Object.values(tokensMap).map(async (value) => {\r\n          try {\r\n            const {\r\n              balance,\r\n              type,\r\n              decimals,\r\n              symbol,\r\n              assetGuid\r\n            }: any = value;\r\n\r\n            const { pubData } = await getDataAsset(assetGuid);\r\n\r\n            const { baseAssetID, NFTID } = sys.utils.getAssetIDs(assetGuid);\r\n\r\n            const assetData = {\r\n              balance,\r\n              type,\r\n              decimals,\r\n              symbol,\r\n              assetGuid,\r\n              baseAssetID,\r\n              childAssetID: isNFT(assetGuid) ? sys.utils.createAssetID(NFTID, assetGuid) : null,\r\n              NFTID,\r\n              description: pubData && pubData.desc ? atob(pubData.desc) : ''\r\n            }\r\n\r\n            assetsData[assetData.assetGuid] = assetData;\r\n\r\n            return;\r\n          } catch (error) {\r\n            console.log('error minted tokens', error)\r\n          }\r\n        }));\r\n\r\n        store.dispatch(updateAllTokens({\r\n          accountId: account.id,\r\n          accountXpub: account.xpub,\r\n          tokens: tokensMap,\r\n          holdings: sortList(Object.values(assetsData)),\r\n          mintedTokens: sortList(Object.values(mintedTokens)),\r\n        }));\r\n\r\n        return;\r\n      } catch (error) {\r\n        console.log(error)\r\n      }\r\n\r\n      return;\r\n    }));\r\n  }\r\n\r\n  const getHoldingsData = async () => {\r\n    const { walletTokens }: IWalletState = store.getState().wallet;\r\n\r\n    if (walletTokens) {\r\n      const connectedAccountId = walletTokens.findIndex((accountTokens: any) => {\r\n        return accountTokens.accountId === getConnectedAccount().id;\r\n      });\r\n\r\n      if (connectedAccountId > -1) {\r\n        return walletTokens[connectedAccountId].holdings;\r\n      }\r\n    }\r\n\r\n    return [];\r\n  };\r\n\r\n  const getUserMintedTokens = async () => {\r\n    const { walletTokens }: IWalletState = store.getState().wallet;\r\n\r\n    if (walletTokens) {\r\n      const connectedAccountId = walletTokens.findIndex((accountTokens: any) => {\r\n        return accountTokens.accountId === getConnectedAccount().id;\r\n      });\r\n\r\n      if (connectedAccountId > -1) {\r\n        return walletTokens[connectedAccountId].mintedTokens;\r\n      }\r\n    }\r\n\r\n    return [];\r\n  };\r\n\r\n  const getConnectedAccountXpub = () => {\r\n\r\n    if (getConnectedAccount() === undefined) {\r\n      return null;\r\n    }\r\n    else {\r\n      return getConnectedAccount().xpub;\r\n    }\r\n  }\r\n\r\n  const signTransaction = async (jsonData: any, sendPSBT: boolean) => {\r\n    const base64 = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/;\r\n\r\n    if (!base64.test(jsonData.psbt) || typeof jsonData.assets !== 'string') {\r\n      throw new Error(`PSBT must be in Base64 format and assets must be a JSON string. Please check the documentation to see the correct formats.`);\r\n    }\r\n\r\n    try {\r\n      const response = sys.utils.importPsbtFromJson(jsonData);\r\n\r\n      if (!TrezorSigner) {\r\n        TrezorSigner = new sys.utils.TrezorSigner();\r\n\r\n        new sys.SyscoinJSLib(TrezorSigner, sysjs.blockbookURL);\r\n      }\r\n\r\n      if (sendPSBT) {\r\n        if (getConnectedAccount().isTrezorWallet) {\r\n          return sys.utils.exportPsbtToJson(await TrezorSigner.sign(response.psbt));\r\n        }\r\n\r\n        return sys.utils.exportPsbtToJson(await sysjs.Signer.sign(response.psbt));\r\n      }\r\n\r\n      if (getConnectedAccount().isTrezorWallet) {\r\n        return sys.utils.exportPsbtToJson(await sysjs.signAndSend(response.psbt, response.assets, TrezorSigner));\r\n      }\r\n\r\n      return sys.utils.exportPsbtToJson(await sysjs.signAndSend(response.psbt, response.assets));\r\n    } catch (error) {\r\n      throw new Error(String(error));\r\n    }\r\n  };\r\n\r\n  const importPsbt = (psbt: any) => {\r\n    try {\r\n      return sys.utils.importPsbtFromJson(psbt);\r\n    } catch (error) {\r\n      return psbt;\r\n    }\r\n  }\r\n\r\n  const confirmSignature = (sendPSBT: boolean) => {\r\n    return new Promise((resolve, reject) => {\r\n      const item = sendPSBT ? currentPsbtToSign : currentPSBT;\r\n      handleTransactions(item, signTransaction, sendPSBT).then((response) => {\r\n        resolve(response);\r\n\r\n        currentPSBT = null;\r\n      }).catch((error) => {\r\n        reject(error);\r\n      });\r\n    });\r\n  }\r\n\r\n  const setCurrentPSBT = (psbt: any) => {\r\n    currentPSBT = psbt;\r\n\r\n    return;\r\n  }\r\n\r\n  const setCurrentPsbtToSign = (psbtToSign: any) => {\r\n    currentPsbtToSign = psbtToSign;\r\n\r\n    return;\r\n  }\r\n\r\n  const getNewChangeAddress = async (fromConnectionsController: boolean) => {\r\n    let userAccount: IAccountState;\r\n    if (fromConnectionsController) {\r\n      userAccount = getConnectedAccount();\r\n    }\r\n    else {\r\n      const { activeAccountId, accounts }: IWalletState = store.getState().wallet;\r\n      userAccount = accounts.find((account: IAccountState) => account.id === activeAccountId) as IAccountState;\r\n\r\n    }\r\n    let address = '';\r\n\r\n    if (userAccount!.isTrezorWallet) {\r\n      const response = await sys.utils.fetchBackendAccount(sysjs.blockbookURL, userAccount.xpub, 'tokens=nonzero&details=txs', true);\r\n\r\n      const TrezorAccount = new fromZPub(userAccount.xpub, sysjs.Signer.Signer.pubtypes, sysjs.Signer.Signer.networks);\r\n      let receivingIndex = -1;\r\n      let changeIndex = -1;\r\n\r\n      if (response.tokens) {\r\n        response.tokens.forEach((token: any) => {\r\n          if (token.path) {\r\n            const splitPath = token.path.split('/');\r\n\r\n            if (splitPath.length >= 6) {\r\n              const change = parseInt(splitPath[4], 10);\r\n              const index = parseInt(splitPath[5], 10);\r\n\r\n              if (change === 1) {\r\n                changeIndex = index;\r\n\r\n                return;\r\n              }\r\n\r\n              if (index > receivingIndex) {\r\n                receivingIndex = index;\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      address = TrezorAccount.getAddress(changeIndex + 1, true);\r\n\r\n      return address;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  const fetchAccountInfo = async (isHardwareWallet?: boolean, xpub?: any) => {\r\n    let response: any = null;\r\n    let address: any = null;\r\n\r\n    if (isHardwareWallet) {\r\n      response = await sys.utils.fetchBackendAccount(sysjs.blockbookURL, xpub, 'tokens=nonzero&details=txs', true);\r\n\r\n      const account0: any = new fromZPub(xpub, sysjs.Signer.Signer.pubtypes, sysjs.Signer.Signer.networks);\r\n      let receivingIndex = -1;\r\n\r\n      if (response.tokens) {\r\n        response.tokens.forEach((token: any) => {\r\n          if (token.path) {\r\n            const splitPath = token.path.split('/');\r\n\r\n            if (splitPath.length >= 6) {\r\n              const change = parseInt(splitPath[4], 10);\r\n              const index = parseInt(splitPath[5], 10);\r\n\r\n              if (change === 1) {\r\n                return;\r\n              }\r\n\r\n              if (index > receivingIndex) {\r\n                receivingIndex = index;\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n\r\n      address = account0.getAddress(receivingIndex + 1);\r\n\r\n      return {\r\n        address,\r\n        response\r\n      };\r\n    }\r\n\r\n    response = await sys.utils.fetchBackendAccount(sysjs.blockbookURL, sysjs.Signer.getAccountXpub(), 'tokens=nonzero&details=txs', true, sysjs.Signer);\r\n\r\n    return {\r\n      address,\r\n      response\r\n    };\r\n  }\r\n\r\n  const getAccountInfo = async (isHardwareWallet?: boolean, xpub?: any): Promise<IAccountInfo> => {\r\n    const { address, response } = await fetchAccountInfo(isHardwareWallet, xpub);\r\n\r\n    const balance = response.balance / 1e8;\r\n    const assets: Assets[] = [];\r\n    let transactions: Transaction[] = [];\r\n\r\n    if (response.transactions) {\r\n      transactions = response.transactions.map(({\r\n        txid,\r\n        value,\r\n        confirmations,\r\n        fees,\r\n        blockTime,\r\n        tokenType\r\n      }: Transaction\r\n      ) => {\r\n        return <Transaction>\r\n          {\r\n            txid,\r\n            value,\r\n            confirmations,\r\n            fees,\r\n            blockTime,\r\n            tokenType,\r\n          }\r\n      }).slice(0, 10);\r\n    }\r\n\r\n    if (response.tokensAsset) {\r\n      const transform = response.tokensAsset.reduce((response: any, {\r\n        type,\r\n        assetGuid,\r\n        symbol,\r\n        balance,\r\n        decimals\r\n      }: any) => {\r\n        response[assetGuid] = <Assets>{\r\n          type,\r\n          assetGuid,\r\n          symbol: symbol ? atob(String(symbol)) : '',\r\n          balance: (response[assetGuid] ? response[assetGuid].balance : 0) + Number(balance),\r\n          decimals,\r\n        };\r\n\r\n        return response;\r\n      }, {});\r\n\r\n      for (const key in transform) {\r\n        assets.push(transform[key]);\r\n      }\r\n    }\r\n\r\n    if (address) {\r\n      return {\r\n        balance,\r\n        assets,\r\n        transactions,\r\n        address\r\n      };\r\n    }\r\n\r\n    return {\r\n      balance,\r\n      assets,\r\n      transactions\r\n    };\r\n  };\r\n\r\n  const subscribeAccount = async (isHardwareWallet = false, sjs?: any, label?: string, walletCreation?: boolean) => {\r\n    if (isHardwareWallet) {\r\n      if (TrezorSigner === null || TrezorSigner === undefined) {\r\n        TrezorSigner = sjs\r\n        new sys.SyscoinJSLib(TrezorSigner, sysjs.blockbookURL);\r\n      }\r\n      const { accounts }: IWalletState = store.getState().wallet;\r\n      const trezorID: number = accounts.reduce((trezorID: number, account: IAccountState) => (account.trezorId) ? trezorID = trezorID > account.trezorId ? trezorID : account.trezorId : trezorID, 0);\r\n\r\n      const trezorinfo: IAccountInfo | null = await getAccountInfo(isHardwareWallet, sjs.getAccountXpub());\r\n\r\n      if (trezorinfo.address) {\r\n        account = {\r\n          id: 9999 + trezorID,\r\n          label: `Trezor ${trezorID + 1}`,\r\n          balance: trezorinfo.balance / (10 ** 8),\r\n          transactions: trezorinfo.transactions,\r\n          xpub: sjs.getAccountXpub(),\r\n          xprv: '',\r\n          address: { 'main': trezorinfo.address },\r\n          assets: trezorinfo.assets,\r\n          connectedTo: [],\r\n          isTrezorWallet: true,\r\n          trezorId: trezorID + 1\r\n        };\r\n\r\n        store.dispatch(createAccount(account));\r\n\r\n        return account!.xpub;\r\n      }\r\n\r\n      return null;\r\n    }\r\n\r\n    if (sjs) {\r\n      sysjs = sjs;\r\n    }\r\n\r\n    if (!walletCreation) {\r\n      await sysjs.Signer.createAccount();\r\n    }\r\n\r\n    const res: IAccountInfo | null = await getAccountInfo();\r\n    account = {\r\n      id: sysjs.Signer.Signer.accountIndex === 0 ? 0 : sysjs.Signer.Signer.accountIndex,\r\n      label: label || `Account ${sysjs.Signer.Signer.accountIndex + 1}`,\r\n      balance: res.balance,\r\n      transactions: res.transactions,\r\n      xpub: sysjs.Signer.getAccountXpub(),\r\n      xprv: CryptoJS.AES.encrypt(sysjs.Signer.Signer.accounts[sysjs.Signer.Signer.accountIndex].getAccountPrivateKey(), String(sysjs.Signer.Signer.accountIndex)).toString(),\r\n      address: { 'main': await sysjs.Signer.getNewReceivingAddress() },\r\n      assets: res.assets,\r\n      connectedTo: [],\r\n      isTrezorWallet: false\r\n    };\r\n    store.dispatch(createAccount(account));\r\n\r\n    return account!.xpub;\r\n  };\r\n\r\n  const getLatestUpdate = async () => {\r\n    const { activeAccountId, accounts }: IWalletState = store.getState().wallet;\r\n\r\n    if (!accounts.find((account: IAccountState) => account.id === activeAccountId)) {\r\n      return;\r\n    }\r\n\r\n\r\n    account = accounts.find((account: IAccountState) => account.id === activeAccountId)!;\r\n\r\n    if (!account.isTrezorWallet) {\r\n      sysjs.Signer.setAccountIndex(activeAccountId);\r\n\r\n      const accLatestInfo = await getAccountInfo();\r\n\r\n      if (!accLatestInfo) return;\r\n\r\n      const { balance, transactions, assets } = accLatestInfo;\r\n\r\n      store.dispatch(\r\n        updateAccount({\r\n          id: activeAccountId,\r\n          balance,\r\n          transactions,\r\n          assets\r\n        })\r\n      );\r\n\r\n      store.dispatch(updateSwitchNetwork(false))\r\n\r\n      return;\r\n    }\r\n\r\n    const accLatestInfo = await getAccountInfo(true, account.xpub);\r\n\r\n    if (!accLatestInfo) return;\r\n\r\n    const { balance, transactions, assets } = accLatestInfo;\r\n\r\n    store.dispatch(\r\n      updateAccount({\r\n        id: activeAccountId,\r\n        balance,\r\n        transactions,\r\n        assets\r\n      })\r\n    );\r\n\r\n    store.dispatch(updateSwitchNetwork(false))\r\n  };\r\n\r\n  const isValidSYSAddress = (address: string, network: string) => {\r\n    if (address && typeof address === 'string') {\r\n      try {\r\n        resAddress = bech32.decode(address);\r\n\r\n        if (network === 'main' && resAddress.prefix === 'sys') {\r\n          encode = bech32.encode(resAddress.prefix, resAddress.words);\r\n\r\n          return encode === address.toLowerCase();\r\n        }\r\n\r\n        if (network === 'testnet' && resAddress.prefix === 'tsys') {\r\n          encode = bech32.encode(resAddress.prefix, resAddress.words);\r\n\r\n          return encode === address.toLowerCase();\r\n        }\r\n      } catch (error) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  const getDataFromPageToInitTransaction = () => {\r\n    return {\r\n      dataFromPageToIssueNFT: dataFromPageToIssueNFT || null,\r\n      dataFromWalletToIssueNFT: dataFromWalletToIssueNFT || null,\r\n      dataFromPageToCreateSPT: dataFromPageToCreateSPT || null,\r\n      dataFromWalletToCreateSPT: dataFromWalletToCreateSPT || null,\r\n      dataFromPageToMintSPT: dataFromPageToMintSPT || null,\r\n      dataFromWalletToMintSPT: dataFromWalletToMintSPT || null,\r\n      dataFromPageToMintNFT: dataFromPageToMintNFT || null,\r\n      dataFromWalletToMintNFT: dataFromWalletToMintNFT || null,\r\n      dataFromPageToUpdateAsset: dataFromPageToUpdateAsset || null,\r\n      dataFromWalletToUpdateAsset: dataFromWalletToUpdateAsset || null,\r\n      dataFromPageToTransferOwnership: dataFromPageToTransferOwnership || null,\r\n      dataFromWalletToTransferOwnership: dataFromWalletToTransferOwnership || null\r\n    }\r\n  }\r\n\r\n  const setDataFromPageToIssueNFT = (data: any) => {\r\n    dataFromPageToIssueNFT = data;\r\n  }\r\n\r\n  const setDataFromWalletToIssueNFT = (data: any) => {\r\n    dataFromWalletToIssueNFT = data;\r\n  }\r\n\r\n  const setDataFromPageToCreateNewSPT = (data: ISPTPageInfo) => {\r\n    dataFromPageToCreateSPT = data;\r\n  }\r\n\r\n  const setDataFromWalletToCreateSPT = (data: ISPTWalletInfo) => {\r\n    dataFromWalletToCreateSPT = data;\r\n  }\r\n\r\n  const setDataFromPageToMintSPT = (data: ISPTIssuePage) => {\r\n    dataFromPageToMintSPT = data;\r\n  }\r\n\r\n  const setDataFromWalletToMintSPT = (data: ISPTIssueWallet) => {\r\n    dataFromWalletToMintSPT = data;\r\n  }\r\n\r\n  const setDataFromPageToMintNFT = (data: INFTPageInfo) => {\r\n    dataFromPageToMintNFT = data;\r\n  }\r\n\r\n  const setDataFromWalletToMintNFT = (data: INFTWalletInfo) => {\r\n    dataFromWalletToMintNFT = data;\r\n  }\r\n\r\n  const setDataFromPageToUpdateAsset = (data: UpdateTokenPageInfo) => {\r\n    dataFromPageToUpdateAsset = data;\r\n  }\r\n\r\n  const setDataFromWalletToUpdateAsset = (data: UpdateTokenWalletInfo) => {\r\n    dataFromWalletToUpdateAsset = data;\r\n  }\r\n\r\n  const setDataFromPageToTransferOwnership = (data: any) => {\r\n    dataFromPageToTransferOwnership = data;\r\n  }\r\n\r\n  const setDataFromWalletToTransferOwnership = (data: any) => {\r\n    dataFromWalletToTransferOwnership = data;\r\n  }\r\n\r\n  const createSPT = (spt: ISPTInfo) => {\r\n    newSPT = spt;\r\n\r\n    return true;\r\n  }\r\n\r\n  const setNewIssueNFT = (nft: any) => {\r\n    issueNFTItem = nft;\r\n\r\n    return true;\r\n  }\r\n\r\n  const issueSPT = (spt: ISPTIssue) => {\r\n    mintSPT = spt;\r\n\r\n    return true;\r\n  }\r\n\r\n  const issueNFT = (nft: INFTIssue) => {\r\n    mintNFT = nft;\r\n\r\n    return true;\r\n  }\r\n  const setUpdateAsset = (asset: any) => {\r\n    updateAssetItem = asset;\r\n\r\n    return true;\r\n  }\r\n\r\n  const setNewOwnership = (asset: any) => {\r\n    transferOwnershipData = asset;\r\n\r\n    return true;\r\n  }\r\n\r\n  const handleTransactions = async (item: any, executeTransaction: any, condition?: boolean) => {\r\n    if (!sysjs) {\r\n      throw new Error('Error: No signed account exists');\r\n    }\r\n\r\n    if (!account) {\r\n      throw new Error('Error: Can\\'t find active account info');\r\n    }\r\n\r\n    if (!item) {\r\n      throw new Error('Error: Can\\'t find item info');\r\n    }\r\n\r\n    return new Promise((resolve: any, reject: any) => {\r\n      executeTransaction(item, condition)\r\n        .then((response: any) => {\r\n          resolve(response);\r\n        })\r\n        .catch((error: any) => {\r\n          reject(error);\r\n        });\r\n    });\r\n  };\r\n\r\n  const confirmSPTCreation = async (item: any) => {\r\n    const {\r\n      capabilityflags,\r\n      notarydetails,\r\n      auxfeedetails,\r\n      precision,\r\n      symbol,\r\n      description,\r\n      initialSupply,\r\n      maxsupply,\r\n      fee,\r\n      notaryAddress,\r\n      payoutAddress,\r\n      receiver\r\n    } = item;\r\n\r\n    const newMaxSupply = maxsupply * (10 ** precision);\r\n\r\n    let _assetOpts = {\r\n      precision,\r\n      symbol,\r\n      description,\r\n      maxsupply: new sys.utils.BN(newMaxSupply),\r\n      updatecapabilityflags: capabilityflags ? String(capabilityflags) : '127',\r\n      notarydetails,\r\n      auxfeedetails,\r\n      notarykeyid: Buffer.from('', 'hex')\r\n    };\r\n\r\n    if (notaryAddress) {\r\n      const vNotaryPayment = sys.utils.bitcoinjs.payments.p2wpkh({\r\n        address: notaryAddress,\r\n        network: sysjs.Signer.Signer.network\r\n      });\r\n\r\n      _assetOpts = {\r\n        ..._assetOpts,\r\n        notarydetails: {\r\n          ...notarydetails,\r\n          endpoint: Buffer.from(syscointx.utils.encodeToBase64(notarydetails.endpoint))\r\n        },\r\n        notarykeyid: Buffer.from(vNotaryPayment.hash.toString('hex'), 'hex')\r\n      }\r\n    }\r\n\r\n    if (notarydetails) {\r\n      _assetOpts = {\r\n        ..._assetOpts,\r\n        notarydetails\r\n      }\r\n    }\r\n\r\n    if (payoutAddress) {\r\n      const payment = sys.utils.bitcoinjs.payments.p2wpkh({\r\n        address: payoutAddress,\r\n        network: sysjs.Signer.Signer.network\r\n      });\r\n\r\n      const auxFeeKeyID = Buffer.from(payment.hash.toString('hex'), 'hex');\r\n\r\n      _assetOpts = {\r\n        ..._assetOpts,\r\n        auxfeedetails: {\r\n          ..._assetOpts.auxfeedetails,\r\n          auxfeekeyid: auxFeeKeyID\r\n        }\r\n      }\r\n    }\r\n\r\n    if (auxfeedetails) {\r\n      _assetOpts = {\r\n        ..._assetOpts,\r\n        auxfeedetails\r\n      }\r\n    }\r\n\r\n    const txOpts = { rbf: true };\r\n\r\n    if (getConnectedAccount().isTrezorWallet) {\r\n      throw new Error('Trezor don\\'t support burning of coins');\r\n    }\r\n\r\n    sysjs.Signer.setAccountIndex(getConnectedAccount().id);\r\n\r\n\r\n    const pendingTx = await sysjs.assetNew(_assetOpts, txOpts, null, receiver, new sys.utils.BN(fee * 1e8));\r\n\r\n    const txInfoNew = pendingTx.extractTransaction().getId();\r\n\r\n    updateTransactionData('creatingAsset', txInfoNew);\r\n\r\n    const transactionData = await getTransactionInfoByTxId(txInfoNew);\r\n    const assets = syscointx.getAssetsFromTx(pendingTx.extractTransaction());\r\n    const createdAsset = assets.keys().next().value;\r\n\r\n    if (initialSupply && initialSupply < newMaxSupply) {\r\n      try {\r\n        return new Promise(async (resolve: any, reject: any) => {\r\n          let interval: any;\r\n\r\n          interval = setInterval(async () => {\r\n            const sptCreated = await getTransactionInfoByTxId(txInfoNew);\r\n\r\n            if (sptCreated?.confirmations > 1) {\r\n              console.log('confirmations > 1', createdAsset)\r\n              const changeaddress = await sysjs.Signer.getNewChangeAddress();\r\n\r\n              try {\r\n                const assetMap = new Map([\r\n                  [String(createdAsset), {\r\n                    changeAddress: changeaddress,\r\n                    outputs: [{\r\n                      value: new sys.utils.BN(initialSupply * (10 ** precision)),\r\n                      address: receiver\r\n                    }]\r\n                  }]\r\n                ]);\r\n\r\n                const pendingTx = await sysjs.assetSend(txOpts, assetMap, receiver, new sys.utils.BN(fee * 1e8));\r\n\r\n                if (!pendingTx) {\r\n                  console.log('Could not create transaction, not enough funds?');\r\n\r\n                  return;\r\n                }\r\n\r\n                const txInfo = pendingTx.extractTransaction().getId();\r\n\r\n                updateTransactionData('issuingSPT', txInfo);\r\n\r\n                watchMemPool(getConnectedAccount());\r\n\r\n                clearInterval(interval);\r\n\r\n                resolve({\r\n                  sptCreated,\r\n                  txid: txInfo,\r\n                  txConfirmations: sptCreated.confirmations,\r\n                  txAssetGuid: createdAsset,\r\n                });\r\n              } catch (error) {\r\n                clearInterval(interval);\r\n\r\n                reject(error);\r\n              }\r\n            }\r\n          }, 16000);\r\n        });\r\n      } catch (error) {\r\n        console.log(error);\r\n\r\n        return error;\r\n      }\r\n    }\r\n\r\n    return {\r\n      transactionData,\r\n      txid: txInfoNew,\r\n      txConfirmations: transactionData.confirmations,\r\n      txAssetGuid: createdAsset,\r\n    }\r\n  };\r\n\r\n  const confirmNewSPT = () => {\r\n    return new Promise((resolve, reject) => {\r\n      handleTransactions(newSPT, confirmSPTCreation).then((response) => {\r\n        resolve(response);\r\n      }).catch((error) => {\r\n        reject(error);\r\n      });\r\n\r\n      newSPT = null;\r\n    });\r\n  };\r\n\r\n  const confirmMintSPT = async (item: any) => {\r\n    const {\r\n      fee,\r\n      assetGuid,\r\n      amount\r\n    } = item;\r\n\r\n    const feeRate = new sys.utils.BN(fee * 1e8);\r\n    const txOpts = { rbf: true };\r\n\r\n    let txInfo;\r\n\r\n    const { decimals } = await getDataAsset(assetGuid);\r\n    const receivingAddress = await sysjs.Signer.getNewReceivingAddress();\r\n\r\n    const assetMap = new Map([\r\n      [assetGuid, {\r\n        changeAddress: null,\r\n        outputs: [{\r\n          value: new sys.utils.BN(amount * (10 ** decimals)),\r\n          address: receivingAddress\r\n        }]\r\n      }]\r\n    ]);\r\n\r\n    if (getConnectedAccount().isTrezorWallet === false) {\r\n      sysjs.Signer.setAccountIndex(getConnectedAccount().id);\r\n    }\r\n\r\n    let sysChangeAddress = null;\r\n\r\n    if (getConnectedAccount().isTrezorWallet) {\r\n      sysChangeAddress = await getNewChangeAddress(true);\r\n\r\n      // @ts-ignore\r\n      assetMap.get(assetGuid)!.changeAddress = sysChangeAddress;\r\n\r\n      const txData = await sysjs.assetSend(txOpts, assetMap, sysChangeAddress, feeRate, account.xpub);\r\n\r\n      if (!txData) {\r\n        console.log('Could not create transaction, not enough funds?')\r\n        //TODO: add error and show on the UI for user\r\n        return;\r\n      }\r\n\r\n      if (TrezorSigner === null || TrezorSigner === undefined) {\r\n        TrezorSigner = new sys.utils.TrezorSigner();\r\n\r\n        new sys.SyscoinJSLib(TrezorSigner, sysjs.blockbookURL);\r\n      }\r\n\r\n      try {\r\n        //TODO: had to remove await because with it trezor popup would jam the wallet\r\n        // txInfo = await TrezorSigner.sign(txData.psbt)\r\n        // check how to make this properly work (untested part)\r\n\r\n        let waitTrezor = true;\r\n        // TrezorSigner.sign(txData.psbt).then((txInfo: string) => {\r\n\r\n        sysjs.signAndSend(txData.psbt, txData.assets, TrezorSigner).then((txInfo: string) => {\r\n          updateTransactionData('issuingSPT', txInfo);\r\n\r\n          watchMemPool(getConnectedAccount());\r\n\r\n          waitTrezor = false;\r\n\r\n          return {\r\n            txid: txInfo\r\n          }\r\n        });\r\n\r\n        if (waitTrezor) { }\r\n\r\n        return\r\n      } catch (error) {\r\n        console.log(`error processing tx: ${error}`);\r\n\r\n        return;\r\n      }\r\n    } else {\r\n      const pendingTx = await sysjs.assetSend(txOpts, assetMap, null, feeRate);\r\n\r\n      if (!pendingTx) {\r\n        console.log('Could not create transaction, not enough funds?');\r\n\r\n        return;\r\n      }\r\n\r\n      txInfo = pendingTx.extractTransaction().getId();\r\n    }\r\n\r\n    updateTransactionData('issuingSPT', txInfo);\r\n\r\n    watchMemPool(getConnectedAccount());\r\n\r\n    return {\r\n      txid: txInfo\r\n    }\r\n  };\r\n\r\n  const confirmIssueSPT = () => {\r\n    return new Promise((resolve, reject) => {\r\n      handleTransactions(mintSPT, confirmMintSPT).then((response) => {\r\n        resolve(response);\r\n      }).catch((error) => {\r\n        reject(error);\r\n      });\r\n\r\n      mintSPT = null;\r\n    });\r\n  };\r\n\r\n  const createParentAsset = async (assetOpts: any, fee: number) => {\r\n    const txOpts: any = { rbf: true };\r\n    const feeRate = new sys.utils.BN(fee * 1e8);\r\n\r\n    sysjs.Signer.setAccountIndex(getConnectedAccount().id);\r\n\r\n    let assetChangeAddress = await sysjs.Signer.getNewChangeAddress();\r\n\r\n\r\n    const psbt = await sysjs.assetNew(assetOpts, txOpts, assetChangeAddress, assetChangeAddress, feeRate);\r\n\r\n    if (!psbt) {\r\n      console.log('Could not create transaction, not enough funds?');\r\n\r\n      return;\r\n    }\r\n\r\n    const assets = syscointx.getAssetsFromTx(psbt.extractTransaction());\r\n    const txInfo = psbt.extractTransaction().getId();\r\n\r\n    return {\r\n      asset_guid: assets.keys().next().value,\r\n      txid: txInfo\r\n    };\r\n  };\r\n\r\n  /**\r\n   * This function executs do multiples transactions in sys blockchain  which must be executed in series\r\n   * WARNING: It might take a few minutes to execute it be carefull when using it\r\n   */\r\n\r\n  const confirmMintNFT = async (item: any) => {\r\n    const {\r\n      fee,\r\n      symbol,\r\n      description,\r\n      issuer,\r\n      precision,\r\n    } = item;\r\n\r\n    if (getConnectedAccount().isTrezorWallet) {\r\n      throw new Error('trezor does not support nft creation');\r\n    }\r\n\r\n    const assetOpts = {\r\n      precision,\r\n      symbol,\r\n      maxsupply: new sys.utils.BN(1 * (10 ** precision)),\r\n      description,\r\n    }\r\n\r\n    const newParentAsset = await createParentAsset(assetOpts, fee);\r\n\r\n    if (newParentAsset?.asset_guid) {\r\n      let theNFTTx: any = null;\r\n      let parentConfirmed = false;\r\n      let txInfo: any = null;\r\n\r\n      try {\r\n        return new Promise((resolve) => {\r\n          let interval: any;\r\n\r\n          interval = setInterval(async () => {\r\n            const newParentTx = await getTransactionInfoByTxId(newParentAsset.txid);\r\n            const feeRate = new sys.utils.BN(fee * 1e8);\r\n            const txOpts = { rbf: true };\r\n\r\n            if (newParentTx.confirmations > 1 && !parentConfirmed) {\r\n              parentConfirmed = true;\r\n\r\n              const assetMap = new Map([\r\n                [newParentAsset!.asset_guid,\r\n                {\r\n                  changeAddress: null,\r\n                  outputs: [{\r\n                    value: new sys.utils.BN(1 * (10 ** precision)),\r\n                    address: issuer\r\n                  }]\r\n                }]\r\n              ]);\r\n\r\n              try {\r\n                sysjs.Signer.setAccountIndex(getConnectedAccount().id);\r\n\r\n\r\n                const pendingTx = await sysjs.assetSend(txOpts, assetMap, null, feeRate);\r\n\r\n                if (!pendingTx) {\r\n                  console.log('Could not create transaction, not enough funds?')\r\n\r\n                  return;\r\n                }\r\n\r\n                txInfo = pendingTx.extractTransaction().getId();\r\n\r\n                updateTransactionData('issuingNFT', txInfo);\r\n\r\n                theNFTTx = txInfo;\r\n              } catch (error) {\r\n                parentConfirmed = false;\r\n\r\n                return error;\r\n              }\r\n\r\n              return;\r\n            }\r\n\r\n            if (theNFTTx && txInfo) {\r\n              try {\r\n                theNFTTx = await getTransactionInfoByTxId(txInfo);\r\n              } catch (error) {\r\n                console.log('Transaction still not indexed by explorer:', error);\r\n\r\n                return;\r\n              }\r\n\r\n              if (theNFTTx.confirmations > 1) {\r\n                const feeRate = new sys.utils.BN(10);\r\n                const txOpts = { rbf: true };\r\n                const assetGuid = newParentAsset!.asset_guid;\r\n                const assetOpts = { updatecapabilityflags: '0' };\r\n\r\n                sysjs.Signer.setAccountIndex(getConnectedAccount().id);\r\n\r\n\r\n                const assetMap = new Map([\r\n                  [assetGuid, {\r\n                    changeAddress: null,\r\n                    outputs: [{\r\n                      value: new sys.utils.BN(0),\r\n                      address: issuer\r\n                    }]\r\n                  }]\r\n                ]);\r\n\r\n                const psbt = await sysjs.assetUpdate(assetGuid, assetOpts, txOpts, assetMap, issuer, feeRate);\r\n\r\n                if (!psbt) {\r\n                  console.log('Could not create transaction, not enough funds?');\r\n                }\r\n\r\n                clearInterval(interval);\r\n\r\n                resolve({\r\n                  txid: psbt.extractTransaction().getId()\r\n                });\r\n              }\r\n\r\n              return;\r\n            }\r\n          }, 16000);\r\n        });\r\n      } catch (error) {\r\n        console.log('error sending child nft to creator', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const confirmIssueNFT = () => {\r\n    return new Promise((resolve, reject) => {\r\n      handleTransactions(mintNFT, confirmMintNFT).then((response) => {\r\n        resolve(response);\r\n      }).catch((error) => {\r\n        reject(error);\r\n      });\r\n\r\n      mintNFT = null;\r\n    });\r\n  };\r\n\r\n  const confirmTxIssueNFT = async (item: any) => {\r\n    const {\r\n      fee,\r\n      amount,\r\n      assetGuid,\r\n    }: any = item;\r\n\r\n    const { decimals } = await getDataAsset(assetGuid);\r\n    const feeRate = new sys.utils.BN(fee * 1e8);\r\n    const txOpts = { rbf: true };\r\n\r\n    const assetMap = new Map([\r\n      [assetGuid,\r\n      {\r\n        changeAddress: await getNewChangeAddress(false),\r\n        outputs: [{\r\n          value: new sys.utils.BN(amount * (10 ** decimals)),\r\n          address: await sysjs.Signer.getNewReceivingAddress()\r\n        }]\r\n      }]\r\n    ]);\r\n\r\n    try {\r\n      sysjs.Signer.setAccountIndex(getConnectedAccount().id);\r\n\r\n      const pendingTx = await sysjs.assetSend(txOpts, assetMap, null, feeRate);\r\n\r\n      if (!pendingTx) {\r\n        console.log('Could not create transaction, not enough funds?')\r\n      }\r\n\r\n      const txInfo = pendingTx.extractTransaction().getId();\r\n\r\n      updateTransactionData('issuingNFT', txInfo);\r\n\r\n      return {\r\n        txid: txInfo\r\n      }\r\n    } catch (error) {\r\n      return error;\r\n    }\r\n  }\r\n\r\n  const confirmIssueNFTTx = () => {\r\n    return new Promise((resolve, reject) => {\r\n      handleTransactions(issueNFTItem, confirmTxIssueNFT).then((response) => {\r\n        resolve(response);\r\n      }).catch((error) => {\r\n        reject(error);\r\n      });\r\n\r\n      issueNFTItem = null;\r\n    });\r\n  };\r\n\r\n    const confirmTransactionTx = async (\r\n      items: {\r\n        amount: number,\r\n        fee: number,\r\n        fromAddress: string,\r\n        isToken: boolean,\r\n        rbf: boolean,\r\n        toAddress: string,\r\n        token: string\r\n      }\r\n    ) => {\r\n      const {\r\n        toAddress,\r\n        amount,\r\n        fee,\r\n        token,\r\n        isToken,\r\n        rbf\r\n      } = items;\r\n\r\n      if (!account.isTrezorWallet) {\r\n        sysjs.Signer.setAccountIndex(store.getState().wallet.activeAccountId);\r\n      }\r\n\r\n      if (isToken && token) {\r\n        let txInfo;\r\n        const { decimals } = await getDataAsset(token);\r\n        const txOpts = { rbf };\r\n        const value = new sys.utils.BN(amount * 10 ** decimals);\r\n        const valueDecimals = countDecimals(amount);\r\n        if(valueDecimals > decimals) {\r\n          throw new Error('This token has ' + decimals + ' decimals and you are trying to send a value with ' + valueDecimals + ' decimals, please check your tx')\r\n        }\r\n\r\n        const assetMap = new Map([\r\n          [token, {\r\n            changeAddress: null,\r\n            outputs: [{\r\n              value,\r\n              address: toAddress\r\n            }]\r\n          }]\r\n        ]);\r\n\r\n        if (account.isTrezorWallet) {\r\n          const changeAddress = await getNewChangeAddress(false);\r\n          // @ts-ignore: Unreachable code error\r\n          assetMap.get(token)!.changeAddress = changeAddress;\r\n\r\n          const txData = await sysjs.assetAllocationSend(txOpts, assetMap, changeAddress, new sys.utils.BN(fee * 1e8), account.xpub);\r\n\r\n          if (!txData) {\r\n            console.log('Could not create transaction, not enough funds?')\r\n          }\r\n          if (TrezorSigner === null || TrezorSigner === undefined) {\r\n            TrezorSigner = new sys.utils.TrezorSigner();\r\n            new sys.SyscoinJSLib(TrezorSigner, sysjs.blockbookURL);\r\n          }\r\n          try {\r\n            // TrezorSigner.sign(txData.psbt).then(() => {\r\n\r\n            sysjs.signAndSend(txData.psbt, txData.assets, TrezorSigner).then(() => {\r\n              const acc = store.getState().wallet.confirmingTransaction ? getConnectedAccount() : account;\r\n              watchMemPool(acc);\r\n            })\r\n            tempTx = null;\r\n            return\r\n          }\r\n          catch (e) {\r\n            return;\r\n          }\r\n        } else {\r\n          const pendingTx = await sysjs.assetAllocationSend(txOpts, assetMap, null, new sys.utils.BN(fee * 1e8));\r\n\r\n          txInfo = pendingTx.extractTransaction().getId();\r\n        }\r\n\r\n        updateTransactionData('confirmingTransaction', txInfo);\r\n      } else {\r\n        const outputsArray = [{\r\n          address: toAddress,\r\n          value: new sys.utils.BN(amount * 1e8)\r\n        }];\r\n\r\n        const txOpts = { rbf };\r\n        let txInfo;\r\n        if (account.isTrezorWallet) {\r\n          const changeAddress = await getNewChangeAddress(false);\r\n          const txData = await sysjs.createTransaction(txOpts, changeAddress, outputsArray, new sys.utils.BN(fee * 1e8), account.xpub);\r\n          if (!txData) {\r\n            console.log('Could not create transaction, not enough funds?')\r\n          }\r\n          if (TrezorSigner === null || TrezorSigner === undefined) {\r\n            TrezorSigner = new sys.utils.TrezorSigner();\r\n            new sys.SyscoinJSLib(TrezorSigner, sysjs.blockbookURL);\r\n          }\r\n          try {\r\n            sysjs.signAndSend(txData.psbt, txData.assets, TrezorSigner).then(() => {\r\n              const acc = store.getState().wallet.confirmingTransaction ? getConnectedAccount() : account;\r\n\r\n              watchMemPool(acc);\r\n            })\r\n            tempTx = null;\r\n            return\r\n          }\r\n          catch (e) {\r\n            console.log('Error processing tx: ' + e)\r\n            return;\r\n          }\r\n\r\n        } else {\r\n          try {\r\n            const pendingTx = await sysjs.createTransaction(txOpts, null, outputsArray, new sys.utils.BN(fee * 1e8));\r\n\r\n            txInfo = pendingTx.extractTransaction().getId();\r\n          } catch (error) {\r\n            throw new Error(String(error));\r\n          }\r\n        }\r\n\r\n        updateTransactionData('confirmingTransaction', txInfo);\r\n      }\r\n\r\n      tempTx = null;\r\n\r\n      const acc = store.getState().wallet.confirmingTransaction ? getConnectedAccount() : account;\r\n\r\n      watchMemPool(acc);\r\n    }\r\n\r\n    const confirmTempTx = () => {\r\n      return new Promise((resolve, reject) => {\r\n        handleTransactions(tempTx, confirmTransactionTx).then((response) => {\r\n          resolve(response);\r\n        }).catch((error) => {\r\n          reject(error);\r\n        });;\r\n      });\r\n    };\r\n\r\n    const setHDSigner = (accountId: number) => {\r\n      if (!account.isTrezorWallet) {\r\n        sysjs.Signer.setAccountIndex(accountId);\r\n      }\r\n    }\r\n\r\n    const confirmUpdateAsset = async (item: any) => {\r\n      const {\r\n        fee,\r\n        assetGuid,\r\n        assetWhiteList,\r\n        capabilityflags,\r\n        contract,\r\n        description,\r\n        notarydetails,\r\n        auxfeedetails,\r\n        notaryAddress,\r\n        payoutAddress\r\n      } = item;\r\n\r\n      let txOpts: any = {\r\n        rbf: true\r\n      };\r\n\r\n      let assetOpts: any = {\r\n        updatecapabilityflags: capabilityflags ? String(capabilityflags) : '127',\r\n        description\r\n      };\r\n\r\n      if (assetWhiteList) {\r\n        txOpts = {\r\n          ...txOpts,\r\n          assetWhiteList,\r\n        };\r\n      }\r\n\r\n      if (notarydetails) {\r\n        assetOpts = {\r\n          ...assetOpts,\r\n          notarydetails,\r\n          auxfeedetails,\r\n          notarykeyid: null\r\n        }\r\n      }\r\n\r\n      if (contract) {\r\n        assetOpts = {\r\n          ...assetOpts,\r\n          contract: Buffer.from(contract, 'hex')\r\n        };\r\n      }\r\n\r\n      if (auxfeedetails) {\r\n        const scalarPct = 1000;\r\n        const payment = sys.utils.bitcoinjs.payments.p2wpkh({\r\n          address: payoutAddress,\r\n          network: sysjs.Signer.Signer.network\r\n        })\r\n        const auxfeekeyid = Buffer.from(payment.hash.toString('hex'), 'hex')\r\n\r\n        assetOpts = {\r\n          ...assetOpts,\r\n          auxfeedetails: {\r\n            auxfees: [\r\n              {\r\n                bound: new sys.utils.BN(0),\r\n                percent: 1 * scalarPct\r\n              }\r\n            ],\r\n            auxfeekeyid\r\n          }\r\n        };\r\n      }\r\n\r\n      if (notaryAddress) {\r\n        const vNotaryPayment = sys.utils.bitcoinjs.payments.p2wpkh({\r\n          address: notaryAddress,\r\n          network: sysjs.Signer.Signer.network\r\n        });\r\n\r\n        assetOpts = {\r\n          ...assetOpts,\r\n          notarykeyid: Buffer.from(vNotaryPayment.hash.toString('hex'), 'hex')\r\n        }\r\n      }\r\n\r\n      console.log('asset opts update asset', assetOpts, assetGuid)\r\n\r\n      const thisAssetMap = new Map([\r\n        [assetGuid, {\r\n          changeAddress: await getNewChangeAddress(true),\r\n          outputs: [{\r\n            value: new sys.utils.BN(0),\r\n            address: await sysjs.Signer.getNewReceivingAddress()\r\n          }]\r\n        }]\r\n      ]);\r\n\r\n\r\n      sysjs.Signer.setAccountIndex(getConnectedAccount().id);\r\n\r\n      // let changeAddress = await sysjs.Signer.getNewChangeAddress();\r\n\r\n\r\n      const pendingTx = await sysjs.assetUpdate(assetGuid, assetOpts, txOpts, thisAssetMap, null, new sys.utils.BN(fee * 1e8));\r\n\r\n      const txInfo = pendingTx.extractTransaction().getId();\r\n\r\n      if (!pendingTx || !txInfo) {\r\n        console.log('Could not create transaction, not enough funds?');\r\n\r\n        return;\r\n      }\r\n\r\n      updateTransactionData('updatingAsset', txInfo);\r\n\r\n      watchMemPool(getConnectedAccount());\r\n\r\n      return {\r\n        txid: txInfo\r\n      }\r\n    }\r\n\r\n    const confirmUpdateAssetTransaction = () => {\r\n      return new Promise((resolve, reject) => {\r\n        handleTransactions(updateAssetItem, confirmUpdateAsset).then((response) => {\r\n          resolve(response)\r\n\r\n          updateAssetItem = null;\r\n        }).catch((error) => {\r\n          reject(error)\r\n\r\n          updateAssetItem = null;\r\n        });\r\n\r\n        updateAssetItem = null;\r\n      });\r\n    }\r\n\r\n    const transferAsset = async (item: any) => {\r\n      const {\r\n        fee,\r\n        assetGuid,\r\n        newOwner\r\n      } = item;\r\n\r\n      const feeRate = new sys.utils.BN(fee * 1e8);\r\n      const txOpts = { rbf: true };\r\n      const assetOpts = {};\r\n\r\n      let txInfo = null;\r\n\r\n      const assetMap = new Map([\r\n        [assetGuid, {\r\n          changeAddress: await getNewChangeAddress(true),\r\n          outputs: [{\r\n            value: new sys.utils.BN(0),\r\n            address: newOwner\r\n          }]\r\n        }]\r\n      ]);\r\n\r\n      if (getConnectedAccount().isTrezorWallet) {\r\n        const sysChangeAddress = await getNewChangeAddress(true);\r\n\r\n        // @ts-ignore\r\n        assetMap.get(assetGuid)!.changeAddress = sysChangeAddress;\r\n\r\n        const txData = await sysjs.assetUpdate(assetGuid, assetOpts, txOpts, assetMap, sysChangeAddress, feeRate);\r\n\r\n        if (!txData) {\r\n          console.log('Could not create transaction, not enough funds?')\r\n        }\r\n        if (TrezorSigner === null || TrezorSigner === undefined) {\r\n          TrezorSigner = new sys.utils.TrezorSigner();\r\n          new sys.SyscoinJSLib(TrezorSigner, sysjs.blockbookURL);\r\n        }\r\n        try {\r\n          //TODO: test might have same problem as them mintSPT\r\n          txInfo = await sysjs.signAndSend(txData.psbt, txData.assets, TrezorSigner)\r\n\r\n          updateTransactionData('transferringOwnership', txInfo);\r\n\r\n          watchMemPool(getConnectedAccount());\r\n        }\r\n        catch (e) {\r\n          console.log('Error processing tx: ' + e)\r\n          return;\r\n        }\r\n        return;\r\n      }\r\n\r\n      sysjs.Signer.setAccountIndex(getConnectedAccount().id);\r\n\r\n      // let assetChangeAddress = await sysjs.Signer.getNewChangeAddress();\r\n\r\n\r\n      const pendingTx = await sysjs.assetUpdate(assetGuid, assetOpts, txOpts, assetMap, null, feeRate);\r\n\r\n      if (!pendingTx) {\r\n        console.log('Could not create transaction, not enough funds?');\r\n      }\r\n\r\n      txInfo = pendingTx.extractTransaction().getId();\r\n\r\n      updateTransactionData('transferringOwnership', txInfo);\r\n\r\n      watchMemPool(getConnectedAccount());\r\n\r\n      return {\r\n        txid: txInfo\r\n      }\r\n    }\r\n\r\n    const confirmTransferOwnership = () => {\r\n      return new Promise((resolve, reject) => {\r\n        handleTransactions(transferOwnershipData, transferAsset).then((response) => {\r\n          resolve(response);\r\n        }).catch((error) => {\r\n          reject(error)\r\n        });\r\n\r\n        transferOwnershipData = null;\r\n      });\r\n    }\r\n\r\n    const decryptAES = (encryptedString: any, key: string) => {\r\n      return CryptoJS.AES.decrypt(encryptedString, key).toString(CryptoJS.enc.Utf8);\r\n    }\r\n\r\n    const setAutolockTimer = (minutes: number) => {\r\n      store.dispatch(setTimer(minutes));\r\n    }\r\n\r\n    return {\r\n      subscribeAccount,\r\n      getPrimaryAccount,\r\n      updateAccountLabel,\r\n      addNewAccount,\r\n      getLatestUpdate,\r\n      watchMemPool,\r\n      updateTempTx,\r\n      confirmTempTx,\r\n      isValidSYSAddress,\r\n      updateTxs,\r\n      getTransactionItem,\r\n      getRecommendFee,\r\n      setNewAddress,\r\n      setNewXpub,\r\n      isNFT,\r\n      getDataFromPageToInitTransaction,\r\n      createSPT,\r\n      confirmNewSPT,\r\n      issueSPT,\r\n      issueNFT,\r\n      confirmIssueSPT,\r\n      confirmIssueNFT,\r\n      getUserMintedTokens,\r\n      getTransactionInfoByTxId,\r\n      getSysExplorerSearch,\r\n      setDataFromPageToCreateNewSPT,\r\n      setDataFromWalletToCreateSPT,\r\n      setDataFromPageToMintSPT,\r\n      setDataFromWalletToMintSPT,\r\n      setDataFromPageToMintNFT,\r\n      setDataFromWalletToMintNFT,\r\n      setDataFromPageToUpdateAsset,\r\n      setDataFromWalletToUpdateAsset,\r\n      setDataFromPageToTransferOwnership,\r\n      setDataFromWalletToTransferOwnership,\r\n      confirmUpdateAssetTransaction,\r\n      confirmTransferOwnership,\r\n      setUpdateAsset,\r\n      setNewOwnership,\r\n      getHoldingsData,\r\n      getDataAsset,\r\n      clearTransactionItem,\r\n      confirmSignature,\r\n      getConnectedAccount,\r\n      getConnectedAccountXpub,\r\n      getChangeAddress,\r\n      setCurrentPSBT,\r\n      setCurrentPsbtToSign,\r\n      updateTokensState,\r\n      getTransactionData,\r\n      getRawTransaction,\r\n      setHDSigner,\r\n      confirmIssueNFTTx,\r\n      setNewIssueNFT,\r\n      setDataFromPageToIssueNFT,\r\n      setDataFromWalletToIssueNFT,\r\n      importPsbt,\r\n      decryptAES,\r\n      setAutolockTimer\r\n    };\r\n  };\r\n\r\n  export default AccountController;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/scripts/Background/controllers/AccountController.ts b/extension/source/scripts/Background/controllers/AccountController.ts
--- a/extension/source/scripts/Background/controllers/AccountController.ts	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/scripts/Background/controllers/AccountController.ts	(date 1637064532442)
@@ -117,9 +117,9 @@
   };
 
   const countDecimals = (x: number) => {
-    if(Math.floor(x) === x) return 0;
+    if (Math.floor(x) === x) return 0;
     return x.toString().split(".")[1].length || 0;
-}
+  }
 
   const getSysExplorerSearch = () => {
     return sysjs.blockbookURL;
@@ -294,37 +294,38 @@
     const { activeAccountId }: IWalletState = store.getState().wallet;
     const connectedAccount: IAccountState = getConnectedAccount();
     if (!sysjs) {
-      //TODO: enhance this error message
-      console.log('SYSJS not defined')
+      console.log('SYSJS not defined');
 
       return await 'Error: wallet is locked, ask client to unlock it to get change address';
     }
 
     if (connectedAccount.isTrezorWallet) {
-      //TODO: Implement changeAddress for trezor wallets 
-      //only when trezor enable syscoin on mainnet
-      let addr: string = 'Error: Failed to fetch trezor change address'
+      let addr: string = 'Error: Failed to fetch trezor change address';
+
       const inter = await getNewChangeAddress(true);
+
       if (inter !== null) {
         addr = inter
       }
+
       return addr;
     }
 
-    else {
-      let changeAddress: string = '';
-      if (connectedAccount.id === activeAccountId) {
-        changeAddress = (await sysjs.Signer.getNewChangeAddress())
-        console.log(changeAddress)
-        return changeAddress;
-      }
-      else {
-        await sysjs.Signer.setAccountIndex(connectedAccount.id)
-        changeAddress = await sysjs.Signer.getNewChangeAddress();
-        sysjs.Signer.setAccountIndex(activeAccountId)
-        return changeAddress;
-      }
-    }
+    let changeAddress: string = '';
+
+    if (connectedAccount.id === activeAccountId) {
+      changeAddress = await sysjs.Signer.getNewChangeAddress();
+
+      console.log(changeAddress);
+
+      return changeAddress;
+    }
+
+    sysjs.Signer.setAccountIndex(connectedAccount.id);
+    changeAddress = await sysjs.Signer.getNewChangeAddress();
+    sysjs.Signer.setAccountIndex(activeAccountId);
+
+    return changeAddress;
   }
 
   const sortList = (list: any) => {
@@ -1465,13 +1466,13 @@
 
     const assetMap = new Map([
       [assetGuid,
-      {
-        changeAddress: await getNewChangeAddress(false),
-        outputs: [{
-          value: new sys.utils.BN(amount * (10 ** decimals)),
-          address: await sysjs.Signer.getNewReceivingAddress()
-        }]
-      }]
+        {
+          changeAddress: await getNewChangeAddress(false),
+          outputs: [{
+            value: new sys.utils.BN(amount * (10 ** decimals)),
+            address: await sysjs.Signer.getNewReceivingAddress()
+          }]
+        }]
     ]);
 
     try {
@@ -1507,441 +1508,441 @@
     });
   };
 
-    const confirmTransactionTx = async (
-      items: {
-        amount: number,
-        fee: number,
-        fromAddress: string,
-        isToken: boolean,
-        rbf: boolean,
-        toAddress: string,
-        token: string
-      }
-    ) => {
-      const {
-        toAddress,
-        amount,
-        fee,
-        token,
-        isToken,
-        rbf
-      } = items;
+  const confirmTransactionTx = async (
+    items: {
+      amount: number,
+      fee: number,
+      fromAddress: string,
+      isToken: boolean,
+      rbf: boolean,
+      toAddress: string,
+      token: string
+    }
+  ) => {
+    const {
+      toAddress,
+      amount,
+      fee,
+      token,
+      isToken,
+      rbf
+    } = items;
 
-      if (!account.isTrezorWallet) {
-        sysjs.Signer.setAccountIndex(store.getState().wallet.activeAccountId);
-      }
+    if (!account.isTrezorWallet) {
+      sysjs.Signer.setAccountIndex(store.getState().wallet.activeAccountId);
+    }
 
-      if (isToken && token) {
-        let txInfo;
-        const { decimals } = await getDataAsset(token);
-        const txOpts = { rbf };
-        const value = new sys.utils.BN(amount * 10 ** decimals);
-        const valueDecimals = countDecimals(amount);
-        if(valueDecimals > decimals) {
-          throw new Error('This token has ' + decimals + ' decimals and you are trying to send a value with ' + valueDecimals + ' decimals, please check your tx')
-        }
+    if (isToken && token) {
+      let txInfo;
+      const { decimals } = await getDataAsset(token);
+      const txOpts = { rbf };
+      const value = new sys.utils.BN(amount * 10 ** decimals);
+      const valueDecimals = countDecimals(amount);
+      if (valueDecimals > decimals) {
+        throw new Error('This token has ' + decimals + ' decimals and you are trying to send a value with ' + valueDecimals + ' decimals, please check your tx')
+      }
 
-        const assetMap = new Map([
-          [token, {
-            changeAddress: null,
-            outputs: [{
-              value,
-              address: toAddress
-            }]
-          }]
-        ]);
+      const assetMap = new Map([
+        [token, {
+          changeAddress: null,
+          outputs: [{
+            value,
+            address: toAddress
+          }]
+        }]
+      ]);
 
-        if (account.isTrezorWallet) {
-          const changeAddress = await getNewChangeAddress(false);
-          // @ts-ignore: Unreachable code error
-          assetMap.get(token)!.changeAddress = changeAddress;
+      if (account.isTrezorWallet) {
+        const changeAddress = await getNewChangeAddress(false);
+        // @ts-ignore: Unreachable code error
+        assetMap.get(token)!.changeAddress = changeAddress;
 
-          const txData = await sysjs.assetAllocationSend(txOpts, assetMap, changeAddress, new sys.utils.BN(fee * 1e8), account.xpub);
+        const txData = await sysjs.assetAllocationSend(txOpts, assetMap, changeAddress, new sys.utils.BN(fee * 1e8), account.xpub);
 
-          if (!txData) {
-            console.log('Could not create transaction, not enough funds?')
-          }
-          if (TrezorSigner === null || TrezorSigner === undefined) {
-            TrezorSigner = new sys.utils.TrezorSigner();
-            new sys.SyscoinJSLib(TrezorSigner, sysjs.blockbookURL);
-          }
-          try {
-            // TrezorSigner.sign(txData.psbt).then(() => {
+        if (!txData) {
+          console.log('Could not create transaction, not enough funds?')
+        }
+        if (TrezorSigner === null || TrezorSigner === undefined) {
+          TrezorSigner = new sys.utils.TrezorSigner();
+          new sys.SyscoinJSLib(TrezorSigner, sysjs.blockbookURL);
+        }
+        try {
+          // TrezorSigner.sign(txData.psbt).then(() => {
 
-            sysjs.signAndSend(txData.psbt, txData.assets, TrezorSigner).then(() => {
-              const acc = store.getState().wallet.confirmingTransaction ? getConnectedAccount() : account;
-              watchMemPool(acc);
-            })
-            tempTx = null;
-            return
-          }
-          catch (e) {
-            return;
-          }
-        } else {
-          const pendingTx = await sysjs.assetAllocationSend(txOpts, assetMap, null, new sys.utils.BN(fee * 1e8));
+          sysjs.signAndSend(txData.psbt, txData.assets, TrezorSigner).then(() => {
+            const acc = store.getState().wallet.confirmingTransaction ? getConnectedAccount() : account;
+            watchMemPool(acc);
+          })
+          tempTx = null;
+          return
+        }
+        catch (e) {
+          return;
+        }
+      } else {
+        const pendingTx = await sysjs.assetAllocationSend(txOpts, assetMap, null, new sys.utils.BN(fee * 1e8));
 
-          txInfo = pendingTx.extractTransaction().getId();
-        }
+        txInfo = pendingTx.extractTransaction().getId();
+      }
 
-        updateTransactionData('confirmingTransaction', txInfo);
-      } else {
-        const outputsArray = [{
-          address: toAddress,
-          value: new sys.utils.BN(amount * 1e8)
-        }];
+      updateTransactionData('confirmingTransaction', txInfo);
+    } else {
+      const outputsArray = [{
+        address: toAddress,
+        value: new sys.utils.BN(amount * 1e8)
+      }];
 
-        const txOpts = { rbf };
-        let txInfo;
-        if (account.isTrezorWallet) {
-          const changeAddress = await getNewChangeAddress(false);
-          const txData = await sysjs.createTransaction(txOpts, changeAddress, outputsArray, new sys.utils.BN(fee * 1e8), account.xpub);
-          if (!txData) {
-            console.log('Could not create transaction, not enough funds?')
-          }
-          if (TrezorSigner === null || TrezorSigner === undefined) {
-            TrezorSigner = new sys.utils.TrezorSigner();
-            new sys.SyscoinJSLib(TrezorSigner, sysjs.blockbookURL);
-          }
-          try {
-            sysjs.signAndSend(txData.psbt, txData.assets, TrezorSigner).then(() => {
-              const acc = store.getState().wallet.confirmingTransaction ? getConnectedAccount() : account;
+      const txOpts = { rbf };
+      let txInfo;
+      if (account.isTrezorWallet) {
+        const changeAddress = await getNewChangeAddress(false);
+        const txData = await sysjs.createTransaction(txOpts, changeAddress, outputsArray, new sys.utils.BN(fee * 1e8), account.xpub);
+        if (!txData) {
+          console.log('Could not create transaction, not enough funds?')
+        }
+        if (TrezorSigner === null || TrezorSigner === undefined) {
+          TrezorSigner = new sys.utils.TrezorSigner();
+          new sys.SyscoinJSLib(TrezorSigner, sysjs.blockbookURL);
+        }
+        try {
+          sysjs.signAndSend(txData.psbt, txData.assets, TrezorSigner).then(() => {
+            const acc = store.getState().wallet.confirmingTransaction ? getConnectedAccount() : account;
 
-              watchMemPool(acc);
-            })
-            tempTx = null;
-            return
-          }
-          catch (e) {
-            console.log('Error processing tx: ' + e)
-            return;
-          }
+            watchMemPool(acc);
+          })
+          tempTx = null;
+          return
+        }
+        catch (e) {
+          console.log('Error processing tx: ' + e)
+          return;
+        }
 
-        } else {
-          try {
-            const pendingTx = await sysjs.createTransaction(txOpts, null, outputsArray, new sys.utils.BN(fee * 1e8));
+      } else {
+        try {
+          const pendingTx = await sysjs.createTransaction(txOpts, null, outputsArray, new sys.utils.BN(fee * 1e8));
 
-            txInfo = pendingTx.extractTransaction().getId();
-          } catch (error) {
-            throw new Error(String(error));
-          }
-        }
+          txInfo = pendingTx.extractTransaction().getId();
+        } catch (error) {
+          throw new Error(String(error));
+        }
+      }
 
-        updateTransactionData('confirmingTransaction', txInfo);
-      }
+      updateTransactionData('confirmingTransaction', txInfo);
+    }
 
-      tempTx = null;
+    tempTx = null;
 
-      const acc = store.getState().wallet.confirmingTransaction ? getConnectedAccount() : account;
+    const acc = store.getState().wallet.confirmingTransaction ? getConnectedAccount() : account;
 
-      watchMemPool(acc);
-    }
+    watchMemPool(acc);
+  }
 
-    const confirmTempTx = () => {
-      return new Promise((resolve, reject) => {
-        handleTransactions(tempTx, confirmTransactionTx).then((response) => {
-          resolve(response);
-        }).catch((error) => {
-          reject(error);
-        });;
-      });
-    };
+  const confirmTempTx = () => {
+    return new Promise((resolve, reject) => {
+      handleTransactions(tempTx, confirmTransactionTx).then((response) => {
+        resolve(response);
+      }).catch((error) => {
+        reject(error);
+      });;
+    });
+  };
 
-    const setHDSigner = (accountId: number) => {
-      if (!account.isTrezorWallet) {
-        sysjs.Signer.setAccountIndex(accountId);
-      }
-    }
+  const setHDSigner = (accountId: number) => {
+    if (!account.isTrezorWallet) {
+      sysjs.Signer.setAccountIndex(accountId);
+    }
+  }
 
-    const confirmUpdateAsset = async (item: any) => {
-      const {
-        fee,
-        assetGuid,
-        assetWhiteList,
-        capabilityflags,
-        contract,
-        description,
-        notarydetails,
-        auxfeedetails,
-        notaryAddress,
-        payoutAddress
-      } = item;
+  const confirmUpdateAsset = async (item: any) => {
+    const {
+      fee,
+      assetGuid,
+      assetWhiteList,
+      capabilityflags,
+      contract,
+      description,
+      notarydetails,
+      auxfeedetails,
+      notaryAddress,
+      payoutAddress
+    } = item;
 
-      let txOpts: any = {
-        rbf: true
-      };
+    let txOpts: any = {
+      rbf: true
+    };
 
-      let assetOpts: any = {
-        updatecapabilityflags: capabilityflags ? String(capabilityflags) : '127',
-        description
-      };
+    let assetOpts: any = {
+      updatecapabilityflags: capabilityflags ? String(capabilityflags) : '127',
+      description
+    };
 
-      if (assetWhiteList) {
-        txOpts = {
-          ...txOpts,
-          assetWhiteList,
-        };
-      }
+    if (assetWhiteList) {
+      txOpts = {
+        ...txOpts,
+        assetWhiteList,
+      };
+    }
 
-      if (notarydetails) {
-        assetOpts = {
-          ...assetOpts,
-          notarydetails,
-          auxfeedetails,
-          notarykeyid: null
-        }
-      }
+    if (notarydetails) {
+      assetOpts = {
+        ...assetOpts,
+        notarydetails,
+        auxfeedetails,
+        notarykeyid: null
+      }
+    }
 
-      if (contract) {
-        assetOpts = {
-          ...assetOpts,
-          contract: Buffer.from(contract, 'hex')
-        };
-      }
+    if (contract) {
+      assetOpts = {
+        ...assetOpts,
+        contract: Buffer.from(contract, 'hex')
+      };
+    }
 
-      if (auxfeedetails) {
-        const scalarPct = 1000;
-        const payment = sys.utils.bitcoinjs.payments.p2wpkh({
-          address: payoutAddress,
-          network: sysjs.Signer.Signer.network
-        })
-        const auxfeekeyid = Buffer.from(payment.hash.toString('hex'), 'hex')
+    if (auxfeedetails) {
+      const scalarPct = 1000;
+      const payment = sys.utils.bitcoinjs.payments.p2wpkh({
+        address: payoutAddress,
+        network: sysjs.Signer.Signer.network
+      })
+      const auxfeekeyid = Buffer.from(payment.hash.toString('hex'), 'hex')
 
-        assetOpts = {
-          ...assetOpts,
-          auxfeedetails: {
-            auxfees: [
-              {
-                bound: new sys.utils.BN(0),
-                percent: 1 * scalarPct
-              }
-            ],
-            auxfeekeyid
-          }
-        };
-      }
+      assetOpts = {
+        ...assetOpts,
+        auxfeedetails: {
+          auxfees: [
+            {
+              bound: new sys.utils.BN(0),
+              percent: 1 * scalarPct
+            }
+          ],
+          auxfeekeyid
+        }
+      };
+    }
 
-      if (notaryAddress) {
-        const vNotaryPayment = sys.utils.bitcoinjs.payments.p2wpkh({
-          address: notaryAddress,
-          network: sysjs.Signer.Signer.network
-        });
+    if (notaryAddress) {
+      const vNotaryPayment = sys.utils.bitcoinjs.payments.p2wpkh({
+        address: notaryAddress,
+        network: sysjs.Signer.Signer.network
+      });
 
-        assetOpts = {
-          ...assetOpts,
-          notarykeyid: Buffer.from(vNotaryPayment.hash.toString('hex'), 'hex')
-        }
-      }
+      assetOpts = {
+        ...assetOpts,
+        notarykeyid: Buffer.from(vNotaryPayment.hash.toString('hex'), 'hex')
+      }
+    }
 
-      console.log('asset opts update asset', assetOpts, assetGuid)
+    console.log('asset opts update asset', assetOpts, assetGuid)
 
-      const thisAssetMap = new Map([
-        [assetGuid, {
-          changeAddress: await getNewChangeAddress(true),
-          outputs: [{
-            value: new sys.utils.BN(0),
-            address: await sysjs.Signer.getNewReceivingAddress()
-          }]
-        }]
-      ]);
+    const thisAssetMap = new Map([
+      [assetGuid, {
+        changeAddress: await getNewChangeAddress(true),
+        outputs: [{
+          value: new sys.utils.BN(0),
+          address: await sysjs.Signer.getNewReceivingAddress()
+        }]
+      }]
+    ]);
 
 
-      sysjs.Signer.setAccountIndex(getConnectedAccount().id);
+    sysjs.Signer.setAccountIndex(getConnectedAccount().id);
 
-      // let changeAddress = await sysjs.Signer.getNewChangeAddress();
+    // let changeAddress = await sysjs.Signer.getNewChangeAddress();
 
 
-      const pendingTx = await sysjs.assetUpdate(assetGuid, assetOpts, txOpts, thisAssetMap, null, new sys.utils.BN(fee * 1e8));
+    const pendingTx = await sysjs.assetUpdate(assetGuid, assetOpts, txOpts, thisAssetMap, null, new sys.utils.BN(fee * 1e8));
 
-      const txInfo = pendingTx.extractTransaction().getId();
+    const txInfo = pendingTx.extractTransaction().getId();
 
-      if (!pendingTx || !txInfo) {
-        console.log('Could not create transaction, not enough funds?');
+    if (!pendingTx || !txInfo) {
+      console.log('Could not create transaction, not enough funds?');
 
-        return;
-      }
+      return;
+    }
 
-      updateTransactionData('updatingAsset', txInfo);
+    updateTransactionData('updatingAsset', txInfo);
 
-      watchMemPool(getConnectedAccount());
+    watchMemPool(getConnectedAccount());
 
-      return {
-        txid: txInfo
-      }
-    }
+    return {
+      txid: txInfo
+    }
+  }
 
-    const confirmUpdateAssetTransaction = () => {
-      return new Promise((resolve, reject) => {
-        handleTransactions(updateAssetItem, confirmUpdateAsset).then((response) => {
-          resolve(response)
+  const confirmUpdateAssetTransaction = () => {
+    return new Promise((resolve, reject) => {
+      handleTransactions(updateAssetItem, confirmUpdateAsset).then((response) => {
+        resolve(response)
 
-          updateAssetItem = null;
-        }).catch((error) => {
-          reject(error)
+        updateAssetItem = null;
+      }).catch((error) => {
+        reject(error)
 
-          updateAssetItem = null;
-        });
+        updateAssetItem = null;
+      });
 
-        updateAssetItem = null;
-      });
-    }
+      updateAssetItem = null;
+    });
+  }
 
-    const transferAsset = async (item: any) => {
-      const {
-        fee,
-        assetGuid,
-        newOwner
-      } = item;
+  const transferAsset = async (item: any) => {
+    const {
+      fee,
+      assetGuid,
+      newOwner
+    } = item;
 
-      const feeRate = new sys.utils.BN(fee * 1e8);
-      const txOpts = { rbf: true };
-      const assetOpts = {};
+    const feeRate = new sys.utils.BN(fee * 1e8);
+    const txOpts = { rbf: true };
+    const assetOpts = {};
 
-      let txInfo = null;
+    let txInfo = null;
 
-      const assetMap = new Map([
-        [assetGuid, {
-          changeAddress: await getNewChangeAddress(true),
-          outputs: [{
-            value: new sys.utils.BN(0),
-            address: newOwner
-          }]
-        }]
-      ]);
+    const assetMap = new Map([
+      [assetGuid, {
+        changeAddress: await getNewChangeAddress(true),
+        outputs: [{
+          value: new sys.utils.BN(0),
+          address: newOwner
+        }]
+      }]
+    ]);
 
-      if (getConnectedAccount().isTrezorWallet) {
-        const sysChangeAddress = await getNewChangeAddress(true);
+    if (getConnectedAccount().isTrezorWallet) {
+      const sysChangeAddress = await getNewChangeAddress(true);
 
-        // @ts-ignore
-        assetMap.get(assetGuid)!.changeAddress = sysChangeAddress;
+      // @ts-ignore
+      assetMap.get(assetGuid)!.changeAddress = sysChangeAddress;
 
-        const txData = await sysjs.assetUpdate(assetGuid, assetOpts, txOpts, assetMap, sysChangeAddress, feeRate);
+      const txData = await sysjs.assetUpdate(assetGuid, assetOpts, txOpts, assetMap, sysChangeAddress, feeRate);
 
-        if (!txData) {
-          console.log('Could not create transaction, not enough funds?')
-        }
-        if (TrezorSigner === null || TrezorSigner === undefined) {
-          TrezorSigner = new sys.utils.TrezorSigner();
-          new sys.SyscoinJSLib(TrezorSigner, sysjs.blockbookURL);
-        }
-        try {
-          //TODO: test might have same problem as them mintSPT
-          txInfo = await sysjs.signAndSend(txData.psbt, txData.assets, TrezorSigner)
+      if (!txData) {
+        console.log('Could not create transaction, not enough funds?')
+      }
+      if (TrezorSigner === null || TrezorSigner === undefined) {
+        TrezorSigner = new sys.utils.TrezorSigner();
+        new sys.SyscoinJSLib(TrezorSigner, sysjs.blockbookURL);
+      }
+      try {
+        //TODO: test might have same problem as them mintSPT
+        txInfo = await sysjs.signAndSend(txData.psbt, txData.assets, TrezorSigner)
 
-          updateTransactionData('transferringOwnership', txInfo);
+        updateTransactionData('transferringOwnership', txInfo);
 
-          watchMemPool(getConnectedAccount());
-        }
-        catch (e) {
-          console.log('Error processing tx: ' + e)
-          return;
-        }
-        return;
-      }
+        watchMemPool(getConnectedAccount());
+      }
+      catch (e) {
+        console.log('Error processing tx: ' + e)
+        return;
+      }
+      return;
+    }
 
-      sysjs.Signer.setAccountIndex(getConnectedAccount().id);
+    sysjs.Signer.setAccountIndex(getConnectedAccount().id);
 
-      // let assetChangeAddress = await sysjs.Signer.getNewChangeAddress();
+    // let assetChangeAddress = await sysjs.Signer.getNewChangeAddress();
 
 
-      const pendingTx = await sysjs.assetUpdate(assetGuid, assetOpts, txOpts, assetMap, null, feeRate);
+    const pendingTx = await sysjs.assetUpdate(assetGuid, assetOpts, txOpts, assetMap, null, feeRate);
 
-      if (!pendingTx) {
-        console.log('Could not create transaction, not enough funds?');
-      }
+    if (!pendingTx) {
+      console.log('Could not create transaction, not enough funds?');
+    }
 
-      txInfo = pendingTx.extractTransaction().getId();
+    txInfo = pendingTx.extractTransaction().getId();
 
-      updateTransactionData('transferringOwnership', txInfo);
+    updateTransactionData('transferringOwnership', txInfo);
 
-      watchMemPool(getConnectedAccount());
+    watchMemPool(getConnectedAccount());
 
-      return {
-        txid: txInfo
-      }
-    }
+    return {
+      txid: txInfo
+    }
+  }
 
-    const confirmTransferOwnership = () => {
-      return new Promise((resolve, reject) => {
-        handleTransactions(transferOwnershipData, transferAsset).then((response) => {
-          resolve(response);
-        }).catch((error) => {
-          reject(error)
-        });
+  const confirmTransferOwnership = () => {
+    return new Promise((resolve, reject) => {
+      handleTransactions(transferOwnershipData, transferAsset).then((response) => {
+        resolve(response);
+      }).catch((error) => {
+        reject(error)
+      });
 
-        transferOwnershipData = null;
-      });
-    }
+      transferOwnershipData = null;
+    });
+  }
 
-    const decryptAES = (encryptedString: any, key: string) => {
-      return CryptoJS.AES.decrypt(encryptedString, key).toString(CryptoJS.enc.Utf8);
-    }
+  const decryptAES = (encryptedString: any, key: string) => {
+    return CryptoJS.AES.decrypt(encryptedString, key).toString(CryptoJS.enc.Utf8);
+  }
 
-    const setAutolockTimer = (minutes: number) => {
-      store.dispatch(setTimer(minutes));
-    }
+  const setAutolockTimer = (minutes: number) => {
+    store.dispatch(setTimer(minutes));
+  }
 
-    return {
-      subscribeAccount,
-      getPrimaryAccount,
-      updateAccountLabel,
-      addNewAccount,
-      getLatestUpdate,
-      watchMemPool,
-      updateTempTx,
-      confirmTempTx,
-      isValidSYSAddress,
-      updateTxs,
-      getTransactionItem,
-      getRecommendFee,
-      setNewAddress,
-      setNewXpub,
-      isNFT,
-      getDataFromPageToInitTransaction,
-      createSPT,
-      confirmNewSPT,
-      issueSPT,
-      issueNFT,
-      confirmIssueSPT,
-      confirmIssueNFT,
-      getUserMintedTokens,
-      getTransactionInfoByTxId,
-      getSysExplorerSearch,
-      setDataFromPageToCreateNewSPT,
-      setDataFromWalletToCreateSPT,
-      setDataFromPageToMintSPT,
-      setDataFromWalletToMintSPT,
-      setDataFromPageToMintNFT,
-      setDataFromWalletToMintNFT,
-      setDataFromPageToUpdateAsset,
-      setDataFromWalletToUpdateAsset,
-      setDataFromPageToTransferOwnership,
-      setDataFromWalletToTransferOwnership,
-      confirmUpdateAssetTransaction,
-      confirmTransferOwnership,
-      setUpdateAsset,
-      setNewOwnership,
-      getHoldingsData,
-      getDataAsset,
-      clearTransactionItem,
-      confirmSignature,
-      getConnectedAccount,
-      getConnectedAccountXpub,
-      getChangeAddress,
-      setCurrentPSBT,
-      setCurrentPsbtToSign,
-      updateTokensState,
-      getTransactionData,
-      getRawTransaction,
-      setHDSigner,
-      confirmIssueNFTTx,
-      setNewIssueNFT,
-      setDataFromPageToIssueNFT,
-      setDataFromWalletToIssueNFT,
-      importPsbt,
-      decryptAES,
-      setAutolockTimer
-    };
-  };
+  return {
+    subscribeAccount,
+    getPrimaryAccount,
+    updateAccountLabel,
+    addNewAccount,
+    getLatestUpdate,
+    watchMemPool,
+    updateTempTx,
+    confirmTempTx,
+    isValidSYSAddress,
+    updateTxs,
+    getTransactionItem,
+    getRecommendFee,
+    setNewAddress,
+    setNewXpub,
+    isNFT,
+    getDataFromPageToInitTransaction,
+    createSPT,
+    confirmNewSPT,
+    issueSPT,
+    issueNFT,
+    confirmIssueSPT,
+    confirmIssueNFT,
+    getUserMintedTokens,
+    getTransactionInfoByTxId,
+    getSysExplorerSearch,
+    setDataFromPageToCreateNewSPT,
+    setDataFromWalletToCreateSPT,
+    setDataFromPageToMintSPT,
+    setDataFromWalletToMintSPT,
+    setDataFromPageToMintNFT,
+    setDataFromWalletToMintNFT,
+    setDataFromPageToUpdateAsset,
+    setDataFromWalletToUpdateAsset,
+    setDataFromPageToTransferOwnership,
+    setDataFromWalletToTransferOwnership,
+    confirmUpdateAssetTransaction,
+    confirmTransferOwnership,
+    setUpdateAsset,
+    setNewOwnership,
+    getHoldingsData,
+    getDataAsset,
+    clearTransactionItem,
+    confirmSignature,
+    getConnectedAccount,
+    getConnectedAccountXpub,
+    getChangeAddress,
+    setCurrentPSBT,
+    setCurrentPsbtToSign,
+    updateTokensState,
+    getTransactionData,
+    getRawTransaction,
+    setHDSigner,
+    confirmIssueNFTTx,
+    setNewIssueNFT,
+    setDataFromPageToIssueNFT,
+    setDataFromWalletToIssueNFT,
+    importPsbt,
+    decryptAES,
+    setAutolockTimer
+  };
+};
 
-  export default AccountController;
\ No newline at end of file
+export default AccountController;
\ No newline at end of file
Index: extension/source/scripts/ContentScript/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { browser } from 'webextension-polyfill-ts';\r\n\r\nimport {\r\n  getMessagesToListenTo,\r\n  listenAndSendMessageFromPageToBackground\r\n} from './helpers';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    SyscoinWallet: any;\r\n    connectionConfirmed: boolean;\r\n  }\r\n}\r\n\r\nconst doctypeCheck = () => {\r\n  const { doctype } = window.document;\r\n\r\n  if (doctype) {\r\n    return doctype.name === 'html';\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nconst suffixCheck = () => {\r\n  const prohibitedTypes = [/\\.xml$/u, /\\.pdf$/u];\r\n  const currentUrl = window.location.pathname;\r\n\r\n  for (let i = 0; i < prohibitedTypes.length; i++) {\r\n    if (prohibitedTypes[i].test(currentUrl)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nconst documentElementCheck = () => {\r\n  const documentElement = document.documentElement.nodeName;\r\n\r\n  if (documentElement) {\r\n    return documentElement.toLowerCase() === 'html';\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nconst blockedDomainCheck = () => {\r\n  const blockedDomains = [\r\n    'dropbox.com',\r\n    'github.com',\r\n  ];\r\n\r\n  const currentUrl = window.location.href;\r\n  let currentRegex;\r\n\r\n  for (let i = 0; i < blockedDomains.length; i++) {\r\n    const blockedDomain = blockedDomains[i].replace('.', '\\\\.');\r\n\r\n    currentRegex = new RegExp(\r\n      `(?:https?:\\\\/\\\\/)(?:(?!${blockedDomain}).)*$`,\r\n      'u',\r\n    );\r\n\r\n    if (!currentRegex.test(currentUrl)) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport const shouldInjectProvider = () => {\r\n  return (\r\n    doctypeCheck() &&\r\n    suffixCheck() &&\r\n    documentElementCheck() &&\r\n    !blockedDomainCheck()\r\n  );\r\n}\r\n\r\nconst injectScript = (content: string) => {\r\n  try {\r\n    const container = document.head || document.documentElement;\r\n    const scriptTag = document.createElement('script');\r\n    scriptTag.textContent = content;\r\n\r\n    container.insertBefore(scriptTag, container.children[0]);\r\n  } catch (error) {\r\n    console.error('Pali Wallet: Provider injection failed.', error);\r\n  }\r\n}\r\n\r\nconst injectScriptFile = (file: string) => {\r\n  try {\r\n    const container = document.head || document.documentElement;\r\n    const scriptTag = document.createElement('script');\r\n    scriptTag.src = browser.runtime.getURL(file);\r\n\r\n    container.insertBefore(scriptTag, container.children[0]);\r\n  } catch (error) {\r\n    console.error('Pali Wallet: Provider injection failed.', error);\r\n  }\r\n}\r\n\r\nif (shouldInjectProvider()) {\r\n  injectScript(\"window.SyscoinWallet = 'Pali Wallet is installed! :)'\");\r\n\r\n  window.dispatchEvent(new CustomEvent('SyscoinStatus', { detail: { SyscoinInstalled: true, ConnectionsController: false } }));\r\n\r\n  console.log('injecting inpage')\r\n\r\n  injectScriptFile('js/inpage.bundle.js');\r\n  console.log('injecting inpage after')\r\n}\r\n\r\nwindow.addEventListener('message', (event) => {\r\n  const {\r\n    type,\r\n    target\r\n  } = event.data;\r\n\r\n  if (event.source !== window) {\r\n    return;\r\n  }\r\n\r\n  const browserMessages = listenAndSendMessageFromPageToBackground(event);\r\n\r\n  browserMessages.map(({\r\n    messageType,\r\n    messageTarget,\r\n    messageNewTarget,\r\n    messageData\r\n  }) => {\r\n    if (type === messageType && target === messageTarget) {\r\n      browser.runtime.sendMessage({\r\n        type: messageType,\r\n        target: messageNewTarget,\r\n        messageData\r\n      });\r\n    }\r\n  });\r\n}, false);\r\n\r\nbrowser.runtime.onMessage.addListener((request) => {\r\n  const {\r\n    type,\r\n    target\r\n  } = request;\r\n\r\n  const messages = getMessagesToListenTo(request);\r\n\r\n  messages.map(({\r\n    messageType,\r\n    messageTarget,\r\n    messageNewTarget,\r\n    responseItem,\r\n    messageResponse\r\n  }) => {\r\n    if (type === messageType && target === messageTarget) {\r\n      window.postMessage({\r\n        type: messageType,\r\n        target: messageNewTarget,\r\n        [responseItem]: messageResponse\r\n      }, '*');\r\n    }\r\n  });\r\n});\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/scripts/ContentScript/index.ts b/extension/source/scripts/ContentScript/index.ts
--- a/extension/source/scripts/ContentScript/index.ts	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/scripts/ContentScript/index.ts	(date 1637064532447)
@@ -112,6 +112,11 @@
 
   injectScriptFile('js/inpage.bundle.js');
   console.log('injecting inpage after')
+
+  browser.runtime.sendMessage({
+    type: 'RELOAD_DATA',
+    target: 'background'
+  });
 }
 
 window.addEventListener('message', (event) => {
Index: extension/source/containers/auth/Settings/views/DeleteWalletView/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Button } from 'components/index';;\r\n// import { useController, useUtils } from 'hooks/index';\r\nimport ViewLayout from '../Layout';\r\n\r\nconst DeleteWalletView = () => {\r\n  // const controller = useController();\r\n  const history = useHistory();\r\n  // const { alert } = useUtils();\r\n\r\n  // const onSubmit = (data: any) => {\r\n  //   if (controller.wallet.checkPassword(data.password)) {\r\n  //     controller.wallet.deleteWallet(data.password);\r\n  //     history.push('/app.html');\r\n\r\n  //     return;\r\n  //   }\r\n\r\n  //   alert.removeAll();\r\n  //   alert.error('Error: Invalid password');\r\n  // };\r\n\r\n  return (\r\n    <ViewLayout title=\"DELETE WALLET\">\r\n      <div >\r\n        <form>\r\n          <span>\r\n            <b>Warning:</b> this action will delete your wallet and all accounts\r\n            associated with this wallet. Please make sure to back up your Wallet\r\n            seed phase if you would like to access this wallet and associated\r\n            accounts in the future.\r\n          </span>\r\n          <span>Please enter your wallet password:</span>\r\n          <input type=\"text\" />\r\n          <div>\r\n            <Button\r\n              type=\"button\"\r\n              onClick={() => history.goBack()}\r\n            >\r\n              Close\r\n            </Button>\r\n            <Button\r\n              type=\"submit\"\r\n            >\r\n              Delete\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </ViewLayout>\r\n  );\r\n};\r\n\r\nexport default DeleteWalletView;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Settings/views/DeleteWalletView/index.tsx b/extension/source/containers/auth/Settings/views/DeleteWalletView/index.tsx
--- a/extension/source/containers/auth/Settings/views/DeleteWalletView/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Settings/views/DeleteWalletView/index.tsx	(date 1637064532370)
@@ -2,7 +2,7 @@
 import { useHistory } from 'react-router-dom';
 import { Button } from 'components/index';;
 // import { useController, useUtils } from 'hooks/index';
-import ViewLayout from '../Layout';
+import { AuthViewLayout } from 'containers/common/Layout';
 
 const DeleteWalletView = () => {
   // const controller = useController();
@@ -22,7 +22,7 @@
   // };
 
   return (
-    <ViewLayout title="DELETE WALLET">
+    <AuthViewLayout title="DELETE WALLET">
       <div >
         <form>
           <span>
@@ -48,7 +48,7 @@
           </div>
         </form>
       </div>
-    </ViewLayout>
+    </AuthViewLayout>
   );
 };
 
Index: extension/source/containers/auth/Settings/views/PrivateKeyView/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { FC } from 'react';\r\n// import { useController, useFormat, useUtils, useStore } from 'hooks/index';\r\n// import CryptoJS from 'crypto-js';\r\nimport ViewLayout from '../Layout';\r\n\r\ninterface IPrivateKeyView {\r\n  id?: string;\r\n}\r\n\r\nconst PrivateKeyView: FC<IPrivateKeyView> = (/*{ id }*/) => {\r\n  // const controller = useController();\r\n  // const { alert, useCopyClipboard } = useUtils();\r\n  // const { accounts } = useStore();\r\n  // const { ellipsis } = useFormat();\r\n\r\n  // // const [isCopied, copyText] = useCopyClipboard();\r\n  // const [checked, setChecked] = useState<boolean>(false);\r\n  // // const [isCopiedAddress, copyAddress] = useState<boolean>(false);\r\n  // const [privKey, setPrivKey] = useState<string>(\r\n  //   '*************************************************************'\r\n  // );\r\n\r\n  // const addressClass = clsx(styles.address, {\r\n  //   [styles.copied]: isCopied && isCopiedAddress,\r\n  // });\r\n  // const privKeyClass = clsx(styles.privKey, {\r\n  //   [styles.copied]: isCopied && !isCopiedAddress,\r\n  //   [styles.notAllowed]: !checked,\r\n  // });\r\n\r\n  // const onSubmit = (data: any) => {\r\n  //   if (controller.wallet.checkPassword(data.password)) {\r\n  //     setPrivKey(controller.wallet.account.decryptAES(accounts[Number(id)].xprv, CryptoJS.SHA3(data.password).toString()));\r\n  //     setChecked(true);\r\n  //     return;\r\n  //   }\r\n\r\n  //   alert.removeAll();\r\n  //   alert.error('Error: Invalid password');\r\n  // };\r\n\r\n  // const handleCopyPrivKey = () => {\r\n  //   if (!checked) return;\r\n  //   // copyAddress(false);\r\n  //   // copyText(privKey);\r\n  // };\r\n\r\n  return (\r\n    <ViewLayout title=\"PRIVATE KEY\">\r\n      <div >\r\n        {/* {accounts[Number(id)] && (\r\n          <>\r\n            <div >\r\n              <div>Click to copy your account xpub:</div>\r\n              <span\r\n              // onClick={() => {\r\n              //   copyText(accounts[Number(id)].xpub);\r\n              //   copyAddress(true);\r\n              // }}\r\n              >\r\n                {ellipsis(accounts[Number(id)].xpub)}\r\n              </span>\r\n            </div>\r\n            <div >\r\n              <span>Please input your wallet password and press enter:</span>\r\n              <form onSubmit={handleSubmit(onSubmit)}>\r\n                input\r\n              </form>\r\n              <span>Click to copy your private key:</span>\r\n              <div onClick={handleCopyPrivKey}>\r\n                <span>{ellipsis(privKey)}</span>\r\n              </div>\r\n              <span>\r\n                <b>Warning:</b> Keep your keys secret! Anyone with your private\r\n                keys can steal your assets .\r\n              </span>\r\n            </div>\r\n          </>\r\n        )} */}\r\n\r\n        <p>private key view</p>\r\n      </div>\r\n    </ViewLayout>\r\n\r\n  );\r\n};\r\n\r\nexport default PrivateKeyView;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Settings/views/PrivateKeyView/index.tsx b/extension/source/containers/auth/Settings/views/PrivateKeyView/index.tsx
--- a/extension/source/containers/auth/Settings/views/PrivateKeyView/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Settings/views/PrivateKeyView/index.tsx	(date 1637064532374)
@@ -1,7 +1,7 @@
 import React, { FC } from 'react';
 // import { useController, useFormat, useUtils, useStore } from 'hooks/index';
 // import CryptoJS from 'crypto-js';
-import ViewLayout from '../Layout';
+import { AuthViewLayout } from 'containers/common/Layout';
 
 interface IPrivateKeyView {
   id?: string;
@@ -46,7 +46,7 @@
   // };
 
   return (
-    <ViewLayout title="PRIVATE KEY">
+    <AuthViewLayout title="PRIVATE KEY">
       <div >
         {/* {accounts[Number(id)] && (
           <>
@@ -80,7 +80,7 @@
 
         <p>private key view</p>
       </div>
-    </ViewLayout>
+    </AuthViewLayout>
 
   );
 };
Index: extension/source/containers/auth/Settings/views/NewAccountView/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\r\n// import { Button, Icon } from 'components/index';;\r\n// import { useController, useFormat } from 'hooks/index';\r\n// import { ellipsis } from 'containers/auth/helpers';\r\n\r\n// import { MAIN_VIEW } from '../routes';\r\nimport ViewLayout from '../Layout';\r\n// import { useHistory } from 'react-router-dom';\r\n\r\nconst NewAccountView = () => {\r\n  // const [address, setAddress] = useState<string | undefined>();\r\n  // const controller = useController();\r\n  // const { ellipsis } = useFormat();\r\n  // const [isCopied, copyText] = useCopyClipboard();\r\n  // const [loading, setLoading] = useState<boolean>(false);\r\n  // const history = useHistory();\r\n\r\n  // const onSubmit = async (data: any) => {\r\n  //   setLoading(true);\r\n  //   const res = await controller.wallet.account.addNewAccount(data.name);\r\n\r\n  //   if (res) {\r\n  //     setAddress(res);\r\n  //     setLoading(false);\r\n\r\n  //     await controller.wallet.account.updateTokensState();\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <ViewLayout title=\"CREATE ACCOUNT\">\r\n      {/* <span>Your new account has been created</span>\r\n      <span>Click to copy your public address:</span>\r\n      <span\r\n      // onClick={() => {\r\n      //   copyText(address);\r\n      // }}\r\n      >\r\n        {ellipsis(address)}\r\n      </span>\r\n      <div>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={() => history.push('/home')}\r\n        >\r\n          Finish\r\n        </Button>\r\n      </div> */}\r\n\r\n      {/* <form>\r\n        <span>Please name your new account:</span>\r\n        <input type=\"text\" />\r\n        <div>\r\n          <Button\r\n            type=\"button\"\r\n            onClick={() => history.push('/home')}\r\n          >\r\n            Close\r\n          </Button>\r\n          {loading ? (\r\n            <div>\r\n              <Icon name=\"loading\" className=\"w-4 bg-brand-graydark100 text-brand-white\" />\r\n            </div>\r\n          ) : (\r\n            <Button\r\n              type=\"submit\"\r\n              disabled={loading}\r\n            >\r\n              Next\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </form> */}\r\n      <p>new account</p>\r\n    </ViewLayout>\r\n  );\r\n};\r\n\r\nexport default NewAccountView;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Settings/views/NewAccountView/index.tsx b/extension/source/containers/auth/Settings/views/NewAccountView/index.tsx
--- a/extension/source/containers/auth/Settings/views/NewAccountView/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Settings/views/NewAccountView/index.tsx	(date 1637064532371)
@@ -1,10 +1,9 @@
 import React from 'react';
 // import { Button, Icon } from 'components/index';;
 // import { useController, useFormat } from 'hooks/index';
-// import { ellipsis } from 'containers/auth/helpers';
 
 // import { MAIN_VIEW } from '../routes';
-import ViewLayout from '../Layout';
+import { AuthViewLayout } from 'containers/common/Layout';
 // import { useHistory } from 'react-router-dom';
 
 const NewAccountView = () => {
@@ -28,7 +27,7 @@
   // };
 
   return (
-    <ViewLayout title="CREATE ACCOUNT">
+    <AuthViewLayout title="CREATE ACCOUNT">
       {/* <span>Your new account has been created</span>
       <span>Click to copy your public address:</span>
       <span
@@ -72,7 +71,7 @@
         </div>
       </form> */}
       <p>new account</p>
-    </ViewLayout>
+    </AuthViewLayout>
   );
 };
 
Index: extension/source/scripts/Background/helpers.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export const getHost = (url: string) => {\r\n  if (typeof url === 'string' && url !== '') {\r\n    return new URL(url).host;\r\n  }\r\n\r\n  return url;\r\n};\r\n\r\nexport const sendMessage = (\r\n  eventReceivedDetails: any,\r\n  postMessageDetails: any\r\n) => {\r\n  return new Promise((resolve) => {\r\n    const callback = (event: any) => {\r\n      if (\r\n        event.data.type === eventReceivedDetails.type &&\r\n        event.data.target === eventReceivedDetails.target\r\n      ) {\r\n        resolve(\r\n          eventReceivedDetails.freeze\r\n            ? Object.freeze(event.data[eventReceivedDetails.eventResult])\r\n            : event.data[eventReceivedDetails.eventResult]\r\n        );\r\n\r\n        window.removeEventListener('message', callback);\r\n\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    };\r\n\r\n    window.addEventListener('message', callback);\r\n\r\n    window.postMessage(postMessageDetails, '*');\r\n  });\r\n};\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/scripts/Background/helpers.ts b/extension/source/scripts/Background/helpers.ts
--- a/extension/source/scripts/Background/helpers.ts	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/scripts/Background/helpers.ts	(date 1637064532443)
@@ -6,6 +6,7 @@
   return url;
 };
 
+
 export const sendMessage = (
   eventReceivedDetails: any,
   postMessageDetails: any
Index: demo/src/components/AdvancedPanel.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { useEffect, useState } from \"react\";\r\n\r\nimport { elementEventHandler } from \"../utils/elementEventHandler\";\r\n\r\nexport default function AdvancedPanel({\r\n  onChange,\r\n  renderContractField = false,\r\n  toggleButton = false,\r\n  onIssueSupplyIntoCirculationChange = () => {},\r\n  renderIssuerRightsField = true\r\n}) {\r\n  const [contract, setContract] = useState(\"\");\r\n  const [capabilityflags, setCapabilityFlags] = useState(127);\r\n  const [endpoint, setEndpoint] = useState();\r\n  const [instanttransfers, setInstantTransfers] = useState(false);\r\n  const [hdrequired, setHDRequired] = useState(false);\r\n  const [auxfeekeyid, setAuxFeeKeyID] = useState();\r\n  const [auxfees, setAuxFees] = useState([]);\r\n  const [notaryAddress, setNotaryAddress] = useState();\r\n\r\n  useEffect(() => {\r\n    if (typeof onChange === \"function\") {\r\n      const state = {\r\n        ...(contract && { contract }),\r\n        ...(capabilityflags && { capabilityflags }),\r\n        ...(endpoint && {\r\n          notarydetails: { endpoint, instanttransfers, hdrequired },\r\n        }),\r\n        ...(auxfeekeyid && {\r\n          auxfeedetails: {\r\n            auxfeekeyid,\r\n            auxfees: auxfees.length ? auxfees : [{ bound: 0, percent: 0 }],\r\n          },\r\n        }),\r\n        ...(notaryAddress && { notaryAddress }),\r\n      };\r\n\r\n      onChange(state);\r\n    }\r\n  }, [\r\n    contract,\r\n    capabilityflags,\r\n    endpoint,\r\n    instanttransfers,\r\n    hdrequired,\r\n    auxfeekeyid,\r\n    auxfees,\r\n    notaryAddress,\r\n  ]);\r\n\r\n  const handleInputChange = (setState) => {\r\n    return (event) => {\r\n      const target = event.target;\r\n\r\n      target.type !== \"checkbox\"\r\n        ? setState(target.value)\r\n        : setState(target.checked);\r\n    };\r\n  };\r\n\r\n  const handleCapabilityFlags = (event) => {\r\n    const value = Number(event.target.value);\r\n    const isChecked = event.target.checked;\r\n\r\n    setCapabilityFlags((prevValue) => {\r\n      return isChecked ? prevValue - value : prevValue + value;\r\n    });\r\n    \r\n    event.target.id === \"issue-supply\" &&\r\n      onIssueSupplyIntoCirculationChange(isChecked);\r\n  };\r\n\r\n  const handleAddFee = (event) => {\r\n    event.preventDefault();\r\n\r\n    const bound = document.querySelector(\"#bound\");\r\n    const percent = document.querySelector(\"#percent\");\r\n\r\n    if (!bound.value || !percent.value) return;\r\n\r\n    if ([bound.value, percent.value].some((v) => isNaN(Number(v)))) {\r\n      bound.value = \"\";\r\n      percent.value = \"\";\r\n\r\n      return;\r\n    }\r\n\r\n    setAuxFees([...auxfees, { bound: bound.value, percent: percent.value }]);\r\n\r\n    bound.value = \"\";\r\n    percent.value = \"\";\r\n  };\r\n\r\n  const handleRemoveFee = (fee) => {\r\n    return function (event) {\r\n      event.preventDefault();\r\n\r\n      const newAuxFees = auxfees.filter((f) => f !== fee);\r\n\r\n      setAuxFees(newAuxFees);\r\n    };\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (toggleButton) {\r\n      const advanced = document.querySelector(\".advanced\");\r\n      const advancedPanel = document.querySelector(\".advanced-panel\");\r\n\r\n      elementEventHandler([\"click\"], \"\", function () {\r\n        this.classList.toggle(\"open\");\r\n        advancedPanel.classList.toggle(\"open\");\r\n      })(advanced);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"form-line gray\">\r\n      {toggleButton && (\r\n        <div className=\"form-group col-100\">\r\n          <div className=\"advanced\">\r\n            Advanced <i className=\"icon-right-open\"></i>\r\n            <i className=\"icon-down-open\"></i>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <div className={`advanced-panel ${!toggleButton && \"open\"}`}>\r\n        <div className=\"form-line\">\r\n          <div className=\"label-spacing\">\r\n            <label>Compliance & Business Rulesets</label>\r\n          </div>\r\n          <div className=\"form-group col-50 spaced col-sm-100\">\r\n            <label htmlFor=\"signer\">\r\n              Signer Address *{\" \"}\r\n              <i className=\"icon-info-circled\" title=\"help goes here\"></i>\r\n            </label>\r\n            <input\r\n              onChange={handleInputChange(setNotaryAddress)}\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"signer\"\r\n              placeholder=\"\"\r\n            />\r\n            <p className=\"help-block\">\r\n              Address that will notarize transactions\r\n            </p>\r\n          </div>\r\n          <div className=\"form-group col-50 spaced col-sm-100\">\r\n            <label htmlFor=\"endpointurl\">\r\n              Endpoint URL *{\" \"}\r\n              <i className=\"icon-info-circled\" title=\"help goes here\"></i>\r\n            </label>\r\n            <input\r\n              onChange={handleInputChange(setEndpoint)}\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"endpointurl\"\r\n              placeholder=\"\"\r\n            />\r\n            <p className=\"help-block\">URL to your notary API</p>\r\n          </div>\r\n          <div className=\"form-group col-100\">\r\n            <div className=\"checkbox small\">\r\n              <label>\r\n                <input\r\n                  onChange={handleInputChange(setInstantTransfers)}\r\n                  type=\"checkbox\"\r\n                />\r\n                Notary provides double-spend protection and guarantees safe\r\n                instant transfers (Default: OFF)\r\n              </label>\r\n            </div>\r\n            <div className=\"checkbox small\">\r\n              <label>\r\n                <input\r\n                  onChange={handleInputChange(setHDRequired)}\r\n                  type=\"checkbox\"\r\n                />{\" \"}\r\n                HD required for asset transfers (all senders must supply their\r\n                XPUB & HD Path) (Default: OFF)\r\n              </label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {renderIssuerRightsField && (\r\n          <div className=\"form-line half\">\r\n            <div className=\"form-group col-100\">\r\n              <div className=\"label-spacing\">\r\n                <label>Issuer Rights</label>\r\n              </div>\r\n            </div>\r\n            <div className=\"form-group col-100\">\r\n              <div className=\"checkbox small\">\r\n                <label>\r\n                  <input\r\n                    id=\"issue-supply\"\r\n                    onChange={handleCapabilityFlags}\r\n                    type=\"checkbox\"\r\n                    value={4}\r\n                  />\r\n                  Issue supply into circulation (LOCKED - ALWAYS ON)\r\n                </label>\r\n              </div>\r\n              <div className=\"checkbox small\">\r\n                <label>\r\n                  <input\r\n                    onChange={handleCapabilityFlags}\r\n                    type=\"checkbox\"\r\n                    value={1}\r\n                  />\r\n                  Edit field value: [public_value]\r\n                </label>\r\n              </div>\r\n              <div className=\"checkbox small\">\r\n                <label>\r\n                  <input\r\n                    onChange={handleCapabilityFlags}\r\n                    type=\"checkbox\"\r\n                    value={2}\r\n                  />\r\n                  Edit field value: [contract]\r\n                </label>\r\n              </div>\r\n              <div className=\"checkbox small\">\r\n                <label>\r\n                  <input\r\n                    onChange={handleCapabilityFlags}\r\n                    type=\"checkbox\"\r\n                    value={8}\r\n                  />\r\n                  Edit field value: [notary_address]\r\n                </label>\r\n              </div>\r\n              <div className=\"checkbox small\">\r\n                <label>\r\n                  <input\r\n                    onChange={handleCapabilityFlags}\r\n                    type=\"checkbox\"\r\n                    value={16}\r\n                  />\r\n                  Edit field value: [notary_details]\r\n                </label>\r\n              </div>\r\n              <div className=\"checkbox small\">\r\n                <label>\r\n                  <input\r\n                    onChange={handleCapabilityFlags}\r\n                    type=\"checkbox\"\r\n                    value={32}\r\n                  />\r\n                  Edit field value: [auxfee]\r\n                </label>\r\n              </div>\r\n              <div className=\"checkbox small\">\r\n                <label>\r\n                  <input\r\n                    onChange={handleCapabilityFlags}\r\n                    type=\"checkbox\"\r\n                    value={64}\r\n                  />\r\n                  Edit field value: [capability_flags]\r\n                </label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        <div className={`form-line half ${renderIssuerRightsField ? \"right\" : \"left\"}`}>\r\n          <div className=\"form-group col-100\">\r\n            <div className=\"label-spacing\">\r\n              <label>Auxiliary Fees</label>\r\n            </div>\r\n          </div>\r\n          <div className=\"form-group col-100 spaced\">\r\n            <label htmlFor=\"payout\">\r\n              Payout Address *{\" \"}\r\n              <i className=\"icon-info-circled\" title=\"help goes here\"></i>\r\n            </label>\r\n            <input\r\n              onChange={handleInputChange(setAuxFeeKeyID)}\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              id=\"payout\"\r\n              placeholder=\"\"\r\n            />\r\n          </div>\r\n          <div className=\"form-group col-100\">\r\n            <div className=\"row nested\">\r\n              <div className=\"form-group col-40\">\r\n                <p className=\"help-block\">Bound</p>\r\n              </div>\r\n              <div className=\"form-group col-40\">\r\n                <p className=\"help-block\">Percent</p>\r\n              </div>\r\n            </div>\r\n            {auxfees.map((fee, i) => (\r\n              <div className=\"row nested\" key={i}>\r\n                <div className=\"form-group col-40\">\r\n                  <input\r\n                    value={fee.bound}\r\n                    disabled\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group col-40\">\r\n                  <input\r\n                    value={fee.percent}\r\n                    disabled\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                  />\r\n                </div>\r\n                <div className=\"form-group col-20\">\r\n                  <button className=\"small\" onClick={handleRemoveFee(fee)}>\r\n                    <i className=\"icon-cancel\"></i>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            ))}\r\n\r\n            <div className=\"row nested\">\r\n              <div className=\"form-group col-40\">\r\n                <input type=\"text\" className=\"form-control\" id=\"bound\" />\r\n              </div>\r\n              <div className=\"form-group col-40\">\r\n                <input type=\"text\" className=\"form-control\" id=\"percent\" />\r\n              </div>\r\n              <div className=\"form-group col-20\">\r\n                <button className=\"small\" onClick={handleAddFee}>\r\n                  <i className=\"icon-plus\"></i>\r\n                </button>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"row nested\">\r\n              <div className=\"col-100\">\r\n                <p className=\"help-block\">\r\n                  At least one Bound | Percent pair is required\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {renderContractField && (\r\n          <div className=\"form-line spaced-top\">\r\n            <div className=\"form-group col-100\">\r\n              <label htmlFor=\"contract\">\r\n                Contract{\" \"}\r\n                <i className=\"icon-info-circled\" title=\"help goes here\"></i>\r\n              </label>\r\n              <input\r\n                onChange={handleInputChange(setContract)}\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"contract\"\r\n                placeholder=\"\"\r\n              />\r\n              <p className=\"help-block\">\r\n                ERC-20 Contract linked to this token via Syscoin Bridge\r\n              </p>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/demo/src/components/AdvancedPanel.js b/demo/src/components/AdvancedPanel.js
--- a/demo/src/components/AdvancedPanel.js	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/demo/src/components/AdvancedPanel.js	(date 1637064532269)
@@ -6,7 +6,7 @@
   onChange,
   renderContractField = false,
   toggleButton = false,
-  onIssueSupplyIntoCirculationChange = () => {},
+  onIssueSupplyIntoCirculationChange = () => { },
   renderIssuerRightsField = true
 }) {
   const [contract, setContract] = useState("");
@@ -17,6 +17,8 @@
   const [auxfeekeyid, setAuxFeeKeyID] = useState();
   const [auxfees, setAuxFees] = useState([]);
   const [notaryAddress, setNotaryAddress] = useState();
+  const [bound, setBound] = useState(0);
+  const [percent, setPercent] = useState(0);
 
   useEffect(() => {
     if (typeof onChange === "function") {
@@ -29,7 +31,7 @@
         ...(auxfeekeyid && {
           auxfeedetails: {
             auxfeekeyid,
-            auxfees: auxfees.length ? auxfees : [{ bound: 0, percent: 0 }],
+            auxfees: auxfees.length > 0 ? auxfees : [{ bound, percent }],
           },
         }),
         ...(notaryAddress && { notaryAddress }),
@@ -65,31 +67,28 @@
     setCapabilityFlags((prevValue) => {
       return isChecked ? prevValue - value : prevValue + value;
     });
-    
+
     event.target.id === "issue-supply" &&
       onIssueSupplyIntoCirculationChange(isChecked);
   };
 
-  const handleAddFee = (event) => {
-    event.preventDefault();
+  // const handleAddFee = (event) => {
+  //   event.preventDefault();
 
-    const bound = document.querySelector("#bound");
-    const percent = document.querySelector("#percent");
+  //   if (!bound || !percent) return;
 
-    if (!bound.value || !percent.value) return;
+  //   if ([bound, percent].some((v) => isNaN(Number(v)))) {
+  //     bound = "";
+  //     percent = "";
 
-    if ([bound.value, percent.value].some((v) => isNaN(Number(v)))) {
-      bound.value = "";
-      percent.value = "";
+  //     return;
+  //   }
 
-      return;
-    }
+  //   setAuxFees([...auxfees, { bound, percent }]);
 
-    setAuxFees([...auxfees, { bound: bound.value, percent: percent.value }]);
-
-    bound.value = "";
-    percent.value = "";
-  };
+  //   bound = "";
+  //   percent = "";
+  // };
 
   const handleRemoveFee = (fee) => {
     return function (event) {
@@ -293,22 +292,22 @@
                 <p className="help-block">Percent</p>
               </div>
             </div>
-            {auxfees.map((fee, i) => (
+            {/* {auxfees.map((fee, i) => (
               <div className="row nested" key={i}>
                 <div className="form-group col-40">
                   <input
-                    value={fee.bound}
                     disabled
                     type="text"
                     className="form-control"
+                    id="bound"
                   />
                 </div>
                 <div className="form-group col-40">
                   <input
-                    value={fee.percent}
                     disabled
                     type="text"
                     className="form-control"
+                    id="percent"
                   />
                 </div>
                 <div className="form-group col-20">
@@ -317,10 +316,35 @@
                   </button>
                 </div>
               </div>
-            ))}
+            ))} */}
 
             <div className="row nested">
               <div className="form-group col-40">
+                <input
+                  onChange={(event) => {
+                    setBound(event.target.value)
+                    setAuxFees([{ bound: event.target.value, percent }])
+                  }}
+                  type="text"
+                  className="form-control"
+                  id="bound"
+                />
+              </div>
+              <div className="form-group col-40">
+                <input
+                  onChange={(event) => {
+                    setPercent(event.target.value)
+                    setAuxFees([{ bound, percent: event.target.value }])
+                  }}
+                  type="text"
+                  className="form-control"
+                  id="percent"
+                />
+              </div>
+            </div>
+
+            {/* <div className="row nested">
+              <div className="form-group col-40">
                 <input type="text" className="form-control" id="bound" />
               </div>
               <div className="form-group col-40">
@@ -331,7 +355,7 @@
                   <i className="icon-plus"></i>
                 </button>
               </div>
-            </div>
+            </div> */}
 
             <div className="row nested">
               <div className="col-100">
Index: extension/source/containers/auth/Settings/views/AutolockView/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\r\n// import { Button } from 'components/index';;\r\n// import { useController, useUtils, useStore } from 'hooks/index';\r\n// import IWalletState from 'state/wallet/types';\r\n// import { useSelector } from 'react-redux';\r\n// import { RootState } from 'state/store';\r\nimport ViewLayout from '../Layout';\r\n// import { useHistory } from 'react-router-dom';\r\n\r\nconst AutolockView = () => {\r\n  // const [confirmed, setConfirmed] = useState<boolean>(false);\r\n  // const controller = useController();\r\n  // const { timer } = useStore();\r\n  // const { alert } = useUtils();\r\n\r\n  // const [loading, setLoading] = useState<boolean>(false);\r\n  // const [minutes, setMinutes] = useState<string>(String(timer));\r\n  // const history = useHistory();\r\n\r\n  // const onSubmit = async (data: any) => {\r\n  //   setLoading(true);\r\n  //   controller.wallet.account.setAutolockTimer(data.minutes);\r\n  //   setConfirmed(true);\r\n  // };\r\n\r\n  // const handleMinutesChange = useCallback(\r\n  //   (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n  //     setMinutes(event.target.value.replace(/[^0-9]/g, '').replace(/(\\..*?)\\*/g, '$1'));\r\n\r\n  //     if (Number(event.target.value) > 30 ) {\r\n  //       alert.removeAll();\r\n  //       alert.error('Maximum 30 minutes of no activity.', { timeout: 2000 })\r\n  //     }\r\n  //   },\r\n  //   []\r\n  // );\r\n\r\n  return (\r\n    <ViewLayout title=\"AUTO LOCK TIMER\">\r\n      <p>auto lock timer</p>\r\n    </ViewLayout>\r\n  );\r\n};\r\n\r\nexport default AutolockView;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Settings/views/AutolockView/index.tsx b/extension/source/containers/auth/Settings/views/AutolockView/index.tsx
--- a/extension/source/containers/auth/Settings/views/AutolockView/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Settings/views/AutolockView/index.tsx	(date 1637064532366)
@@ -4,7 +4,7 @@
 // import IWalletState from 'state/wallet/types';
 // import { useSelector } from 'react-redux';
 // import { RootState } from 'state/store';
-import ViewLayout from '../Layout';
+import { AuthViewLayout } from 'containers/common/Layout';
 // import { useHistory } from 'react-router-dom';
 
 const AutolockView = () => {
@@ -36,10 +36,10 @@
   // );
 
   return (
-    <ViewLayout title="AUTO LOCK TIMER">
+    <AuthViewLayout title="AUTO LOCK TIMER">
       <p>auto lock timer</p>
-    </ViewLayout>
+    </AuthViewLayout>
   );
 };
 
-export default AutolockView;
+export default AutolockView;
\ No newline at end of file
Index: extension/source/scripts/Background/index.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* eslint-disable prettier/prettier */\r\nimport 'emoji-log';\r\nimport { STORE_PORT } from 'constants/index';\r\nimport { wrapStore } from 'webext-redux';\r\n\r\nimport { browser } from 'webextension-polyfill-ts';\r\nimport store from 'state/store';\r\nimport {\r\n  setSenderURL,\r\n  updateCanConnect,\r\n  updateCurrentURL,\r\n  updateConnectionsArray,\r\n  removeConnection,\r\n  updateCanConfirmTransaction,\r\n  createAsset,\r\n  issueAsset,\r\n  issueNFT,\r\n  setUpdateAsset,\r\n  setTransferOwnership,\r\n  clearAllTransactions,\r\n  signTransactionState,\r\n  signPSBTState,\r\n  setIssueNFT,\r\n} from 'state/wallet';\r\nimport { IAccountState } from 'state/wallet/types';\r\n\r\nimport MasterController, { IMasterController } from './controllers';\r\nimport { getHost } from './helpers';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    controller: Readonly<IMasterController>;\r\n    senderURL: string;\r\n  }\r\n}\r\n\r\nif (!window.controller) {\r\n  window.controller = Object.freeze(MasterController());\r\n  setInterval(window.controller.stateUpdater, 3 * 60 * 1000);\r\n}\r\n\r\nconst getTabs = async (options: any) => {\r\n  return await browser.tabs.query(options);\r\n};\r\n\r\nconst getConnectedAccountIndex = ({ match }: any) => {\r\n  return store.getState().wallet.accounts.findIndex((account: IAccountState) => {\r\n    return account.connectedTo.find((url: string) => {\r\n      return url === match;\r\n    })\r\n  });\r\n};\r\n\r\nconst checkIsLocked = () => {\r\n  return window.controller.wallet.isLocked();\r\n};\r\n\r\nconst checkToCallPrivateMethods = () => {\r\n  if (checkIsLocked()) {\r\n    throw new Error('Please, check if your wallet is unlocked and try again.');\r\n  }\r\n\r\n  if (getConnectedAccountIndex({ match: new URL(store.getState().wallet.tabs.currentURL).host }) === -1) {\r\n    throw new Error('Connect an account and try again.');\r\n  }\r\n};\r\n\r\nconst runtimeSendMessageToTabs = async ({ tabId, messageDetails }: any) => {\r\n  return await browser.tabs.sendMessage(Number(tabId), messageDetails);\r\n}\r\n\r\nconst updateActiveWindow = async ({ windowId, options }: any) => {\r\n  return await browser.windows.update(Number(windowId), options);\r\n}\r\n\r\nconst observeStore = async (store: any) => {\r\n  let currentState: any;\r\n\r\n  const handleChange = async () => {\r\n    const nextState = store.getState();\r\n\r\n    if (nextState !== currentState) {\r\n      currentState = nextState;\r\n\r\n      const tabs: any = await getTabs({ active: true, windowType: 'normal' });\r\n      console.log('tabs firefox', tabs, nextState)\r\n\r\n      for (const tab of tabs) {\r\n        if (tab) {\r\n          if (getConnectedAccountIndex({ match: new URL(String(tab.url)).host }) >= 0) {\r\n            try {\r\n              await runtimeSendMessageToTabs({\r\n                tabId: Number(tab.id),\r\n                messageDetails: {\r\n                  type: 'WALLET_UPDATED',\r\n                  target: 'contentScript',\r\n                  connected: false\r\n                }\r\n              });\r\n            } catch (error) {\r\n              console.log('error', error);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const unsubscribe = store.subscribe(handleChange);\r\n\r\n  await handleChange();\r\n\r\n  return unsubscribe;\r\n};\r\n\r\nobserveStore(store);\r\n\r\nconst createPopup = async (url: string) => {\r\n  console.log('create popup url', url)\r\n  const [tab]: any = await getTabs({ active: true, lastFocusedWindow: true });\r\n\r\n  console.log(\"tab create popup\", tab)\r\n\r\n  if (tab.title === 'Pali Wallet') {\r\n    console.log('tab title pali wallet', tab)\r\n    return;\r\n  }\r\n\r\n  store.dispatch(updateCurrentURL(String(tab.url)));\r\n\r\n  const [sysWalletPopup]: any = await getTabs({ url: browser.runtime.getURL('app.html') });\r\n\r\n  console.log('sysWalletpopup exists', sysWalletPopup)\r\n\r\n  if (sysWalletPopup) {\r\n    console.log('sys wallet popup active update window', sysWalletPopup)\r\n    \r\n    await updateActiveWindow({\r\n      windowId: Number(sysWalletPopup.windowId),\r\n      options: {\r\n        drawAttention: true,\r\n        focused: true\r\n      }\r\n    });\r\n\r\n    return;\r\n  }\r\n\r\n  await browser.windows.create({\r\n    url,\r\n    type: \"popup\",\r\n    height: 600,\r\n    width: 372,\r\n    left: 900,\r\n    top: 90,\r\n  });\r\n};\r\n\r\nconst closePopup = () => {\r\n  store.dispatch(updateCanConnect(false));\r\n  store.dispatch(clearAllTransactions());\r\n\r\n  browser.tabs.query({ active: true })\r\n    .then(async (tabs) => {\r\n      tabs.map(async (tab) => {\r\n        if (tab.title === 'Pali Wallet') {\r\n          await browser.windows.remove(Number(tab.windowId));\r\n        }\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      console.log('error removing window', error);\r\n    });;\r\n\r\n  return;\r\n}\r\n\r\nlet timeout: any;\r\n\r\nconst restartLockTimeout = () => {\r\n  const {\r\n    confirmingTransaction,\r\n    creatingAsset,\r\n    issuingNFT,\r\n    issuingAsset,\r\n    updatingAsset,\r\n    transferringOwnership,\r\n    signingTransaction,\r\n    signingPSBT,\r\n    mintNFT,\r\n    timer\r\n  } = store.getState().wallet;\r\n\r\n  if (timeout) {\r\n    clearTimeout(timeout);\r\n  }\r\n\r\n  timeout = setTimeout(() => {\r\n    if (\r\n      !checkIsLocked()\r\n      && !confirmingTransaction\r\n      && !creatingAsset\r\n      && !issuingNFT\r\n      && !issuingAsset\r\n      && !updatingAsset\r\n      && !transferringOwnership\r\n      && !signingTransaction\r\n      && !signingPSBT\r\n      && !mintNFT\r\n    ) {\r\n      window.controller.wallet.logOut();\r\n\r\n      setTimeout(() => closePopup(), 2000);\r\n\r\n      return;\r\n    }\r\n\r\n    console.log('can\\'t lock automatically - wallet is under transaction');\r\n  }, timer * 60 * 1000);\r\n};\r\n\r\nconst executeMessages = async () => {\r\n  console.emoji('\uD83E\uDD29', 'Pali extension ebabled');\r\n\r\n  window.controller.stateUpdater();\r\n\r\n  browser.runtime.onMessage.addListener(async (request, sender) => {\r\n    const {\r\n      type,\r\n      target\r\n    } = request;\r\n\r\n    let tabId: any;\r\n\r\n    const tabs = await getTabs({});\r\n\r\n    const [tab]: any = await getTabs({ active: true, windowType: 'normal' });\r\n\r\n    if (tab) {\r\n      if (getConnectedAccountIndex({ match: new URL(String(tab.url)).host }) >= 0) {\r\n        tabId = tab.id;\r\n      }\r\n    }\r\n\r\n    if (typeof request === 'object') {\r\n      if (type == 'SET_MOUSE_MOVE' && target == 'background') {\r\n        restartLockTimeout();\r\n      }\r\n\r\n      if (type == 'CONNECT_WALLET' && target == 'background') {\r\n        const url = browser.runtime.getURL('app.html');\r\n\r\n        store.dispatch(setSenderURL(String(sender.url)));\r\n        store.dispatch(updateCanConnect(true));\r\n\r\n        await createPopup(url);\r\n\r\n        window.senderURL = String(sender.url);\r\n\r\n        return;\r\n      }\r\n\r\n      if (type == 'WALLET_ERROR' && target == 'background') {\r\n        const {\r\n          transactionError,\r\n          invalidParams,\r\n          message\r\n        } = request;\r\n\r\n        runtimeSendMessageToTabs({ tabId, messageDetails: { type: 'WALLET_ERROR', target: 'contentScript', transactionError, invalidParams, message } });\r\n      }\r\n\r\n      if (type == 'TRANSACTION_RESPONSE' && target == 'background') {\r\n        runtimeSendMessageToTabs({ tabId, messageDetails: { type: 'TRANSACTION_RESPONSE', target: 'contentScript', response: request.response } });\r\n\r\n        const interval = setInterval(async () => {\r\n          if (request.response.txid) {\r\n            const data = await window.controller.wallet.account.getTransactionInfoByTxId(request.response.txid);\r\n\r\n            console.log('updating tokens state using txid: ', request.response.txid)\r\n\r\n            if (data.confirmations > 0) {\r\n              window.controller.wallet.account.updateTokensState().then(() => {\r\n                window.controller.wallet.account.setHDSigner(store.getState().wallet.activeAccountId);\r\n              });\r\n\r\n              clearInterval(interval);\r\n            }\r\n          }\r\n        }, 6000);\r\n      }\r\n\r\n      if (type == 'RESET_CONNECTION_INFO' && target == 'background') {\r\n        const { id, url } = request;\r\n\r\n        store.dispatch(updateCanConnect(false));\r\n        store.dispatch(removeConnection({ accountId: id, url }));\r\n        store.dispatch(setSenderURL(''));\r\n\r\n        browser.tabs.query({ url })\r\n          .then((tabs) => {\r\n            if (tabs) {\r\n              tabs.map((tab: any) => {\r\n                Promise.resolve(browser.tabs.sendMessage(Number(tab.id), {\r\n                  type: 'WALLET_UPDATED',\r\n                  target: 'contentScript',\r\n                  connected: false\r\n                }).then(() => {\r\n                  console.log('wallet updated')\r\n                }).catch(() => {\r\n                  console.log('extension context invalidated in other tabs with the same url, you need to refresh the tab')\r\n                }))\r\n              })\r\n            }\r\n          }).catch((error) => {\r\n            console.log('error getting tabs', error);\r\n          });\r\n\r\n        return;\r\n      }\r\n\r\n      if (type == 'SELECT_ACCOUNT' && target == 'background') {\r\n        store.dispatch(updateConnectionsArray({\r\n          accountId: request.id,\r\n          url: window.senderURL\r\n        }));\r\n\r\n        return;\r\n      }\r\n\r\n      if (type == 'CHANGE_CONNECTED_ACCOUNT' && target == 'background') {\r\n        store.dispatch(updateConnectionsArray({\r\n          accountId: request.id,\r\n          url: window.senderURL\r\n        }));\r\n\r\n        return;\r\n      }\r\n\r\n      if (type == 'CONFIRM_CONNECTION' && target == 'background') {\r\n        if (getHost(window.senderURL)) {\r\n          store.dispatch(updateCanConnect(false));\r\n\r\n          for (let tab of tabs) {\r\n            browser.tabs.sendMessage(Number(tab.id), {\r\n              type: 'WALLET_CONNECTION_CONFIRMED',\r\n              target: 'contentScript',\r\n              connectionConfirmed: true,\r\n              state: store.getState().wallet\r\n            }).then(() => {\r\n              console.log('wallet connection confirmed')\r\n            }).catch((error) => {\r\n              console.log('error confirming connection', error);\r\n            });\r\n          }\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      if (type == 'CANCEL_TRANSACTION' && target == 'background') {\r\n        const { item } = request;\r\n\r\n        store.dispatch(clearAllTransactions());\r\n\r\n        window.controller.wallet.account.clearTransactionItem(item);\r\n\r\n        return;\r\n      }\r\n\r\n      if (type == 'CLOSE_POPUP' && target == 'background') {\r\n        closePopup();\r\n      }\r\n\r\n      if (type == 'SEND_STATE_TO_PAGE' && target == 'background') {\r\n        checkToCallPrivateMethods();\r\n\r\n        const {\r\n          status,\r\n          accounts,\r\n          activeAccountId,\r\n          activeNetwork,\r\n          confirmingTransaction,\r\n          creatingAsset,\r\n          issuingAsset,\r\n          issuingNFT,\r\n          mintNFT,\r\n          updatingAsset,\r\n          transferringOwnership,\r\n          changingNetwork,\r\n          signingTransaction,\r\n          signingPSBT,\r\n          walletTokens,\r\n        } = store.getState().wallet;\r\n\r\n        const copyAccounts: any = {};\r\n\r\n        for (const { address, id, balance, assets, isTrezorWallet, label, transactions, xpub } of accounts) {\r\n          copyAccounts[id] = {\r\n            address,\r\n            balance,\r\n            assets,\r\n            id,\r\n            isTrezorWallet: isTrezorWallet,\r\n            label: label,\r\n            transactions: transactions,\r\n            xpub: xpub\r\n          }\r\n        }\r\n\r\n        browser.tabs.sendMessage(Number(sender.tab?.id), {\r\n          type: 'SEND_STATE_TO_PAGE',\r\n          target: 'contentScript',\r\n          state: getConnectedAccountIndex({ match: new URL(store.getState().wallet.tabs.currentURL).host }) > -1 && !window.controller.wallet.isLocked() ? {\r\n            status,\r\n            accounts: Object.values(copyAccounts),\r\n            activeAccountId,\r\n            activeNetwork,\r\n            confirmingTransaction,\r\n            creatingAsset,\r\n            issuingAsset,\r\n            issuingNFT,\r\n            mintNFT,\r\n            updatingAsset,\r\n            transferringOwnership,\r\n            changingNetwork,\r\n            signingTransaction,\r\n            signingPSBT,\r\n            walletTokens,\r\n          } : null\r\n        });\r\n      }\r\n\r\n      if (type == 'CHECK_IS_LOCKED' && target == 'background') {\r\n        const isLocked = window.controller.wallet.isLocked();\r\n\r\n        browser.tabs.sendMessage(Number(sender.tab?.id), {\r\n          type: 'CHECK_IS_LOCKED',\r\n          target: 'contentScript',\r\n          isLocked\r\n        });\r\n      }\r\n\r\n      if (type == 'SEND_CONNECTED_ACCOUNT' && target == 'background') {\r\n        const connectedAccount: any = store.getState().wallet.accounts.find((account: IAccountState) => {\r\n          return account.connectedTo.find((url) => {\r\n            return url === getHost(store.getState().wallet.tabs.currentURL)\r\n          });\r\n        });\r\n\r\n        let copyConnectedAccount: any = null;\r\n\r\n        if (connectedAccount) {\r\n          copyConnectedAccount = {\r\n            address: connectedAccount.address,\r\n            balance: connectedAccount.balance,\r\n            assets: connectedAccount.assets,\r\n            id: connectedAccount.id,\r\n            isTrezorWallet: connectedAccount.isTrezorWallet,\r\n            label: connectedAccount.label,\r\n            transactions: connectedAccount.transactions,\r\n            xpub: connectedAccount.xpub\r\n          }\r\n        }\r\n\r\n        browser.tabs.sendMessage(Number(sender.tab?.id), {\r\n          type: 'SEND_CONNECTED_ACCOUNT',\r\n          target: 'contentScript',\r\n          copyConnectedAccount\r\n        });\r\n      }\r\n\r\n      if (type == 'CONNECTED_ACCOUNT_XPUB' && target == 'background') {\r\n        checkToCallPrivateMethods();\r\n\r\n        browser.tabs.sendMessage(Number(sender.tab?.id), {\r\n          type: 'CONNECTED_ACCOUNT_XPUB',\r\n          target: 'contentScript',\r\n          connectedAccountXpub: window.controller.wallet.account.getConnectedAccountXpub()\r\n        });\r\n      }\r\n\r\n      if (type == 'CONNECTED_ACCOUNT_CHANGE_ADDRESS' && target == 'background') {\r\n        checkToCallPrivateMethods();\r\n\r\n        browser.tabs.sendMessage(Number(sender.tab?.id), {\r\n          type: 'CONNECTED_ACCOUNT_CHANGE_ADDRESS',\r\n          target: 'contentScript',\r\n          connectedAccountChangeAddress: await window.controller.wallet.account.getChangeAddress()\r\n        });\r\n      }\r\n\r\n      if (type == 'CHECK_ADDRESS' && target == 'background') {\r\n        checkToCallPrivateMethods();\r\n\r\n        const isValidSYSAddress = window.controller.wallet.account.isValidSYSAddress(request.messageData, store.getState().wallet.activeNetwork);\r\n\r\n        browser.tabs.sendMessage(Number(sender.tab?.id), {\r\n          type: 'CHECK_ADDRESS',\r\n          target: 'contentScript',\r\n          isValidSYSAddress\r\n        });\r\n      }\r\n\r\n      if (type == 'SIGN_AND_SEND' && target == 'background') {\r\n        checkToCallPrivateMethods();\r\n\r\n        const { messageData } = request;\r\n\r\n        window.controller.wallet.account.setCurrentPSBT(messageData);\r\n\r\n        store.dispatch(signTransactionState(true));\r\n\r\n        const appURL = browser.runtime.getURL('app.html');\r\n\r\n        await createPopup(appURL);\r\n\r\n        browser.tabs.sendMessage(Number(sender.tab?.id), {\r\n          type: 'SIGN_AND_SEND',\r\n          target: 'contentScript',\r\n          complete: true\r\n        });\r\n      }\r\n\r\n      if (type == 'SIGN_PSBT' && target == 'background') {\r\n        checkToCallPrivateMethods();\r\n\r\n        const { messageData } = request;\r\n\r\n        window.controller.wallet.account.setCurrentPsbtToSign(messageData);\r\n\r\n        store.dispatch(signPSBTState(true));\r\n\r\n        const appURL = browser.runtime.getURL('app.html');\r\n\r\n        await createPopup(appURL);\r\n\r\n        browser.tabs.sendMessage(Number(sender.tab?.id), {\r\n          type: 'SIGN_PSBT',\r\n          target: 'contentScript',\r\n          complete: true\r\n        });\r\n      }\r\n\r\n      if (type == 'GET_HOLDINGS_DATA' && target == 'background') {\r\n        checkToCallPrivateMethods();\r\n\r\n        const holdingsData = await window.controller.wallet.account.getHoldingsData();\r\n\r\n        browser.tabs.sendMessage(Number(sender.tab?.id), {\r\n          type: 'GET_HOLDINGS_DATA',\r\n          target: 'contentScript',\r\n          holdingsData\r\n        });\r\n\r\n      }\r\n\r\n      if (type == 'SEND_TOKEN' && target == 'background') {\r\n        checkToCallPrivateMethods();\r\n\r\n        const {\r\n          fromConnectedAccount,\r\n          toAddress,\r\n          amount,\r\n          fee,\r\n          token,\r\n          isToken,\r\n          rbf\r\n        } = request.messageData;\r\n\r\n        window.controller.wallet.account.updateTempTx({\r\n          fromAddress: fromConnectedAccount,\r\n          toAddress,\r\n          amount,\r\n          fee,\r\n          token,\r\n          isToken,\r\n          rbf\r\n        });\r\n\r\n        store.dispatch(updateCanConfirmTransaction(true));\r\n\r\n        const appURL = browser.runtime.getURL('app.html');\r\n\r\n        await createPopup(appURL);\r\n\r\n        browser.tabs.sendMessage(Number(sender.tab?.id), {\r\n          type: 'SEND_TOKEN',\r\n          target: 'contentScript',\r\n          complete: true\r\n        });\r\n      }\r\n\r\n      if (type == 'DATA_FROM_PAGE_TO_CREATE_TOKEN' && target == 'background') {\r\n        const {\r\n          precision,\r\n          symbol,\r\n          maxsupply,\r\n          description,\r\n          receiver,\r\n          initialSupply,\r\n          capabilityflags,\r\n          notarydetails,\r\n          auxfeedetails,\r\n          notaryAddress,\r\n          payoutAddress\r\n        } = request.messageData;\r\n\r\n        if (precision < 0 || precision > 8) {\r\n          throw new Error('invalid precision value');\r\n        }\r\n\r\n        if (maxsupply < 0) {\r\n          throw new Error('invalid max supply value');\r\n        }\r\n\r\n        if (initialSupply < 0) {\r\n          throw new Error('invalid initial supply value');\r\n        }\r\n\r\n        if (!window.controller.wallet.account.isValidSYSAddress(receiver, store.getState().wallet.activeNetwork)) {\r\n          throw new Error('invalid receiver address');\r\n        }\r\n\r\n        window.controller.wallet.account.setDataFromPageToCreateNewSPT({\r\n          precision,\r\n          symbol,\r\n          maxsupply,\r\n          description,\r\n          receiver,\r\n          initialSupply,\r\n          capabilityflags,\r\n          notarydetails,\r\n          auxfeedetails,\r\n          notaryAddress,\r\n          payoutAddress\r\n        });\r\n\r\n        store.dispatch(createAsset(true));\r\n\r\n        const appURL = browser.runtime.getURL('app.html');\r\n\r\n        await createPopup(appURL);\r\n\r\n        browser.tabs.sendMessage(Number(sender.tab?.id), {\r\n          type: 'DATA_FROM_PAGE_TO_CREATE_TOKEN',\r\n          target: 'contentScript',\r\n          complete: true\r\n        });\r\n      }\r\n\r\n      if (type == 'DATA_FROM_WALLET_TO_CREATE_TOKEN' && target == 'background') {\r\n        window.controller.wallet.account.createSPT({\r\n          ...window.controller.wallet.account.getDataFromPageToInitTransaction().dataFromPageToCreateSPT,\r\n          ...window.controller.wallet.account.getDataFromPageToInitTransaction().dataFromWalletToCreateSPT\r\n        });\r\n      }\r\n\r\n      if (type == 'ISSUE_SPT' && target == 'background') {\r\n        checkToCallPrivateMethods();\r\n\r\n        const {\r\n          amount,\r\n          assetGuid\r\n        } = request.messageData;\r\n\r\n        const assetFromAssetGuid = window.controller.wallet.account.getDataAsset(assetGuid);\r\n\r\n        if (amount < 0 || amount >= assetFromAssetGuid.balance) {\r\n          throw new Error('invalid amount value');\r\n        }\r\n\r\n        window.controller.wallet.account.setDataFromPageToMintSPT({\r\n          assetGuid,\r\n          amount: Number(amount)\r\n        });\r\n\r\n        store.dispatch(issueAsset(true));\r\n\r\n        const appURL = browser.runtime.getURL('app.html');\r\n\r\n        await createPopup(appURL);\r\n\r\n        browser.tabs.sendMessage(Number(sender.tab?.id), {\r\n          type: 'ISSUE_SPT',\r\n          target: 'contentScript',\r\n          complete: true\r\n        });\r\n      }\r\n\r\n      if (type == 'DATA_FROM_WALLET_TO_MINT_TOKEN' && target == 'background') {\r\n        window.controller.wallet.account.issueSPT({\r\n          ...window.controller.wallet.account.getDataFromPageToInitTransaction().dataFromPageToMintSPT,\r\n          ...window.controller.wallet.account.getDataFromPageToInitTransaction().dataFromWalletToMintSPT\r\n        });\r\n      }\r\n\r\n      if (type == 'CREATE_AND_ISSUE_NFT' && target == 'background') {\r\n        checkToCallPrivateMethods();\r\n\r\n\r\n        const {\r\n          symbol,\r\n          issuer,\r\n          precision,\r\n          description,\r\n          notarydetails,\r\n          auxfeedetails,\r\n          notaryAddress,\r\n          payoutAddress,\r\n        } = request.messageData;\r\n\r\n        if (precision < 0 || precision > 8) {\r\n          throw new Error('invalid total shares value');\r\n        }\r\n\r\n        if (!window.controller.wallet.account.isValidSYSAddress(issuer, store.getState().wallet.activeNetwork)) {\r\n          throw new Error('invalid receiver address');\r\n        }\r\n\r\n        window.controller.wallet.account.setDataFromPageToMintNFT({\r\n          symbol,\r\n          issuer,\r\n          precision,\r\n          description,\r\n          notarydetails,\r\n          auxfeedetails,\r\n          notaryAddress,\r\n          payoutAddress,\r\n        });\r\n\r\n        store.dispatch(issueNFT(true));\r\n\r\n        const appURL = browser.runtime.getURL('app.html');\r\n\r\n        await createPopup(appURL);\r\n\r\n        browser.tabs.sendMessage(Number(sender.tab?.id), {\r\n          type: 'CREATE_AND_ISSUE_NFT',\r\n          target: 'contentScript',\r\n          complete: true\r\n        });\r\n      }\r\n\r\n      if (type == 'DATA_FROM_WALLET_TO_MINT_NFT' && target == 'background') {\r\n        window.controller.wallet.account.issueNFT({\r\n          ...window.controller.wallet.account.getDataFromPageToInitTransaction().dataFromPageToMintNFT,\r\n          ...window.controller.wallet.account.getDataFromPageToInitTransaction().dataFromWalletToMintNFT\r\n        });\r\n      }\r\n\r\n      if (type == 'UPDATE_ASSET' && target == 'background') {\r\n        checkToCallPrivateMethods();\r\n\r\n        const {\r\n          assetGuid,\r\n          contract,\r\n          capabilityflags,\r\n          description,\r\n          notarydetails,\r\n          auxfeedetails,\r\n          notaryAddress,\r\n          payoutAddress\r\n        } = request.messageData;\r\n\r\n        window.controller.wallet.account.setDataFromPageToUpdateAsset({\r\n          assetGuid,\r\n          contract,\r\n          capabilityflags,\r\n          description,\r\n          notarydetails,\r\n          auxfeedetails,\r\n          notaryAddress,\r\n          payoutAddress\r\n        });\r\n\r\n        store.dispatch(setUpdateAsset(true));\r\n\r\n        const appURL = browser.runtime.getURL('app.html');\r\n\r\n        await createPopup(appURL);\r\n\r\n        browser.tabs.sendMessage(Number(sender.tab?.id), {\r\n          type: 'UPDATE_ASSET',\r\n          target: 'contentScript',\r\n          complete: true\r\n        });\r\n      }\r\n\r\n      if (type == 'DATA_FROM_WALLET_TO_UPDATE_TOKEN' && target == 'background') {\r\n        window.controller.wallet.account.setUpdateAsset({\r\n          ...window.controller.wallet.account.getDataFromPageToInitTransaction().dataFromPageToUpdateAsset,\r\n          ...window.controller.wallet.account.getDataFromPageToInitTransaction().dataFromWalletToUpdateAsset\r\n        });\r\n      }\r\n\r\n      if (type == 'TRANSFER_OWNERSHIP' && target == 'background') {\r\n        checkToCallPrivateMethods();\r\n\r\n        const {\r\n          assetGuid,\r\n          newOwner\r\n        } = request.messageData;\r\n\r\n        if (!window.controller.wallet.account.isValidSYSAddress(newOwner, store.getState().wallet.activeNetwork)) {\r\n          throw new Error('invalid new owner address');\r\n        }\r\n\r\n        window.controller.wallet.account.setDataFromPageToTransferOwnership({\r\n          assetGuid,\r\n          newOwner\r\n        });\r\n\r\n        store.dispatch(setTransferOwnership(true));\r\n\r\n        const appURL = browser.runtime.getURL('app.html');\r\n\r\n        await createPopup(appURL);\r\n\r\n        browser.tabs.sendMessage(Number(sender.tab?.id), {\r\n          type: 'TRANSFER_OWNERSHIP',\r\n          target: 'contentScript',\r\n          complete: true\r\n        });\r\n      }\r\n\r\n      if (type == 'DATA_FROM_WALLET_TO_TRANSFER_OWNERSHIP' && target == 'background') {\r\n        window.controller.wallet.account.setNewOwnership({\r\n          ...window.controller.wallet.account.getDataFromPageToInitTransaction().dataFromPageToTransferOwnership,\r\n          ...window.controller.wallet.account.getDataFromPageToInitTransaction().dataFromWalletToTransferOwnership\r\n        });\r\n      }\r\n\r\n      if (type == 'ISSUE_NFT' && target == 'background') {\r\n        checkToCallPrivateMethods();\r\n\r\n        const {\r\n          assetGuid,\r\n          amount\r\n        } = request.messageData;\r\n\r\n        window.controller.wallet.account.setDataFromPageToIssueNFT({\r\n          assetGuid,\r\n          amount\r\n        });\r\n\r\n        store.dispatch(setIssueNFT(true));\r\n\r\n        const appURL = browser.runtime.getURL('app.html');\r\n\r\n        await createPopup(appURL);\r\n\r\n        browser.tabs.sendMessage(Number(sender.tab?.id), {\r\n          type: 'ISSUE_NFT',\r\n          target: 'contentScript',\r\n          complete: true\r\n        });\r\n      }\r\n\r\n      if (type == 'DATA_FROM_WALLET_TO_ISSUE_NFT' && target == 'background') {\r\n        window.controller.wallet.account.setNewIssueNFT({\r\n          ...window.controller.wallet.account.getDataFromPageToInitTransaction().dataFromPageToIssueNFT,\r\n          ...window.controller.wallet.account.getDataFromPageToInitTransaction().dataFromWalletToIssueNFT\r\n        });\r\n      }\r\n\r\n      if (type == 'GET_USER_MINTED_TOKENS' && target == 'background') {\r\n        checkToCallPrivateMethods();\r\n\r\n        const tokensMinted = await window.controller.wallet.account.getUserMintedTokens();\r\n\r\n        browser.tabs.sendMessage(Number(sender.tab?.id), {\r\n          type: 'GET_USER_MINTED_TOKENS',\r\n          target: 'contentScript',\r\n          userTokens: tokensMinted\r\n        });\r\n      }\r\n\r\n      if (type == 'GET_ASSET_DATA' && target == 'background') {\r\n        checkToCallPrivateMethods();\r\n\r\n        const assetData = await window.controller.wallet.account.getDataAsset(request.messageData);\r\n\r\n        browser.tabs.sendMessage(Number(sender.tab?.id), {\r\n          type: 'GET_ASSET_DATA',\r\n          target: 'contentScript',\r\n          assetData\r\n        });\r\n      }\r\n    }\r\n  });\r\n\r\n  browser.runtime.onConnect.addListener((port) => {\r\n    if (port.name == 'trezor-connect') {\r\n      return;\r\n    }\r\n\r\n    browser.tabs.query({ active: true, lastFocusedWindow: true })\r\n      .then((tabs) => {\r\n        if (tabs[0].title === 'Pali Wallet') {\r\n          return;\r\n        }\r\n\r\n        store.dispatch(updateCurrentURL(String(tabs[0].url)));\r\n      });\r\n  });\r\n}\r\n\r\nbrowser.runtime.onInstalled.addListener(async () => {\r\n  await executeMessages();\r\n});\r\n\r\nbrowser.management.onEnabled.addListener(async () => {\r\n  browser.runtime.reload();\r\n\r\n  await executeMessages();\r\n});\r\n\r\n//@ts-ignore\r\nbrowser.runtime.onSuspend.addListener(() => {\r\n  browser.runtime.reload();\r\n  browser.management.setEnabled('*', true);\r\n});\r\n\r\nwrapStore(store, { portName: STORE_PORT });
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/scripts/Background/index.ts b/extension/source/scripts/Background/index.ts
--- a/extension/source/scripts/Background/index.ts	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/scripts/Background/index.ts	(date 1637064532445)
@@ -34,192 +34,180 @@
   }
 }
 
-if (!window.controller) {
-  window.controller = Object.freeze(MasterController());
-  setInterval(window.controller.stateUpdater, 3 * 60 * 1000);
-}
+const executeMessages = async () => {
+  if (!window.controller) {
+    window.controller = Object.freeze(MasterController());
+    setInterval(window.controller.stateUpdater, 3 * 60 * 1000);
+  }
 
-const getTabs = async (options: any) => {
-  return await browser.tabs.query(options);
-};
+  let timeout: any;
+
+  const restartLockTimeout = () => {
+    const {
+      confirmingTransaction,
+      creatingAsset,
+      issuingNFT,
+      issuingAsset,
+      updatingAsset,
+      transferringOwnership,
+      signingTransaction,
+      signingPSBT,
+      mintNFT,
+      timer
+    } = store.getState().wallet;
+
+    if (timeout) {
+      clearTimeout(timeout);
+    }
+
+    timeout = setTimeout(() => {
+      if (
+        !checkIsLocked()
+        && !confirmingTransaction
+        && !creatingAsset
+        && !issuingNFT
+        && !issuingAsset
+        && !updatingAsset
+        && !transferringOwnership
+        && !signingTransaction
+        && !signingPSBT
+        && !mintNFT
+      ) {
+        window.controller.wallet.logOut();
+
+        setTimeout(() => closePopup(), 2000);
+
+        return;
+      }
+
+      console.log('can\'t lock automatically - wallet is under transaction');
+    }, timer * 60 * 1000);
+  };
+
+  const getTabs = async (options: any) => {
+    return await browser.tabs.query(options);
+  };
 
-const getConnectedAccountIndex = ({ match }: any) => {
-  return store.getState().wallet.accounts.findIndex((account: IAccountState) => {
-    return account.connectedTo.find((url: string) => {
-      return url === match;
-    })
-  });
-};
+  const getConnectedAccountIndex = ({ match }: any) => {
+    return store.getState().wallet.accounts.findIndex((account: IAccountState) => {
+      return account.connectedTo.find((url: string) => {
+        return url === match;
+      })
+    });
+  };
 
-const checkIsLocked = () => {
-  return window.controller.wallet.isLocked();
-};
+  const checkIsLocked = () => {
+    return window.controller.wallet.isLocked();
+  };
 
-const checkToCallPrivateMethods = () => {
-  if (checkIsLocked()) {
-    throw new Error('Please, check if your wallet is unlocked and try again.');
-  }
+  const checkToCallPrivateMethods = () => {
+    if (checkIsLocked()) {
+      throw new Error('Please, check if your wallet is unlocked and try again.');
+    }
 
-  if (getConnectedAccountIndex({ match: new URL(store.getState().wallet.tabs.currentURL).host }) === -1) {
-    throw new Error('Connect an account and try again.');
-  }
-};
+    if (getConnectedAccountIndex({ match: new URL(store.getState().wallet.tabs.currentURL).host }) === -1) {
+      throw new Error('Connect an account and try again.');
+    }
+  };
 
-const runtimeSendMessageToTabs = async ({ tabId, messageDetails }: any) => {
-  return await browser.tabs.sendMessage(Number(tabId), messageDetails);
-}
+  const runtimeSendMessageToTabs = async ({ tabId, messageDetails }: any) => {
+    return await browser.tabs.sendMessage(Number(tabId), messageDetails);
+  }
 
-const updateActiveWindow = async ({ windowId, options }: any) => {
-  return await browser.windows.update(Number(windowId), options);
-}
+  const updateActiveWindow = async ({ windowId, options }: any) => {
+    return await browser.windows.update(Number(windowId), options);
+  }
 
-const observeStore = async (store: any) => {
-  let currentState: any;
+  const observeStore = async (store: any) => {
+    let currentState: any;
 
-  const handleChange = async () => {
-    const nextState = store.getState();
+    const handleChange = async () => {
+      const nextState = store.getState();
 
-    if (nextState !== currentState) {
-      currentState = nextState;
+      if (nextState !== currentState) {
+        currentState = nextState;
 
-      const tabs: any = await getTabs({ active: true, windowType: 'normal' });
-      console.log('tabs firefox', tabs, nextState)
+        const tabs: any = await getTabs({ active: true, windowType: 'normal' });
 
-      for (const tab of tabs) {
-        if (tab) {
-          if (getConnectedAccountIndex({ match: new URL(String(tab.url)).host }) >= 0) {
-            try {
-              await runtimeSendMessageToTabs({
-                tabId: Number(tab.id),
-                messageDetails: {
-                  type: 'WALLET_UPDATED',
-                  target: 'contentScript',
-                  connected: false
-                }
-              });
-            } catch (error) {
-              console.log('error', error);
-            }
-          }
-        }
-      }
-    }
-  }
+        for (const tab of tabs) {
+          if (tab) {
+            if (getConnectedAccountIndex({ match: new URL(String(tab.url)).host }) >= 0) {
+              try {
+                await runtimeSendMessageToTabs({
+                  tabId: Number(tab.id),
+                  messageDetails: {
+                    type: 'WALLET_UPDATED',
+                    target: 'contentScript',
+                    connected: false
+                  }
+                });
+              } catch (error) {
+                console.log('error', error);
+              }
+            }
+          }
+        }
+      }
+    }
 
-  const unsubscribe = store.subscribe(handleChange);
+    const unsubscribe = store.subscribe(handleChange);
 
-  await handleChange();
+    await handleChange();
 
-  return unsubscribe;
-};
+    return unsubscribe;
+  };
 
-observeStore(store);
+  observeStore(store);
 
-const createPopup = async (url: string) => {
-  console.log('create popup url', url)
-  const [tab]: any = await getTabs({ active: true, lastFocusedWindow: true });
+  const createPopup = async (url: string) => {
+    const [tab]: any = await getTabs({ active: true, lastFocusedWindow: true });
 
-  console.log("tab create popup", tab)
-
-  if (tab.title === 'Pali Wallet') {
-    console.log('tab title pali wallet', tab)
-    return;
-  }
+    if (tab.title === 'Pali Wallet') {
+      return;
+    }
 
-  store.dispatch(updateCurrentURL(String(tab.url)));
+    store.dispatch(updateCurrentURL(String(tab.url)));
 
-  const [sysWalletPopup]: any = await getTabs({ url: browser.runtime.getURL('app.html') });
-
-  console.log('sysWalletpopup exists', sysWalletPopup)
+    const [sysWalletPopup]: any = await getTabs({ url: browser.extension.getURL('app.html') });
 
-  if (sysWalletPopup) {
-    console.log('sys wallet popup active update window', sysWalletPopup)
-    
-    await updateActiveWindow({
-      windowId: Number(sysWalletPopup.windowId),
-      options: {
-        drawAttention: true,
-        focused: true
-      }
-    });
+    if (sysWalletPopup) {
+      await updateActiveWindow({
+        windowId: Number(sysWalletPopup.windowId),
+        options: {
+          drawAttention: true,
+          focused: true
+        }
+      });
 
-    return;
-  }
+      return;
+    }
 
-  await browser.windows.create({
-    url,
-    type: "popup",
-    height: 600,
-    width: 372,
-    left: 900,
-    top: 90,
-  });
-};
+    window.open(url, "Pali Wallet", "width=372, height=600, left=900, top=90");
+
+    // sysPopup.onbeforeunload = () => {
+    //   store.dispatch(clearAllTransactions());
+    // }
+  };
 
-const closePopup = () => {
-  store.dispatch(updateCanConnect(false));
-  store.dispatch(clearAllTransactions());
+  const closePopup = () => {
+    store.dispatch(updateCanConnect(false));
+    store.dispatch(clearAllTransactions());
 
-  browser.tabs.query({ active: true })
-    .then(async (tabs) => {
-      tabs.map(async (tab) => {
-        if (tab.title === 'Pali Wallet') {
-          await browser.windows.remove(Number(tab.windowId));
-        }
-      });
-    })
-    .catch((error) => {
-      console.log('error removing window', error);
-    });;
+    browser.tabs.query({ active: true })
+      .then(async (tabs) => {
+        tabs.map(async (tab) => {
+          if (tab.title === 'Pali Wallet') {
+            await browser.windows.remove(Number(tab.windowId));
+          }
+        });
+      })
+      .catch((error) => {
+        console.log('error removing window', error);
+      });;
 
-  return;
-}
+    return;
+  }
 
-let timeout: any;
-
-const restartLockTimeout = () => {
-  const {
-    confirmingTransaction,
-    creatingAsset,
-    issuingNFT,
-    issuingAsset,
-    updatingAsset,
-    transferringOwnership,
-    signingTransaction,
-    signingPSBT,
-    mintNFT,
-    timer
-  } = store.getState().wallet;
-
-  if (timeout) {
-    clearTimeout(timeout);
-  }
-
-  timeout = setTimeout(() => {
-    if (
-      !checkIsLocked()
-      && !confirmingTransaction
-      && !creatingAsset
-      && !issuingNFT
-      && !issuingAsset
-      && !updatingAsset
-      && !transferringOwnership
-      && !signingTransaction
-      && !signingPSBT
-      && !mintNFT
-    ) {
-      window.controller.wallet.logOut();
-
-      setTimeout(() => closePopup(), 2000);
-
-      return;
-    }
-
-    console.log('can\'t lock automatically - wallet is under transaction');
-  }, timer * 60 * 1000);
-};
-
-const executeMessages = async () => {
   console.emoji('🤩', 'Pali extension ebabled');
 
   window.controller.stateUpdater();
@@ -606,6 +594,8 @@
           payoutAddress
         } = request.messageData;
 
+        console.log('token create auxfee', auxfeedetails)
+
         if (precision < 0 || precision > 8) {
           throw new Error('invalid precision value');
         }
@@ -906,20 +896,14 @@
   });
 }
 
+browser.runtime.onMessage.addListener(async (request) => {
+  if (request.type === 'RELOAD_DATA' && request.target === 'background') {
+    await executeMessages()
+  }
+});
+
 browser.runtime.onInstalled.addListener(async () => {
   await executeMessages();
 });
 
-browser.management.onEnabled.addListener(async () => {
-  browser.runtime.reload();
-
-  await executeMessages();
-});
-
-//@ts-ignore
-browser.runtime.onSuspend.addListener(() => {
-  browser.runtime.reload();
-  browser.management.setEnabled('*', true);
-});
-
 wrapStore(store, { portName: STORE_PORT });
\ No newline at end of file
Index: extension/source/scripts/types.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export type Transaction = {\r\n  blockTime: number,\r\n  confirmations: number,\r\n  fees: number,\r\n  tokenType: string,\r\n  txid: string,\r\n  value: number,\r\n};\r\n\r\nexport type Assets = {\r\n  assetGuid: number,\r\n  balance: number,\r\n  decimals: number,\r\n  symbol: string,\r\n  type: string,\r\n};\r\n\r\nexport interface IAccountInfo {\r\n  address?: string;\r\n  assets: Assets[];\r\n  balance: number;\r\n  transactions: Transaction[];\r\n}\r\n\r\nexport interface ITransactionInfo {\r\n  amount: number;\r\n  fee: number;\r\n  fromAddress: string;\r\n  isToken: boolean;\r\n  rbf: boolean;\r\n  toAddress: string;\r\n  token: Assets | null;\r\n}\r\n\r\nexport interface ISPTInfo {\r\n  description: string;\r\n  fee: number;\r\n  maxsupply: number;\r\n  precision: number;\r\n  receiver: string;\r\n  symbol: string;\r\n}\r\n\r\nexport interface ISPTPageInfo {\r\n  description: string;\r\n  maxsupply: number;\r\n  precision: number;\r\n  receiver: string;\r\n  symbol: string;\r\n}\r\n\r\nexport interface ISPTWalletInfo {\r\n  fee: number;\r\n}\r\n\r\nexport interface ISPTIssue {\r\n  amount: number;\r\n  assetGuid: string;\r\n  fee: number;\r\n}\r\n\r\nexport interface ISPTIssuePage {\r\n  amount: number;\r\n  assetGuid: string;\r\n}\r\n\r\nexport interface ISPTIssueWallet {\r\n  fee: number;\r\n}\r\n\r\nexport interface INFTIssue {\r\n  assetGuid: string;\r\n  fee: number;\r\n}\r\n\r\nexport interface INFTPageInfo {\r\n  assetGuid: string;\r\n}\r\n\r\nexport interface INFTWalletInfo {\r\n  fee: number;\r\n}\r\n\r\nexport type PendingTx = {\r\n  blockTime: number,\r\n  confirmations: number,\r\n  fees: number,\r\n  txid: string,\r\n  value: number,\r\n};\r\n\r\nexport type MintedToken = {\r\n  assetGuid: string,\r\n  maxSupply: number,\r\n  symbol: string,\r\n  totalSupply: number,\r\n};\r\n\r\nexport type UpdateToken = {\r\n  assetGuid: string,\r\n  assetWhiteList?: any | null,\r\n  auxfeedetails?: any,\r\n  capabilityflags?: string | '127',\r\n  contract?: string | null,\r\n  description: string | null,\r\n  fee: number,\r\n  notaryAddress?: string,\r\n  notarydetails?: {\r\n    endpoint?: string,\r\n    hdrequired?: boolean,\r\n    instanttransfers?: boolean,\r\n  },\r\n  notarykeyid?: string,\r\n  payoutAddress?: string | null,\r\n};\r\n\r\nexport interface UpdateTokenPageInfo {\r\n  assetWhiteList?: any | null;\r\n  auxfeedetails?: {\r\n    auxfees?: [\r\n      {\r\n        bound?: any | 0,\r\n        percent?: any | 0,\r\n      }\r\n    ],\r\n  };\r\n  capabilityflags?: string | '127';\r\n  contract?: string;\r\n  description: string | '';\r\n  notarydetails?: {\r\n    endpoint?: string,\r\n    hdrequired?: boolean,\r\n    instanttransfers?: boolean,\r\n  };\r\n  notarykeyid?: string;\r\n  receiver?: string;\r\n}\r\n\r\nexport interface UpdateTokenWalletInfo {\r\n  fee: number;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/scripts/types.ts b/extension/source/scripts/types.ts
--- a/extension/source/scripts/types.ts	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/scripts/types.ts	(date 1637064532448)
@@ -119,8 +119,8 @@
   auxfeedetails?: {
     auxfees?: [
       {
-        bound?: any | 0,
-        percent?: any | 0,
+        bound?: any,
+        percent?: any,
       }
     ],
   };
Index: extension/source/routers/Auth.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useEffect } from 'react';\r\nimport { useAlert } from 'react-alert';\r\nimport { browser } from 'webextension-polyfill-ts';\r\nimport {\r\n  Switch,\r\n  Route,\r\n  // Redirect,\r\n  useLocation,\r\n  useHistory,\r\n} from 'react-router-dom';\r\nimport Start from 'containers/auth/Start';\r\nimport Home from 'containers/auth/Home';\r\nimport Send, { SendConfirm } from 'containers/auth/Send';\r\nimport UpdateAsset, { UpdateConfirm } from 'containers/auth/UpdateAsset';\r\nimport Create, { CreateTokenConfirm } from 'containers/auth/Create';\r\nimport IssueAsset, { IssueTokenConfirm } from 'containers/auth/IssueAsset';\r\nimport IssueNFT, { CreateAndIssueNFTConfirm } from 'containers/auth/IssueNFT';\r\nimport Receive from 'containers/auth/Receive';\r\nimport Import from 'containers/common/Import';\r\nimport ConnectWallet from 'containers/auth/ConnectWallet';\r\nimport ConnectedAccounts from 'containers/auth/ConnectWallet/ConnectedAccounts';\r\nimport { useController } from 'hooks/index';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from 'state/store';\r\nimport IWalletState from 'state/wallet/types';\r\nimport TransferOwnership, {\r\n  TransferOwnershipConfirm,\r\n} from 'containers/auth/TransferOwnership';\r\n\r\nimport { getHost } from '../scripts/Background/helpers';\r\n\r\nimport { SendMatchProps } from './types';\r\nimport SignPSBT from 'containers/auth/SignPSBT';\r\nimport MintNFT, { MintNFTConfirm } from 'containers/auth/MintNFT';\r\nimport SignAndSend from 'containers/auth/SignAndSend';\r\nimport {\r\n  AboutView,\r\n  AccountView,\r\n  AutolockView,\r\n  ConnectHardwareWalletView,\r\n  DeleteWalletView,\r\n  MainView,\r\n  NewAccountView,\r\n  PhraseView,\r\n  PrivateKeyView\r\n} from 'containers/auth/Settings/views';\r\n\r\nconst Auth = () => {\r\n  const location = useLocation();\r\n  const alert = useAlert();\r\n  const history = useHistory();\r\n  const controller = useController();\r\n  const isUnlocked = !controller.wallet.isLocked();\r\n\r\n  const {\r\n    accounts,\r\n    tabs,\r\n    confirmingTransaction,\r\n    creatingAsset,\r\n    issuingNFT,\r\n    issuingAsset,\r\n    updatingAsset,\r\n    transferringOwnership,\r\n    signingTransaction,\r\n    signingPSBT,\r\n    mintNFT,\r\n  }: IWalletState = useSelector((state: RootState) => state.wallet);\r\n  const { currentURL, canConnect } = tabs;\r\n\r\n  const connectedAccounts = accounts.filter((account) => {\r\n    return (\r\n      account.connectedTo.findIndex((url: any) => {\r\n        return url == getHost(currentURL);\r\n      }) > -1\r\n    );\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (\r\n      isUnlocked\r\n    ) {\r\n      window.addEventListener('mousemove', () => {\r\n        browser.runtime.sendMessage({\r\n          type: 'SET_MOUSE_MOVE',\r\n          target: 'background',\r\n        });\r\n      });\r\n    }\r\n  }, [\r\n    isUnlocked,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const redirectRoute = controller.appRoute();\r\n\r\n    if (\r\n      redirectRoute == '/send/confirm' &&\r\n      !controller.wallet.account.getTransactionItem().tempTx\r\n    ) {\r\n      history.push('/home');\r\n\r\n      return;\r\n    }\r\n\r\n    if (\r\n      redirectRoute == '/updateAsset/confirm' &&\r\n      !controller.wallet.account.getTransactionItem().updateAssetItem\r\n    ) {\r\n      history.push('/home');\r\n\r\n      return;\r\n    }\r\n\r\n    if (!isUnlocked && accounts.length > 0) {\r\n      history.push('/app.html');\r\n\r\n      return;\r\n    }\r\n\r\n    if (\r\n      confirmingTransaction &&\r\n      controller.wallet.account.getTransactionItem().tempTx &&\r\n      isUnlocked\r\n    ) {\r\n      history.push('/send/confirm');\r\n\r\n      return;\r\n    }\r\n\r\n    if (signingTransaction && isUnlocked) {\r\n      history.push('/sign');\r\n\r\n      return;\r\n    }\r\n\r\n    if (mintNFT && isUnlocked) {\r\n      history.push('/mintNFT');\r\n\r\n      return;\r\n    }\r\n\r\n    if (signingPSBT && isUnlocked) {\r\n      history.push('/signPsbt');\r\n\r\n      return;\r\n    }\r\n\r\n    if (creatingAsset && isUnlocked) {\r\n      history.push('/create');\r\n\r\n      return;\r\n    }\r\n\r\n    if (issuingAsset && isUnlocked) {\r\n      history.push('/issueAsset');\r\n\r\n      return;\r\n    }\r\n\r\n    if (issuingNFT && isUnlocked) {\r\n      history.push('/issueNFT');\r\n\r\n      return;\r\n    }\r\n\r\n    if (updatingAsset && isUnlocked) {\r\n      history.push('/updateAsset');\r\n\r\n      return;\r\n    }\r\n\r\n    if (transferringOwnership && isUnlocked) {\r\n      history.push('/transferOwnership');\r\n\r\n      return;\r\n    }\r\n\r\n    if (\r\n      !confirmingTransaction &&\r\n      controller.wallet.account.getTransactionItem().tempTx\r\n    ) {\r\n      history.push('/home');\r\n\r\n      return;\r\n    }\r\n\r\n    if (canConnect && isUnlocked) {\r\n      if (connectedAccounts.length <= 0) {\r\n        history.push('/connect-wallet');\r\n\r\n        return;\r\n      }\r\n\r\n      history.push('/connected-accounts');\r\n\r\n      return;\r\n    }\r\n\r\n    if (!canConnect && isUnlocked) {\r\n      if (connectedAccounts.length > 0) {\r\n        history.push('/home');\r\n\r\n        return;\r\n      }\r\n\r\n      history.push('/home');\r\n\r\n      return;\r\n    }\r\n\r\n    if (confirmingTransaction && !canConnect && isUnlocked) {\r\n      history.push('/send/confirm');\r\n\r\n      return;\r\n    }\r\n\r\n    if (redirectRoute !== '/app.html') {\r\n      history.push(redirectRoute);\r\n    }\r\n  }, [canConnect, isUnlocked, confirmingTransaction, updatingAsset]);\r\n\r\n  useEffect(() => {\r\n    alert.removeAll();\r\n    controller.appRoute(location.pathname);\r\n  }, [location]);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"absolute w-full h-full\">\r\n        <Switch>\r\n          <Route path=\"/app.html\" component={Start} exact />\r\n\r\n          {isUnlocked ? (\r\n            <>\r\n              <Route path=\"/home\" component={Home} exact />\r\n              <Route path=\"/send/confirm\" component={SendConfirm} exact />\r\n              <Route path=\"/sign\" component={SignAndSend} exact />\r\n              <Route path=\"/signPsbt\" component={SignPSBT} exact />\r\n              <Route path=\"/create\" component={Create} exact />\r\n              <Route\r\n                path=\"/create/confirm\"\r\n                component={CreateTokenConfirm}\r\n                exact\r\n              />\r\n              <Route path=\"/issueAsset\" component={IssueAsset} exact />\r\n              <Route\r\n                path=\"/issueAsset/confirm\"\r\n                component={IssueTokenConfirm}\r\n                exact\r\n              />\r\n              <Route path=\"/mintNFT\" component={MintNFT} exact />\r\n              <Route\r\n                path=\"/mintNFT/confirm\"\r\n                component={MintNFTConfirm}\r\n                exact\r\n              />\r\n              <Route path=\"/updateAsset\" component={UpdateAsset} exact />\r\n              <Route\r\n                path=\"/updateAsset/confirm\"\r\n                component={UpdateConfirm}\r\n                exact\r\n              />\r\n              <Route path=\"/issueNFT\" component={IssueNFT} exact />\r\n              <Route\r\n                path=\"/issueNFT/confirm\"\r\n                component={CreateAndIssueNFTConfirm}\r\n                exact\r\n              />\r\n              <Route\r\n                path=\"/transferOwnership\"\r\n                component={TransferOwnership}\r\n                exact\r\n              />\r\n              <Route\r\n                path=\"/transferOwnership/confirm\"\r\n                component={TransferOwnershipConfirm}\r\n                exact\r\n              />\r\n              <Route path=\"/send\" component={Send} exact />\r\n              <Route\r\n                path=\"/send/:address\"\r\n                render={({ match }: SendMatchProps) => (\r\n                  <Send initAddress={match.params.address} />\r\n                )}\r\n                exact\r\n              />\r\n              <Route path=\"/receive\" component={Receive} exact />\r\n              <Route\r\n                path='/general'\r\n                component={MainView}\r\n                exact\r\n              />\r\n              <Route path=\"/general-autolock\" component={AutolockView} exact />\r\n              <Route path=\"/general-about\" component={AboutView} exact />\r\n              <Route path=\"/general-phrase\" component={PhraseView} exact />\r\n              <Route path=\"/general-delete\" component={DeleteWalletView} exact />\r\n\r\n              <Route\r\n                path='/account'\r\n                component={MainView}\r\n                exact\r\n              />\r\n              <Route\r\n                path='/account-priv'\r\n                render={(props) => (\r\n                  <PrivateKeyView {...props} id='0' />\r\n                )}\r\n                exact\r\n              />\r\n              <Route path=\"/account-hardware\" component={ConnectHardwareWalletView} exact />\r\n              <Route path=\"/account-newaccount\" component={NewAccountView} exact />\r\n              <Route path=\"/account-details\" component={AccountView} exact />\r\n\r\n              {canConnect && (\r\n                <>\r\n                  <Route path=\"/connect-wallet\" component={ConnectWallet} exact />\r\n\r\n                  {connectedAccounts.length > 0 && (\r\n                    <>\r\n                      <Route\r\n                        path=\"/connected-accounts\"\r\n                        component={ConnectedAccounts}\r\n                        exact\r\n                      />\r\n                    </>\r\n                  )}\r\n                </>\r\n              )}\r\n            </>\r\n          ) : (\r\n            <>\r\n              <Route path=\"/import\" component={Import} exact />\r\n            </>\r\n          )}\r\n        </Switch>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/routers/Auth.tsx b/extension/source/routers/Auth.tsx
--- a/extension/source/routers/Auth.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/routers/Auth.tsx	(date 1637064532439)
@@ -1,6 +1,6 @@
 import React, { useEffect } from 'react';
-import { useAlert } from 'react-alert';
-import { browser } from 'webextension-polyfill-ts';
+import Import from 'containers/common/Import';
+
 import {
   Switch,
   Route,
@@ -8,31 +8,24 @@
   useLocation,
   useHistory,
 } from 'react-router-dom';
-import Start from 'containers/auth/Start';
-import Home from 'containers/auth/Home';
-import Send, { SendConfirm } from 'containers/auth/Send';
-import UpdateAsset, { UpdateConfirm } from 'containers/auth/UpdateAsset';
-import Create, { CreateTokenConfirm } from 'containers/auth/Create';
-import IssueAsset, { IssueTokenConfirm } from 'containers/auth/IssueAsset';
-import IssueNFT, { CreateAndIssueNFTConfirm } from 'containers/auth/IssueNFT';
-import Receive from 'containers/auth/Receive';
-import Import from 'containers/common/Import';
-import ConnectWallet from 'containers/auth/ConnectWallet';
-import ConnectedAccounts from 'containers/auth/ConnectWallet/ConnectedAccounts';
-import { useController } from 'hooks/index';
-import { useSelector } from 'react-redux';
-import { RootState } from 'state/store';
-import IWalletState from 'state/wallet/types';
-import TransferOwnership, {
-  TransferOwnershipConfirm,
-} from 'containers/auth/TransferOwnership';
 
-import { getHost } from '../scripts/Background/helpers';
+import {
+  useController,
+  useStore,
+  useUtils,
+  useBrowser
+} from 'hooks/index';
 
-import { SendMatchProps } from './types';
-import SignPSBT from 'containers/auth/SignPSBT';
-import MintNFT, { MintNFTConfirm } from 'containers/auth/MintNFT';
-import SignAndSend from 'containers/auth/SignAndSend';
+import {
+  Home, 
+  Receive,
+  ConnectWallet,
+  ConnectedAccounts,
+  Send,
+  SendConfirm,
+  Start
+} from 'containers/auth/index';
+
 import {
   AboutView,
   AccountView,
@@ -45,16 +38,36 @@
   PrivateKeyView
 } from 'containers/auth/Settings/views';
 
+import {
+  Create,
+  CreateTokenConfirm,
+  IssueAsset,
+  IssueAssetConfirm,
+  IssueNFT,
+  CreateAndIssueNFTConfirm,
+  UpdateAsset,
+  UpdateAssetConfirm,
+  TransferOwnership,
+  TransferOwnershipConfirm,
+  MintNFT,
+  MintNFTConfirm,
+  SignAndSend,
+  SignPSBT,
+} from 'containers/auth/Transactions/views';
+
+import { SendMatchProps } from './types';
+
 const Auth = () => {
   const location = useLocation();
-  const alert = useAlert();
   const history = useHistory();
   const controller = useController();
   const isUnlocked = !controller.wallet.isLocked();
 
+  const { getHost, alert } = useUtils();
+  const { browser } = useBrowser();
+
   const {
     accounts,
-    tabs,
     confirmingTransaction,
     creatingAsset,
     issuingNFT,
@@ -64,8 +77,9 @@
     signingTransaction,
     signingPSBT,
     mintNFT,
-  }: IWalletState = useSelector((state: RootState) => state.wallet);
-  const { currentURL, canConnect } = tabs;
+    currentURL,
+    canConnect
+  } = useStore();
 
   const connectedAccounts = accounts.filter((account) => {
     return (
@@ -245,7 +259,7 @@
               <Route path="/issueAsset" component={IssueAsset} exact />
               <Route
                 path="/issueAsset/confirm"
-                component={IssueTokenConfirm}
+                component={IssueAssetConfirm}
                 exact
               />
               <Route path="/mintNFT" component={MintNFT} exact />
@@ -257,7 +271,7 @@
               <Route path="/updateAsset" component={UpdateAsset} exact />
               <Route
                 path="/updateAsset/confirm"
-                component={UpdateConfirm}
+                component={UpdateAssetConfirm}
                 exact
               />
               <Route path="/issueNFT" component={IssueNFT} exact />
Index: extension/source/containers/auth/Settings/views/PhraseView/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { useState } from 'react';\r\nimport { Form, Input } from 'antd';\r\nimport { useController, useUtils } from 'hooks/index';\r\nimport ViewLayout from '../Layout';\r\n\r\nconst PhraseView = () => {\r\n  const [checked, setChecked] = useState<boolean>(false);\r\n  const [phrase, setPhrase] = useState<string>(\r\n    '**** ******* ****** ****** ****** ******** *** ***** ****** ***** *****'\r\n  );\r\n\r\n  const { alert } = useUtils();\r\n  const controller = useController();\r\n  const onSubmit = (data: any) => {\r\n    const res = controller.wallet.getPhrase(data.password);\r\n    if (res) {\r\n      setPhrase(res);\r\n      setChecked(true);\r\n\r\n      return;\r\n    }\r\n\r\n    alert.removeAll();\r\n    alert.error('Error: Invalid password');\r\n  };\r\n\r\n  const handleCopySeed = () => {\r\n    if (!checked) return;\r\n    // copyText(phrase);\r\n  };\r\n\r\n  return (\r\n    <ViewLayout title=\"WALLET SEED PHRASE\">\r\n      <div className=\"bg-brand-deepPink w-popup fixed h-popup\">\r\n        <span>Please input your wallet password and press enter:</span>\r\n        <Form\r\n          className=\"flex justify-center items-center flex-col gap-8 text-center\"\r\n          name=\"basic\"\r\n          labelCol={{ span: 8 }}\r\n          wrapperCol={{ span: 16 }}\r\n          initialValues={{ remember: true }}\r\n          onFinish={onSubmit}\r\n          autoComplete=\"off\"\r\n        >\r\n          <Form.Item\r\n            name=\"password\"\r\n            hasFeedback\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: ''\r\n              },\r\n              ({ }) => ({\r\n                validator(_, value) {\r\n                  if (controller.wallet.getPhrase(value)) {\r\n                    return Promise.resolve();\r\n                  }\r\n\r\n                  return Promise.reject('');\r\n                },\r\n              }),\r\n            ]}\r\n          >\r\n            <Input.Password placeholder=\"Enter your password\" />\r\n          </Form.Item>\r\n        </Form>\r\n\r\n        <span>Click to copy your seed phrase:</span>\r\n        <div onClick={handleCopySeed}>\r\n          {phrase}\r\n        </div>\r\n        <span>\r\n          <b>Warning:</b> Keep your seed phrase secret! Anyone with your seed\r\n          phrase can access any account connected to this wallet and steal your\r\n          assets.\r\n        </span>\r\n      </div>\r\n    </ViewLayout>\r\n  );\r\n};\r\n\r\nexport default PhraseView;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Settings/views/PhraseView/index.tsx b/extension/source/containers/auth/Settings/views/PhraseView/index.tsx
--- a/extension/source/containers/auth/Settings/views/PhraseView/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Settings/views/PhraseView/index.tsx	(date 1637064532372)
@@ -1,7 +1,7 @@
 import React, { useState } from 'react';
 import { Form, Input } from 'antd';
 import { useController, useUtils } from 'hooks/index';
-import ViewLayout from '../Layout';
+import { AuthViewLayout } from 'containers/common/Layout';
 
 const PhraseView = () => {
   const [checked, setChecked] = useState<boolean>(false);
@@ -30,7 +30,7 @@
   };
 
   return (
-    <ViewLayout title="WALLET SEED PHRASE">
+    <AuthViewLayout title="WALLET SEED PHRASE">
       <div className="bg-brand-deepPink w-popup fixed h-popup">
         <span>Please input your wallet password and press enter:</span>
         <Form
@@ -75,7 +75,7 @@
           assets.
         </span>
       </div>
-    </ViewLayout>
+    </AuthViewLayout>
   );
 };
 
Index: extension/source/containers/auth/Settings/views/AboutView/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { FC } from 'react';\r\nimport { useUtils } from 'hooks/index';\r\nimport ViewLayout from '../Layout';\r\n\r\nconst AboutView: FC = () => {\r\n  const { alert } = useUtils();\r\n  const handleSupportClick = () => {\r\n    alert.show('You will be redirected to Syscoin Discord, please contact support team at #pali_support', {\r\n      timeout: 5000,\r\n      type: 'success',\r\n      onClose: () => {\r\n        window.open('https://discord.gg/8QKeyurHRd')\r\n      }\r\n    });\r\n\r\n  };\r\n  const handleDocsClick = () => {\r\n    window.open('https://docs.paliwallet.com/');\r\n  };\r\n  return (\r\n    <ViewLayout title=\"INFO & HELP\">\r\n      <span>Pali Wallet Chrome Extension v1.0</span>\r\n      <span>Version: 1.0.10</span>\r\n      <span>\r\n        Support:{' '}\r\n        <a\r\n          onClick={handleSupportClick}\r\n        >\r\n          Pali support\r\n        </a>\r\n      </span>\r\n      <span>\r\n        API Docs\r\n        <a\r\n          onClick={handleDocsClick}\r\n        >\r\n          Pali API\r\n        </a>\r\n      </span>\r\n    </ViewLayout>\r\n  );\r\n};\r\n\r\nexport default AboutView;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Settings/views/AboutView/index.tsx b/extension/source/containers/auth/Settings/views/AboutView/index.tsx
--- a/extension/source/containers/auth/Settings/views/AboutView/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Settings/views/AboutView/index.tsx	(date 1637064532364)
@@ -1,9 +1,10 @@
 import React, { FC } from 'react';
 import { useUtils } from 'hooks/index';
-import ViewLayout from '../Layout';
+import { AuthViewLayout } from 'containers/common/Layout';
 
 const AboutView: FC = () => {
   const { alert } = useUtils();
+  
   const handleSupportClick = () => {
     alert.show('You will be redirected to Syscoin Discord, please contact support team at #pali_support', {
       timeout: 5000,
@@ -18,7 +19,7 @@
     window.open('https://docs.paliwallet.com/');
   };
   return (
-    <ViewLayout title="INFO & HELP">
+    <AuthViewLayout title="INFO & HELP">
       <span>Pali Wallet Chrome Extension v1.0</span>
       <span>Version: 1.0.10</span>
       <span>
@@ -37,7 +38,7 @@
           Pali API
         </a>
       </span>
-    </ViewLayout>
+    </AuthViewLayout>
   );
 };
 
Index: extension/source/containers/auth/Settings/views/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export { default as MainView } from './MainView';\r\nexport { default as AccountView } from './AccountView';\r\n// export { default as GeneralView } from './GeneralView';\r\nexport { default as PhraseView } from './PhraseView';\r\nexport { default as DeleteWalletView } from './DeleteWalletView';\r\nexport { default as PrivateKeyView } from './PrivateKeyView';\r\nexport { default as NewAccountView } from './NewAccountView';\r\nexport { default as AboutView } from './AboutView';\r\nexport { default as ConnectHardwareWalletView } from './ConnectHardwareWalletView';\r\nexport { default as AutolockView } from './AutolockView';\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Settings/views/index.tsx b/extension/source/containers/auth/Settings/views/index.tsx
--- a/extension/source/containers/auth/Settings/views/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Settings/views/index.tsx	(date 1637064532375)
@@ -1,6 +1,5 @@
 export { default as MainView } from './MainView';
 export { default as AccountView } from './AccountView';
-// export { default as GeneralView } from './GeneralView';
 export { default as PhraseView } from './PhraseView';
 export { default as DeleteWalletView } from './DeleteWalletView';
 export { default as PrivateKeyView } from './PrivateKeyView';
Index: demo/src/state/store.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport wallet from \"./wallet\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({ thunk: true, serializableCheck: false }),\r\n];\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  middleware.push(logger);\r\n}\r\n\r\nconst store = configureStore({\r\n  reducer: wallet,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV !== \"production\",\r\n  // preloadedState: loadState()\r\n});\r\n\r\nexport default store;\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/demo/src/state/store.js b/demo/src/state/store.js
--- a/demo/src/state/store.js	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/demo/src/state/store.js	(date 1637064532270)
@@ -6,9 +6,9 @@
   ...getDefaultMiddleware({ thunk: true, serializableCheck: false }),
 ];
 
-if (process.env.NODE_ENV !== "production") {
-  middleware.push(logger);
-}
+// if (process.env.NODE_ENV !== "production") {
+//   middleware.push(logger);
+// }
 
 const store = configureStore({
   reducer: wallet,
Index: extension/source/containers/auth/Settings/index.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>export { default } from './Settings';\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/extension/source/containers/auth/Settings/index.tsx b/extension/source/containers/auth/Settings/index.tsx
--- a/extension/source/containers/auth/Settings/index.tsx	(revision cd6aec23652d9ce0ff692ae6ddb7560449bd7776)
+++ b/extension/source/containers/auth/Settings/index.tsx	(date 1637064532363)
@@ -1,1 +1,1 @@
-export { default } from './Settings';
+export { Settings } from './Settings';
