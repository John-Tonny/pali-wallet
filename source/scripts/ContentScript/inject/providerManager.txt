const injectedProvider = () => {
  const getMethod = () => {};

  return {
    getMethod,
  };
};

const ProviderManager = () => {
  const proxy = (type, data) => {
  return new Promise((resolve, reject) => {
    const id = Date.now() + '.' + Math.random();

    console.log('id listener', id);

    window.addEventListener(
      id,
      (event) => {
        const response = JSON.parse(event.detail);

        console.log(1, response);

        if (response.error) {
          reject(new Error(response.error));
        } else {
          resolve(response);
        }
      },
      {
        once: true,
        passive: true,
      }
    );

    console.log('posting message', type, id, data)

    window.postMessage(
      {
        id,
        type,
        data,
      },
      '*'
    );
  });
};

const getProviderFor = () => {};

const enable = () => {
  console.log('enabling provider manager');

  return proxy('ENABLE_REQUEST', { asset: 'SYS', network: 'main' });
};

  return {
  proxy,
  getProviderFor,
  enable,
  }
}

window.providerManager = ProviderManager();
